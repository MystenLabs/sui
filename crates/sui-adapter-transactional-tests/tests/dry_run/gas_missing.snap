---
source: external-crates/move/crates/move-transactional-test-runner/src/framework.rs
---
processed 17 tasks

init:
A: object(0,0), B: object(0,1), C: object(0,2)

task 1, lines 8-55:
//# publish
created: object(1,0)
mutated: object(0,3)
gas summary: computation_cost: 1000000, storage_cost: 7508800,  storage_rebate: 0, non_refundable_storage_fee: 0

task 2, lines 56-59:
//# programmable --sender A
//> 0: test::m::get_objects();
// Move all A coins to B
created: object(2,0), object(2,1), object(2,2), object(2,3), object(2,4)
mutated: object(0,0)
gas summary: computation_cost: 1000000, storage_cost: 7144000,  storage_rebate: 0, non_refundable_storage_fee: 0

task 3, lines 60-63:
//# programmable --sender A --inputs @B
//> TransferObjects([Gas], Input(0))
// Return a small amount of coin to A
mutated: object(0,0)
gas summary: computation_cost: 1000000, storage_cost: 988000,  storage_rebate: 978120, non_refundable_storage_fee: 9880

task 4, lines 64-68:
//# programmable --sender B --inputs 2 @A
//> SplitCoins(Gas, [Input(0)]);
//> TransferObjects([Result(0)], Input(1))
// Account A now has gas object 4,0 and a balance of 2
created: object(4,0)
mutated: object(0,1)
gas summary: computation_cost: 1000000, storage_cost: 1976000,  storage_rebate: 0, non_refundable_storage_fee: 0

task 5, lines 69-71:
//# view-object 4,0
Owner: Account Address ( A )
Version: 2
Contents: sui::coin::Coin<sui::sui::SUI> {
    id: sui::object::UID {
        id: sui::object::ID {
            bytes: fake(4,0),
        },
    },
    balance: sui::balance::Balance<sui::sui::SUI> {
        value: 2u64,
    },
}

task 6, lines 72-75:
//# programmable --sender A --inputs 100 --dry-run --gas-payment 4,0
//> 0: test::m::large_storage_func(Input(0));
// Give A enough gas to send transaction after rebates, it should still fail
Error: Error checking transaction input objects: GasBalanceTooLow { gas_balance: 2, needed_gas_amount: 5000000000 }

task 7, lines 76-80:
//# programmable --sender B --inputs 2499999999 @A
//> SplitCoins(Gas, [Input(0), Input(0)]);
//> TransferObjects([NestedResult(0,0), NestedResult(0,1)], Input(1))
// Account A now has 7,0 7,1 that are 2 gas short of the needed amount, note gas smashing rebate also occurs
created: object(7,0), object(7,1)
mutated: object(0,1)
gas summary: computation_cost: 1000000, storage_cost: 2964000,  storage_rebate: 978120, non_refundable_storage_fee: 9880

task 8, lines 81-84:
//# programmable --sender A --inputs 100 --dry-run --gas-payment 7,0 --gas-payment 7,1
//> 0: test::m::large_storage_func(Input(0));
// Destroying an object before the transaction ends does not allow the transaction to succeed
Error: Error checking transaction input objects: GasBalanceTooLow { gas_balance: 4999999998, needed_gas_amount: 5000000000 }

task 9, lines 85-89:
//# programmable --sender A --inputs object(2,0) 100 --dry-run --gas-payment 7,0 --gas-payment 7,1
//> 0: test::m::destroy_object(Input(0));
//> 1: test::m::large_storage_func(Input(1));
// Include 3,0 in the gas payment, it should succeed
Error: Error checking transaction input objects: GasBalanceTooLow { gas_balance: 4999999998, needed_gas_amount: 5000000000 }

task 10, lines 90-93:
//# programmable --sender A --inputs 100 --dry-run --gas-payment 7,0 --gas-payment 7,1 --gas-payment 4,0
//> 0: test::m::large_storage_func(Input(0));
// Return the balance of A to zero
created: object(10,0)
mutated: object(7,0)
deleted: object(4,0), object(7,1)
gas summary: computation_cost: 1000000, storage_cost: 2219200,  storage_rebate: 2934360, non_refundable_storage_fee: 29640

task 11, lines 94-96:
//# programmable --sender A --inputs object(7,0) --dry-run --gas-payment 4,0
// Return a small amount of coin to A
Error: Error checking transaction input objects: GasBalanceTooLow { gas_balance: 2, needed_gas_amount: 5000000000 }

task 12, lines 97-101:
//# programmable --sender B --inputs 2 @A
//> SplitCoins(Gas, [Input(0)]);
//> TransferObjects([Result(0)], Input(1))
// Give A enough gas to send transaction
created: object(12,0)
mutated: object(0,1)
gas summary: computation_cost: 1000000, storage_cost: 1976000,  storage_rebate: 978120, non_refundable_storage_fee: 9880

task 13, lines 102-106:
//# programmable --sender B --inputs 2499999999 @A
//> SplitCoins(Gas, [Input(0), Input(0)]);
//> TransferObjects([NestedResult(0,0), NestedResult(0,1)], Input(1))
// Not enough gas for large_compute_func() when excluding 12,0, gas smashing rebates
created: object(13,0), object(13,1)
mutated: object(0,1)
gas summary: computation_cost: 1000000, storage_cost: 2964000,  storage_rebate: 978120, non_refundable_storage_fee: 9880

task 14, lines 107-110:
//# programmable --sender A --inputs 100 --dry-run --gas-payment 13,0 --gas-payment 13,1
//> 0: test::m::large_compute_func(Input(0));
// Destroying an object before the transaction ends does not allow the transaction to succeed
Error: Error checking transaction input objects: GasBalanceTooLow { gas_balance: 4999999998, needed_gas_amount: 5000000000 }

task 15, lines 111-115:
//# programmable --sender A --inputs object(2,0) 100 --dry-run --gas-payment 13,0 --gas-payment 13,1
//> 0: test::m::destroy_object(Input(0));
//> 1: test::m::large_compute_func(Input(1));
// Include 3,0 in the gas payment, it should succeed
Error: Error checking transaction input objects: GasBalanceTooLow { gas_balance: 4999999998, needed_gas_amount: 5000000000 }

task 16, lines 116-117:
//# programmable --sender A --inputs 100 --dry-run --gas-payment 13,0 --gas-payment 13,1 --gas-payment 12,0
//> 0: test::m::large_compute_func(Input(0));
mutated: object(13,0)
deleted: object(12,0), object(13,1)
gas summary: computation_cost: 1000000, storage_cost: 988000,  storage_rebate: 2934360, non_refundable_storage_fee: 29640
