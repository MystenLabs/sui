---
source: external-crates/move/crates/move-transactional-test-runner/src/framework.rs
---
processed 12 tasks

init:
A: object(0,0), B: object(0,1)

task 1, lines 6-36:
//# publish
created: object(1,0)
mutated: object(0,2)
gas summary: computation_cost: 1000000, storage_cost: 7448000,  storage_rebate: 0, non_refundable_storage_fee: 0

task 2, lines 37-40:
//# programmable --sender A
//> ex::m::mint()
// child
created: object(2,0), object(2,1)
mutated: object(0,0)
gas summary: computation_cost: 1000000, storage_cost: 3473200,  storage_rebate: 0, non_refundable_storage_fee: 0

task 3, lines 41-43:
//# view-object 2,0
Owner: ConsensusAddressOwner( 2, A )
Version: 2
Contents: ex::m::Child {
    id: sui::object::UID {
        id: sui::object::ID {
            bytes: fake(2,0),
        },
    },
}

task 4, lines 44-46:
//# view-object 2,1
Owner: Account Address ( A )
Version: 2
Contents: ex::m::Parent {
    id: sui::object::UID {
        id: sui::object::ID {
            bytes: fake(2,1),
        },
    },
}

task 5, lines 47-48:
//# programmable --sender A --inputs object(2,0) object(2,1)
//> ex::m::add_df(Input(1), Input(0))
created: object(5,0)
mutated: object(0,0), object(2,0), object(2,1)
gas summary: computation_cost: 1000000, storage_cost: 5928000,  storage_rebate: 3438468, non_refundable_storage_fee: 34732

task 6, line 50:
//# view-object 2,0
Owner: Object ID: ( fake(5,0) )
Version: 3
Contents: ex::m::Child {
    id: sui::object::UID {
        id: sui::object::ID {
            bytes: fake(2,0),
        },
    },
}

task 7, lines 52-54:
//# view-object 5,0
Owner: Object ID: ( fake(2,1) )
Version: 3
Contents: sui::dynamic_field::Field<sui::dynamic_object_field::Wrapper<u64>, sui::object::ID> {
    id: sui::object::UID {
        id: sui::object::ID {
            bytes: fake(5,0),
        },
    },
    name: sui::dynamic_object_field::Wrapper<u64> {
        name: 0u64,
    },
    value: sui::object::ID {
        bytes: fake(2,0),
    },
}

task 8, lines 55-59:
//# programmable --inputs object(2,0) @A --sender A
//> 0: sui::party::single_owner(Input(1));
//> sui::transfer::public_party_transfer<ex::m::A>(Input(0), Result(0))
// Pull the object back out.
Error: Error checking transaction input objects: InvalidChildObjectArgument { child_id: object(2,0), parent_id: object(5,0) }

task 9, lines 60-63:
//# programmable --sender A --inputs object(2,1)
//> ex::m::remove_df(Input(0))
// Verify it can again be transferred to a different party.
mutated: object(0,0), object(2,0), object(2,1)
deleted: object(5,0)
gas summary: computation_cost: 1000000, storage_cost: 3473200,  storage_rebate: 5868720, non_refundable_storage_fee: 59280

task 10, lines 64-66:
//# programmable --inputs object(2,0) @B --sender A
//> 0: sui::party::single_owner(Input(1));
//> sui::transfer::public_party_transfer<ex::m::Child>(Input(0), Result(0))
mutated: object(0,0), object(2,0)
gas summary: computation_cost: 1000000, storage_cost: 2226800,  storage_rebate: 2204532, non_refundable_storage_fee: 22268

task 11, line 68:
//# view-object 2,0
Owner: ConsensusAddressOwner( 5, B )
Version: 5
Contents: ex::m::Child {
    id: sui::object::UID {
        id: sui::object::ID {
            bytes: fake(2,0),
        },
    },
}
