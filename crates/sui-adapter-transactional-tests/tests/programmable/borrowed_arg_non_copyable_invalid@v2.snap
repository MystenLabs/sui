---
source: external-crates/move/crates/move-transactional-test-runner/src/framework.rs
---
processed 10 tasks

init:
A: object(0,0)

task 1, lines 8-24:
//# publish
created: object(1,0)
mutated: object(0,1)
gas summary: computation_cost: 1000000, storage_cost: 6414400,  storage_rebate: 0, non_refundable_storage_fee: 0

task 2, lines 26-28:
//# programmable
//> 0: test::m1::r();
//> test::m1::take_and_imm(Result(0), Result(0))
Error: Transaction Effects Status: Invalid command argument at 1. Specified argument location does not have a value and cannot be used
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: CommandArgumentError { arg_idx: 1, kind: ArgumentWithoutValue }, source: None, command: Some(1) } }

task 3, lines 30-32:
//# programmable
//> 0: test::m1::r();
//> test::m1::imm_and_take(Result(0), Result(0))
Error: Transaction Effects Status: Invalid command argument at 1. Cannot move a borrowed value. The value's type does resulted in this argument usage being inferred as a move. This is likely due to the type not having the `copy` ability; although in rare cases, it could also be this is the last usage of a value without the `drop` ability.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: CommandArgumentError { arg_idx: 1, kind: CannotMoveBorrowedValue }, source: None, command: Some(1) } }

task 4, lines 34-36:
//# programmable
//> 0: test::m1::r();
//> test::m1::take_and_mut(Result(0), Result(0))
Error: Transaction Effects Status: Invalid command argument at 1. Specified argument location does not have a value and cannot be used
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: CommandArgumentError { arg_idx: 1, kind: ArgumentWithoutValue }, source: None, command: Some(1) } }

task 5, lines 38-40:
//# programmable
//> 0: test::m1::r();
//> test::m1::mut_and_take(Result(0), Result(0))
Error: Transaction Effects Status: Invalid command argument at 1. Cannot move a borrowed value. The value's type does resulted in this argument usage being inferred as a move. This is likely due to the type not having the `copy` ability; although in rare cases, it could also be this is the last usage of a value without the `drop` ability.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: CommandArgumentError { arg_idx: 1, kind: CannotMoveBorrowedValue }, source: None, command: Some(1) } }

task 6, lines 42-44:
//# programmable
//> 0: test::m1::r();
//> test::m1::imm_and_mut(Result(0), Result(0))
Error: Transaction Effects Status: Invalid command argument at 1. The argument specified cannot be used as a reference argument in the Move call. Either the argument is a mutable reference and it conflicts with another argument to the call, or the argument is mutable and another reference extends it and will be used in a later command.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: CommandArgumentError { arg_idx: 1, kind: InvalidReferenceArgument }, source: None, command: Some(1) } }

task 7, lines 46-48:
//# programmable
//> 0: test::m1::r();
//> test::m1::mut_and_imm(Result(0), Result(0))
Error: Transaction Effects Status: Invalid command argument at 0. The argument specified cannot be used as a reference argument in the Move call. Either the argument is a mutable reference and it conflicts with another argument to the call, or the argument is mutable and another reference extends it and will be used in a later command.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: CommandArgumentError { arg_idx: 0, kind: InvalidReferenceArgument }, source: None, command: Some(1) } }

task 8, lines 50-52:
//# programmable
//> 0: test::m1::r();
//> test::m1::imm_mut_imm(Result(0), Result(0), Result(0))
Error: Transaction Effects Status: Invalid command argument at 1. The argument specified cannot be used as a reference argument in the Move call. Either the argument is a mutable reference and it conflicts with another argument to the call, or the argument is mutable and another reference extends it and will be used in a later command.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: CommandArgumentError { arg_idx: 1, kind: InvalidReferenceArgument }, source: None, command: Some(1) } }

task 9, lines 54-56:
//# programmable
//> 0: test::m1::r();
//> test::m1::imm_take_mut(Result(0), Result(0), Result(0))
Error: Transaction Effects Status: Invalid command argument at 1. Cannot move a borrowed value. The value's type does resulted in this argument usage being inferred as a move. This is likely due to the type not having the `copy` ability; although in rare cases, it could also be this is the last usage of a value without the `drop` ability.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: CommandArgumentError { arg_idx: 1, kind: CannotMoveBorrowedValue }, source: None, command: Some(1) } }
