// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

use std::collections::BTreeMap;
use std::sync::LazyLock;
use std::{fs, io::Read, path::PathBuf};
use sui_framework::SystemPackage;
use sui_types::base_types::ObjectID;
use sui_types::{
    BRIDGE_PACKAGE_ID, DEEPBOOK_PACKAGE_ID, MOVE_STDLIB_PACKAGE_ID, SUI_FRAMEWORK_PACKAGE_ID,
    SUI_SYSTEM_PACKAGE_ID,
};

mod manifest;
pub use manifest::*;

const SYSTEM_PACKAGE_PUBLISH_ORDER: &[ObjectID] = &[
    MOVE_STDLIB_PACKAGE_ID,
    SUI_FRAMEWORK_PACKAGE_ID,
    SUI_SYSTEM_PACKAGE_ID,
    DEEPBOOK_PACKAGE_ID,
    BRIDGE_PACKAGE_ID,
];

/// Static mapping from protocol versions to the commit hash for the framework code.
// Generated by [generate_framework_version_table] in build.rs
pub static FRAMEWORK_MANIFEST: LazyLock<SnapshotManifest> =
    LazyLock::new(|| BTreeMap::from(include!(concat!(env!("OUT_DIR"), "/framework_manifest.rs"))));

#[test]
fn test_framework_manifest_nonempty() {
    assert!(!FRAMEWORK_MANIFEST.is_empty());
}

pub fn load_bytecode_snapshot(protocol_version: u64) -> anyhow::Result<Vec<SystemPackage>> {
    let mut snapshot_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
    snapshot_path.extend(["bytecode_snapshot", protocol_version.to_string().as_str()]);
    let mut snapshots: BTreeMap<ObjectID, SystemPackage> = fs::read_dir(&snapshot_path)?
        .flatten()
        .map(|entry| {
            let file_name = entry.file_name().to_str().unwrap().to_string();
            let mut file = fs::File::open(snapshot_path.clone().join(file_name))?;
            let mut buffer = Vec::new();
            file.read_to_end(&mut buffer)?;
            let package: SystemPackage = bcs::from_bytes(&buffer)?;
            Ok((*package.id(), package))
        })
        .collect::<anyhow::Result<_>>()?;

    // system packages need to be restored in a specific order
    assert!(snapshots.len() <= SYSTEM_PACKAGE_PUBLISH_ORDER.len());
    let mut snapshot_objects = Vec::new();
    for package_id in SYSTEM_PACKAGE_PUBLISH_ORDER {
        if let Some(object) = snapshots.remove(package_id) {
            snapshot_objects.push(object);
        }
    }
    Ok(snapshot_objects)
}
