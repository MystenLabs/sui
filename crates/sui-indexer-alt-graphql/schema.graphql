"""
System transaction for creating the accumulator root.
"""
type AccumulatorRootCreateTransaction {
	"""
	A workaround to define an empty variant of a GraphQL union.
	"""
	_: Boolean
}

type ActiveJwk {
	"""
	The string (Issuing Authority) that identifies the OIDC provider.
	"""
	iss: String
	"""
	The string (Key ID) that identifies the JWK among a set of JWKs, (RFC 7517, Section 4.5).
	"""
	kid: String
	"""
	The JWK key type parameter, (RFC 7517, Section 4.1).
	"""
	kty: String
	"""
	The JWK RSA public exponent, (RFC 7517, Section 9.3).
	"""
	e: String
	"""
	The JWK RSA modulus, (RFC 7517, Section 9.3).
	"""
	n: String
	"""
	The JWK algorithm parameter, (RFC 7517, Section 4.4).
	"""
	alg: String
	"""
	The most recent epoch in which the JWK was validated.
	"""
	epoch: Epoch
}

type ActiveJwkConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ActiveJwkEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [ActiveJwk!]!
}

"""
An edge in a connection.
"""
type ActiveJwkEdge {
	"""
	The item at the end of the edge
	"""
	node: ActiveJwk!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type Address implements IAddressable {
	"""
	The Address' identifier, a 32-byte number represented as a 64-character hex string, with a lead "0x".
	"""
	address: SuiAddress!
}

"""
System transaction for creating the on-chain state used by zkLogin.
"""
type AuthenticatorStateCreateTransaction {
	"""
	A workaround to define an empty variant of a GraphQL union.
	"""
	_: Boolean
}

type AuthenticatorStateUpdateTransaction {
	"""
	Epoch of the authenticator state update transaction.
	"""
	epoch: Epoch
	"""
	Consensus round of the authenticator state update.
	"""
	round: UInt53
	"""
	Newly active JWKs (JSON Web Keys).
	"""
	newActiveJwks(first: Int, after: String, last: Int, before: String): ActiveJwkConnection!
	"""
	The initial version of the authenticator object that it was shared at.
	"""
	authenticatorObjInitialSharedVersion: UInt53
}

"""
Effects to the balance (sum of coin values per coin type) of addresses and objects.
"""
type BalanceChange {
	"""
	The address or object whose balance has changed.
	"""
	owner: Address
	"""
	The inner type of the coin whose balance has changed (e.g. `0x2::sui::SUI`).
	"""
	coinType: String
	"""
	The signed balance change.
	"""
	amount: BigInt
}

type BalanceChangeConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [BalanceChangeEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [BalanceChange!]!
}

"""
An edge in a connection.
"""
type BalanceChangeEdge {
	"""
	The item at the end of the edge
	"""
	node: BalanceChange!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

"""
String containing Base64-encoded binary data.
"""
scalar Base64

"""
String representation of an arbitrary width, possibly signed integer
"""
scalar BigInt


"""
System transaction for initializing bridge committee.
"""
type BridgeCommitteeInitTransaction {
	"""
	The initial shared version of the bridge object.
	"""
	bridgeObjectVersion: UInt53
}

"""
System transaction for creating bridge state for cross-chain operations.
"""
type BridgeStateCreateTransaction {
	"""
	The chain identifier for which this bridge state is being created.
	"""
	chainIdentifier: String
}

"""
A system transaction that updates epoch information on-chain (increments the current epoch). Executed by the system once per epoch, without using gas. Epoch change transactions cannot be submitted by users, because validators will refuse to sign them.

This transaction kind is deprecated in favour of `EndOfEpochTransaction`.
"""
type ChangeEpochTransaction {
	"""
	The next (to become) epoch.
	"""
	epoch: Epoch
	"""
	The epoch's corresponding protocol configuration.
	"""
	protocolConfigs: ProtocolConfigs
	"""
	The total amount of gas charged for storage during the epoch.
	"""
	storageCharge: UInt53
	"""
	The total amount of gas charged for computation during the epoch.
	"""
	computationCharge: UInt53
	"""
	The amount of storage rebate refunded to the transaction senders.
	"""
	storageRebate: UInt53
	"""
	The non-refundable storage fee.
	"""
	nonRefundableStorageFee: UInt53
	"""
	Unix timestamp when epoch started.
	"""
	epochStartTimestamp: DateTime
}

"""
Checkpoints contain finalized transactions and are used for node synchronization and global transaction ordering.
"""
type Checkpoint {
	"""
	The checkpoint's position in the total order of finalized checkpoints, agreed upon by consensus.
	"""
	sequenceNumber: UInt53!
	"""
	Query the RPC as if this checkpoint were the latest checkpoint.
	"""
	query: Query
	"""
	A 32-byte hash that uniquely identifies the checkpoint, encoded in Base58. This is a hash of the checkpoint's summary.
	"""
	digest: String
	"""
	A 32-byte hash that uniquely identifies the checkpoint's content, encoded in Base58.
	"""
	contentDigest: String
	"""
	The epoch that this checkpoint is part of.
	"""
	epoch: Epoch
	"""
	The total number of transactions in the network by the end of this checkpoint.
	"""
	networkTotalTransactions: UInt53
	"""
	The digest of the previous checkpoint's summary.
	"""
	previousCheckpointDigest: String
	"""
	The computation cost, storage cost, storage rebate, and non-refundable storage fee accumulated during this epoch, up to and including this checkpoint. These values increase monotonically across checkpoints in the same epoch, and reset on epoch boundaries.
	"""
	rollingGasSummary: GasCostSummary
	"""
	The Base64 serialized BCS bytes of this checkpoint's summary.
	"""
	summaryBcs: Base64
	"""
	The Base64 serialized BCS bytes of this checkpoint's contents.
	"""
	contentBcs: Base64
	"""
	The timestamp at which the checkpoint is agreed to have happened according to consensus. Transactions that access time in this checkpoint will observe this timestamp.
	"""
	timestamp: DateTime
	"""
	The aggregation of signatures from a quorum of validators for the checkpoint proposal.
	"""
	validatorSignatures: ValidatorAggregatedSignature
	transactions(first: Int, after: String, last: Int, before: String, filter: TransactionFilter): TransactionConnection
}

"""
Filter for paginating packages published within a range of checkpoints.
"""
input CheckpointFilter {
	"""
	Filter to packages that were published strictly after this checkpoint, defaults to fetching from the earliest checkpoint known to this RPC (this could be the genesis checkpoint, or some later checkpoint if data has been pruned).
	"""
	afterCheckpoint: UInt53
	"""
	Filter to packages published strictly before this checkpoint, defaults to fetching up to the latest checkpoint (inclusive).
	"""
	beforeCheckpoint: UInt53
}

"""
System transaction for creating the coin deny list state.
"""
type CoinDenyListStateCreateTransaction {
	"""
	A workaround to define an empty variant of a GraphQL union.
	"""
	_: Boolean
}

"""
System transaction that runs at the beginning of a checkpoint, and is responsible for setting the current value of the clock, based on the timestamp from consensus.
"""
type ConsensusCommitPrologueTransaction {
	"""
	Epoch of the commit prologue transaction.
	
	Present in V1, V2, V3, V4.
	"""
	epoch: Epoch
	"""
	Consensus round of the commit.
	
	Present in V1, V2, V3, V4.
	"""
	round: UInt53
	"""
	Unix timestamp from consensus.
	
	Present in V1, V2, V3, V4.
	"""
	commitTimestamp: DateTime
	"""
	Digest of consensus output, encoded as a Base58 string.
	
	Present in V2, V3, V4.
	"""
	consensusCommitDigest: String
	"""
	The sub DAG index of the consensus commit. This field is populated if there
	are multiple consensus commits per round.
	
	Present in V3, V4.
	"""
	subDagIndex: UInt53
	"""
	Digest of any additional state computed by the consensus handler.
	Used to detect forking bugs as early as possible.
	
	Present in V4.
	"""
	additionalStateDigest: String
}

"""
Reason why a transaction that attempted to access a consensus-managed object was cancelled.
"""
enum ConsensusObjectCancellationReason {
	"""
	Read operation was cancelled.
	"""
	CANCELLED_READ
	"""
	Object congestion prevented execution.
	"""
	CONGESTED
	"""
	Randomness service was unavailable.
	"""
	RANDOMNESS_UNAVAILABLE
	"""
	Internal use only.
	"""
	UNKNOWN
}

"""
A transaction that was cancelled before it could access the consensus-managed object, so the object was an input but remained unchanged.
"""
type ConsensusObjectCancelled {
	"""
	The ID of the consensus-managed object that the transaction intended to access.
	"""
	address: SuiAddress
	"""
	Reason why the transaction was cancelled.
	"""
	cancellationReason: ConsensusObjectCancellationReason
}

type ConsensusObjectRead {
	"""
	The version of the consensus-managed object that was read by this transaction.
	"""
	object: Object
}

"""
ISO-8601 Date and Time: RFC3339 in UTC with format: YYYY-MM-DDTHH:MM:SS.mmmZ. Note that the milliseconds part is optional, and it may be omitted if its value is 0.
"""
scalar DateTime

"""
System transaction that supersedes `ChangeEpochTransaction` as the new way to run transactions at the end of an epoch. Behaves similarly to `ChangeEpochTransaction` but can accommodate other optional transactions to run at the end of the epoch.
"""
type EndOfEpochTransaction {
	"""
	The list of system transactions that are allowed to run at the end of the epoch.
	"""
	transactions(first: Int, after: String, last: Int, before: String): EndOfEpochTransactionKindConnection!
}

union EndOfEpochTransactionKind = ChangeEpochTransaction | AuthenticatorStateCreateTransaction | RandomnessStateCreateTransaction | CoinDenyListStateCreateTransaction | StoreExecutionTimeObservationsTransaction | BridgeStateCreateTransaction | BridgeCommitteeInitTransaction | AccumulatorRootCreateTransaction

type EndOfEpochTransactionKindConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [EndOfEpochTransactionKindEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [EndOfEpochTransactionKind!]!
}

"""
An edge in a connection.
"""
type EndOfEpochTransactionKindEdge {
	"""
	The item at the end of the edge
	"""
	node: EndOfEpochTransactionKind!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

"""
Activity on Sui is partitioned in time, into epochs.

Epoch changes are opportunities for the network to reconfigure itself (perform protocol or system package upgrades, or change the committee) and distribute staking rewards. The network aims to keep epochs roughly the same duration as each other.

During a particular epoch the following data is fixed:

- protocol version,
- reference gas price,
- system package versions,
- validators in the committee.
"""
type Epoch {
	"""
	The epoch's id as a sequence number that starts at 0 and is incremented by one at every epoch change.
	"""
	epochId: UInt53!
	"""
	State of the Coin DenyList object (0x403) at the start of this epoch.
	
	The DenyList controls access to Regulated Coins. Writes to the DenyList are accumulated and only take effect on the next epoch boundary. Consequently, it's possible to determine the state of the DenyList for a transaction by reading it at the start of the epoch the transaction is in.
	"""
	coinDenyList: Object
	"""
	The epoch's corresponding protocol configuration, including the feature flags and the configuration options.
	"""
	protocolConfigs: ProtocolConfigs
	"""
	The minimum gas price that a quorum of validators are guaranteed to sign a transaction for in this epoch.
	"""
	referenceGasPrice: BigInt
	"""
	The timestamp associated with the first checkpoint in the epoch.
	"""
	startTimestamp: DateTime
	"""
	The system packages used by all transactions in this epoch.
	"""
	systemPackages(first: Int, after: String, last: Int, before: String): MovePackageConnection
	"""
	The timestamp associated with the last checkpoint in the epoch (or `null` if the epoch has not finished yet).
	"""
	endTimestamp: DateTime
	"""
	Validator-related properties, including the active validators.
	"""
	validatorSet: ValidatorSet
	"""
	The total number of checkpoints in this epoch.
	"""
	totalCheckpoints: UInt53
	"""
	The total number of transaction blocks in this epoch (or `null` if the epoch has not finished yet).
	"""
	totalTransactions: UInt53
	"""
	The total amount of gas fees (in MIST) that were paid in this epoch (or `null` if the epoch has not finished yet).
	"""
	totalGasFees: BigInt
	"""
	The total MIST rewarded as stake (or `null` if the epoch has not finished yet).
	"""
	totalStakeRewards: BigInt
	"""
	The amount added to total gas fees to make up the total stake rewards (or `null` if the epoch has not finished yet).
	"""
	totalStakeSubsidies: BigInt
	"""
	The storage fund available in this epoch (or `null` if the epoch has not finished yet).
	This fund is used to redistribute storage fees from past transactions to future validators.
	"""
	fundSize: BigInt
	"""
	The difference between the fund inflow and outflow, representing the net amount of storage fees accumulated in this epoch (or `null` if the epoch has not finished yet).
	"""
	netInflow: BigInt
	"""
	The storage fees paid for transactions executed during the epoch (or `null` if the epoch has not finished yet).
	"""
	fundInflow: BigInt
	"""
	The storage fee rebates paid to users who deleted the data associated with past transactions (or `null` if the epoch has not finished yet).
	"""
	fundOutflow: BigInt
	"""
	SUI set aside to account for objects stored on-chain, at the start of the epoch.
	This is also used for storage rebates.
	"""
	storageFund: StorageFund
	"""
	Information about whether this epoch was started in safe mode, which happens if the full epoch change logic fails.
	"""
	safeMode: SafeMode
	"""
	The value of the `version` field of `0x5`, the `0x3::sui::SuiSystemState` object.
	This version changes whenever the fields contained in the system state object (held in a dynamic field attached to `0x5`) change.
	"""
	systemStateVersion: UInt53
	"""
	Details of the system that are decided during genesis.
	"""
	systemParameters: SystemParameters
	"""
	Parameters related to the subsidy that supplements staking rewards
	"""
	systemStakeSubsidy: StakeSubsidy
	"""
	A commitment by the committee at the end of epoch on the contents of the live object set at that time.
	This can be used to verify state snapshots.
	"""
	liveObjectSetDigest: String
}

type Event {
	"""
	The Base64 encoded BCS serialized bytes of the entire Event structure from sui-types.
	This includes: package_id, transaction_module, sender, type, and contents (which itself contains the BCS-serialized Move struct data).
	"""
	eventBcs: Base64
	"""
	Address of the sender of the transaction that emitted this event.
	"""
	sender: Address
	"""
	The position of the event among the events from the same transaction.
	"""
	sequenceNumber: UInt53!
	"""
	Timestamp corresponding to the checkpoint this event's transaction was finalized in.
	All events from the same transaction share the same timestamp.
	"""
	timestamp: DateTime
	"""
	The transaction that emitted this event. This information is only available for events from indexed transactions, and not from transactions that have just been executed or dry-run.
	"""
	transaction: Transaction
}

type EventConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [EventEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Event!]!
}

"""
An edge in a connection.
"""
type EventEdge {
	"""
	The item at the end of the edge
	"""
	node: Event!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

"""
Represents execution error information for failed transactions.
"""
type ExecutionError {
	"""
	The error code of the Move abort, populated if this transaction failed with a Move abort.
	
	Returns the explicit code if the abort used `code` annotation (e.g., `abort(ERR, code = 5)` returns 5), otherwise returns the raw abort code containing encoded error information.
	"""
	abortCode: BigInt
	"""
	The source line number for the abort. Only populated for clever errors.
	"""
	sourceLineNumber: Int
	"""
	The instruction offset in the Move bytecode where the error occurred. Populated for Move aborts and primitive runtime errors.
	"""
	instructionOffset: Int
	"""
	The error's name. Only populated for clever errors.
	"""
	identifier: String
	"""
	An associated constant for the error. Only populated for clever errors.
	
	Constants are returned as human-readable strings when possible. Complex types are returned as Base64-encoded bytes.
	"""
	constant: String
}

"""
The execution status of this transaction: success or failure.
"""
enum ExecutionStatus {
	"""
	The transaction was successfully executed.
	"""
	SUCCESS
	"""
	The transaction could not be executed.
	"""
	FAILURE
}

"""
A boolean protocol configuration.
"""
type FeatureFlag {
	"""
	Feature flag name.
	"""
	key: String!
	"""
	Feature flag value.
	"""
	value: Boolean!
}


"""
Summary of charges from transactions.

Storage is charged in three parts -- `storage_cost`, `-storage_rebate`, and `non_refundable_storage_fee` -- independently of `computation_cost`.

The overall cost of a transaction, deducted from its gas coins, is its `computation_cost + storage_cost - storage_rebate`. `non_refundable_storage_fee` is collected from objects being mutated or deleted and accumulated by the system in storage funds, the remaining storage costs of previous object versions are what become the `storage_rebate`. The ratio between `non_refundable_storage_fee` and `storage_rebate` is set by the protocol.
"""
type GasCostSummary {
	"""
	The sum cost of computation/execution
	"""
	computationCost: UInt53
	"""
	Cost for storage at the time the transaction is executed, calculated as the size of the objects being mutated in bytes multiplied by a storage cost per byte (part of the protocol).
	"""
	storageCost: UInt53
	"""
	Amount the user gets back from the storage cost of the previous versions of objects being mutated or deleted.
	"""
	storageRebate: UInt53
	"""
	Amount that is retained by the system in the storage fund from the cost of the previous versions of objects being mutated or deleted.
	"""
	nonRefundableStorageFee: UInt53
}

"""
Effects related to gas (costs incurred and the identity of the smashed gas object returned).
"""
type GasEffects {
	"""
	The gas object used to pay for this transaction. If multiple gas coins were provided, this represents the combined coin after smashing.
	"""
	gasObject: Object
	"""
	Breakdown of the gas costs for this transaction.
	"""
	gasSummary: GasCostSummary
}

type GasInput {
	"""
	Address of the owner of the gas object(s) used.
	"""
	gasSponsor: Address
	"""
	An unsigned integer specifying the number of native tokens per gas unit this transaction will pay (in MIST).
	"""
	gasPrice: BigInt
	"""
	The maximum SUI that can be expended by executing this transaction
	"""
	gasBudget: BigInt
	"""
	Objects used to pay for a transaction's execution and storage
	"""
	gasPayment(first: Int, after: String, last: Int, before: String): ObjectConnection
}

"""
System transaction that initializes the network and writes the initial set of objects on-chain.
"""
type GenesisTransaction {
	"""
	Objects to be created during genesis.
	"""
	objects(first: Int, after: String, last: Int, before: String): ObjectConnection
}

"""
Interface implemented by GraphQL types representing entities that are identified by an address.

An address uniquely represents either the public key of an account, or an object's ID, but never both. It is not possible to determine which type an address represents up-front. If an object is wrapped, its contents will not be accessible via its address, but it will still be possible to access other objects it owns.
"""
interface IAddressable {
	address: SuiAddress!
}


"""
Interface implemented by versioned on-chain values that are addressable by an ID (also referred to as its address). This includes Move objects and packages.
"""
interface IObject {
	"""
	The version of this object that this content comes from.
	"""
	version: UInt53!
	"""
	32-byte hash that identifies the object's contents, encoded in Base58.
	"""
	digest: String!
	"""
	Fetch the object with the same ID, at a different version, root version bound, or checkpoint.
	"""
	objectAt(version: UInt53, rootVersion: UInt53, checkpoint: UInt53): Object
	"""
	The Base64-encoded BCS serialization of this object, as an `Object`.
	"""
	objectBcs: Base64
	"""
	Paginate all versions of this object after this one.
	"""
	objectVersionsAfter(first: Int, after: String, last: Int, before: String, filter: VersionFilter): ObjectConnection
	"""
	Paginate all versions of this object before this one.
	"""
	objectVersionsBefore(first: Int, after: String, last: Int, before: String, filter: VersionFilter): ObjectConnection
	"""
	The transaction that created this version of the object
	"""
	previousTransaction: Transaction
}


"""
A MovePackage is a kind of Object that represents code that has been published on-chain. It exposes information about its modules, type definitions, functions, and dependencies.
"""
type MovePackage implements IAddressable & IObject {
	"""
	The MovePackage's ID.
	"""
	address: SuiAddress!
	"""
	The version of this package that this content comes from.
	"""
	version: UInt53!
	"""
	32-byte hash that identifies the package's contents, encoded in Base58.
	"""
	digest: String!
	"""
	Fetch the package as an object with the same ID, at a different version, root version bound, or checkpoint.
	
	If no additional bound is provided, the latest version of this object is fetched at the latest checkpoint.
	"""
	objectAt(version: UInt53, rootVersion: UInt53, checkpoint: UInt53): Object
	"""
	The Base64-encoded BCS serialization of this package, as an `Object`.
	"""
	objectBcs: Base64
	"""
	Paginate all versions of this package treated as an object, after this one.
	"""
	objectVersionsAfter(first: Int, after: String, last: Int, before: String, filter: VersionFilter): ObjectConnection!
	"""
	Paginate all versions of this package treated as an object, before this one.
	"""
	objectVersionsBefore(first: Int, after: String, last: Int, before: String, filter: VersionFilter): ObjectConnection!
	"""
	Fetch the package with the same original ID, at a different version, root version bound, or checkpoint.
	
	If no additional bound is provided, the latest version of this package is fetched at the latest checkpoint.
	"""
	packageAt(version: UInt53, checkpoint: UInt53): MovePackage
	"""
	The Base64-encoded BCS serialization of this package, as a `MovePackage`.
	"""
	packageBcs: Base64
	"""
	Paginate all versions of this package after this one.
	"""
	packageVersionsAfter(first: Int, after: String, last: Int, before: String, filter: VersionFilter): MovePackageConnection!
	"""
	Paginate all versions of this package before this one.
	"""
	packageVersionsBefore(first: Int, after: String, last: Int, before: String, filter: VersionFilter): MovePackageConnection!
	"""
	The transaction that created this version of the object.
	"""
	previousTransaction: Transaction
}

type MovePackageConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [MovePackageEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [MovePackage!]!
}

"""
An edge in a connection.
"""
type MovePackageEdge {
	"""
	The item at the end of the edge
	"""
	node: MovePackage!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

"""
A transaction that wanted to mutate a consensus-managed object but couldn't because it became not-consensus-managed before the transaction executed (for example, it was deleted, turned into an owned object, or wrapped).
"""
type MutateConsensusStreamEnded {
	"""
	The ID of the consensus-managed object.
	"""
	address: SuiAddress
	"""
	The sequence number associated with the consensus stream ending.
	"""
	sequenceNumber: UInt53
}

"""
An Object on Sui is either a typed value (a Move Object) or a Package (modules containing functions and types).

Every object on Sui is identified by a unique address, and has a version number that increases with every modification. Objects also hold metadata detailing their current owner (who can sign for access to the object and whether that access can modify and/or delete the object), and the digest of the last transaction that modified the object.
"""
type Object implements IAddressable & IObject {
	"""
	The Object's ID.
	"""
	address: SuiAddress!
	"""
	The version of this object that this content comes from.
	"""
	version: UInt53!
	"""
	32-byte hash that identifies the object's contents, encoded in Base58.
	"""
	digest: String!
	"""
	Attempts to convert the object into a MovePackage.
	"""
	asMovePackage: MovePackage
	"""
	Fetch the object with the same ID, at a different version, root version bound, or checkpoint.
	
	If no additional bound is provided, the latest version of this object is fetched at the latest checkpoint.
	"""
	objectAt(version: UInt53, rootVersion: UInt53, checkpoint: UInt53): Object
	"""
	The Base64-encoded BCS serialization of this object, as an `Object`.
	"""
	objectBcs: Base64
	"""
	Paginate all versions of this object after this one.
	"""
	objectVersionsAfter(first: Int, after: String, last: Int, before: String, filter: VersionFilter): ObjectConnection!
	"""
	Paginate all versions of this object before this one.
	"""
	objectVersionsBefore(first: Int, after: String, last: Int, before: String, filter: VersionFilter): ObjectConnection!
	"""
	The transaction that created this version of the object.
	"""
	previousTransaction: Transaction
}

type ObjectChange {
	"""
	The address of the object that has changed.
	"""
	address: SuiAddress!
	"""
	The contents of the object immediately before the transaction.
	"""
	inputState: Object
	"""
	The contents of the object immediately after the transaction.
	"""
	outputState: Object
	"""
	Whether the ID was created in this transaction.
	"""
	idCreated: Boolean
	"""
	Whether the ID was deleted in this transaction.
	"""
	idDeleted: Boolean
}

type ObjectChangeConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ObjectChangeEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [ObjectChange!]!
}

"""
An edge in a connection.
"""
type ObjectChangeEdge {
	"""
	The item at the end of the edge
	"""
	node: ObjectChange!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type ObjectConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ObjectEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Object!]!
}

"""
An edge in a connection.
"""
type ObjectEdge {
	"""
	The item at the end of the edge
	"""
	node: Object!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

"""
Identifies a specific version of an object.

The `address` field must be specified, as well as at most one of `version`, `rootVersion`, or `atCheckpoint`. If none are provided, the object is fetched at the current checkpoint.

See `Query.object` for more details.
"""
input ObjectKey {
	"""
	The object's ID.
	"""
	address: SuiAddress!
	"""
	If specified, tries to fetch the object at this exact version.
	"""
	version: UInt53
	"""
	If specified, tries to fetch the latest version of the object at or before this version.
	
	This can be used to fetch a child or ancestor object bounded by its root object's version. For any wrapped or child (object-owned) object, its root object can be defined recursively as:
	
	- The root object of the object it is wrapped in, if it is wrapped.
	- The root object of its owner, if it is owned by another object.
	- The object itself, if it is not object-owned or wrapped.
	"""
	rootVersion: UInt53
	"""
	If specified, tries to fetch the latest version as of this checkpoint. Fails if the checkpoint is later than the RPC's latest checkpoint.
	"""
	atCheckpoint: UInt53
}

"""
Identifies a specific version of a package.

The `address` field must be specified, as well as at most one of `version`, or `atCheckpoint`. If neither is provided, the package is fetched at the current checkpoint.

See `Query.package` for more details.
"""
input PackageKey {
	"""
	The object's ID.
	"""
	address: SuiAddress!
	"""
	If specified, tries to fetch the package at this exact version.
	"""
	version: UInt53
	"""
	If specified, tries to fetch the latest version as of this checkpoint.
	"""
	atCheckpoint: UInt53
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type PerEpochConfig {
	"""
	The per-epoch configuration object as of the checkpoint when the transaction was executed.
	"""
	object: Object
}

"""
A protocol configuration that can hold an arbitrary value (or no value at all).
"""
type ProtocolConfig {
	"""
	Configuration name.
	"""
	key: String!
	"""
	Configuration value.
	"""
	value: String
}

"""
Constants that control how the chain operates.

These can only change during protocol upgrades which happen on epoch boundaries. Configuration is split into feature flags (which are just booleans), and configs which can take any value (including no value at all), and will be represented by a string.
"""
type ProtocolConfigs {
	protocolVersion: UInt53!
	"""
	Query for the value of the configuration with name `key`.
	"""
	config(key: String!): ProtocolConfig
	"""
	List all available configurations and their values.
	"""
	configs: [ProtocolConfig!]!
	"""
	Query for the state of the feature flag with name `key`.
	"""
	featureFlag(key: String!): FeatureFlag
	"""
	List all available feature flags and their values.
	"""
	featureFlags: [FeatureFlag!]!
}

type Query {
	"""
	Look-up an account by its SuiAddress.
	"""
	address(address: SuiAddress!): Address!
	"""
	First four bytes of the network's genesis checkpoint digest (uniquely identifies the network), hex-encoded.
	"""
	chainIdentifier: String!
	"""
	Fetch a checkpoint by its sequence number, or the latest checkpoint if no sequence number is provided.
	
	Returns `null` if the checkpoint does not exist in the store, either because it never existed or because it was pruned.
	"""
	checkpoint(sequenceNumber: UInt53): Checkpoint
	"""
	Fetch an epoch by its ID, or fetch the latest epoch if no ID is provided.
	
	Returns `null` if the epoch does not exist yet, or was pruned.
	"""
	epoch(epochId: UInt53): Epoch
	"""
	Fetch checkpoints by their sequence numbers.
	
	Returns a list of checkpoints that is guaranteed to be the same length as `keys`. If a checkpoint in `keys` could not be found in the store, its corresponding entry in the result will be `null`. This could be because the checkpoint does not exist yet, or because it was pruned.
	"""
	multiGetCheckpoints(keys: [UInt53!]!): [Checkpoint]!
	"""
	Fetch epochs by their IDs.
	
	Returns a list of epochs that is guaranteed to be the same length as `keys`. If an epoch in `keys` could not be found in the store, its corresponding entry in the result will be `null`. This could be because the epoch does not exist yet, or because it was pruned.
	"""
	multiGetEpochs(keys: [UInt53!]!): [Epoch]!
	"""
	Fetch objects by their keys.
	
	Returns a list of objects that is guaranteed to be the same length as `keys`. If an object in `keys` could not be found in the store, its corresponding entry in the result will be `null`. This could be because the object never existed, or because it was pruned.
	"""
	multiGetObjects(keys: [ObjectKey!]!): [Object]!
	"""
	Fetch packages by their keys.
	
	Returns a list of packages that is guaranteed to be the same length as `keys`. If a package in `keys` could not be found in the store, its corresponding entry in the result will be `null`. This could be because that address never pointed to a package, or because the package was pruned.
	"""
	multiGetPackages(keys: [PackageKey!]!): [MovePackage]!
	"""
	Fetch transactions by their digests.
	
	Returns a list of transactions that is guaranteed to be the same length as `keys`. If a digest in `keys` could not be found in the store, its corresponding entry in the result will be `null`. This could be because the transaction never existed, or because it was pruned.
	"""
	multiGetTransactions(keys: [String!]!): [Transaction]!
	"""
	Fetch transaction effects by their transactions' digests.
	
	Returns a list of transaction effects that is guaranteed to be the same length as `keys`. If a digest in `keys` could not be found in the store, its corresponding entry in the result will be `null`. This could be because the transaction effects never existed, or because it was pruned.
	"""
	multiGetTransactionEffects(keys: [String!]!): [TransactionEffects]!
	"""
	Fetch an object by its address.
	
	If `version` is specified, the object will be fetched at that exact version.
	
	If `rootVersion` is specified, the object will be fetched at the latest version at or before this version. This can be used to fetch a child or ancestor object bounded by its root object's version. For any wrapped or child (object-owned) object, its root object can be defined recursively as:
	
	- The root object of the object it is wrapped in, if it is wrapped.
	- The root object of its owner, if it is owned by another object.
	- The object itself, if it is not object-owned or wrapped.
	
	If `atCheckpoint` is specified, the object will be fetched at the latest version as of this checkpoint. This will fail if the provided checkpoint is after the RPC's latest checkpoint.
	
	If none of the above are specified, the object is fetched at the latest checkpoint.
	
	It is an error to specify more than one of `version`, `rootVersion`, or `atCheckpoint`.
	
	Returns `null` if an object cannot be found that meets this criteria.
	"""
	object(address: SuiAddress!, version: UInt53, rootVersion: UInt53, atCheckpoint: UInt53): Object
	"""
	Paginate all versions of an object at `address`, optionally bounding the versions exclusively from below with `filter.afterVersion` or from above with `filter.beforeVersion`.
	"""
	objectVersions(first: Int, after: String, last: Int, before: String, address: SuiAddress!, filter: VersionFilter): ObjectConnection
	"""
	Fetch a package by its address.
	
	If `version` is specified, the package loaded is the one that shares its original ID with the package at `address`, but whose version is `version`.
	
	If `atCheckpoint` is specified, the package loaded is the one with the largest version among all packages sharing an original ID with the package at `address` and was published at or before `atCheckpoint`.
	
	If neither are specified, the package is fetched at the latest checkpoint.
	
	It is an error to specify both `version` and `atCheckpoint`, and `null` will be returned if the package cannot be found as of the latest checkpoint, or the address points to an object that is not a package.
	
	Note that this interpretation of `version` and "latest" differs from the one used by `Query.object`, because non-system package upgrades generate objects with different IDs. To fetch a package using the versioning semantics of objects, use `Object.asMovePackage` nested under `Query.object`.
	"""
	package(address: SuiAddress!, version: UInt53, atCheckpoint: UInt53): MovePackage
	"""
	Paginate all packages published on-chain, optionally bounded to packages published strictly after `filter.afterCheckpoint` and/or strictly before `filter.beforeCheckpoint`.
	"""
	packages(first: Int, after: String, last: Int, before: String, filter: CheckpointFilter): MovePackageConnection
	"""
	Paginate all versions of a package at `address`, optionally bounding the versions exclusively from below with `filter.afterVersion` or from above with `filter.beforeVersion`.
	
	Different versions of a package will have different object IDs, unless they are system packages, but will share the same original ID.
	"""
	packageVersions(first: Int, after: String, last: Int, before: String, address: SuiAddress!, filter: VersionFilter): MovePackageConnection
	"""
	Fetch the protocol config by protocol version, or the latest protocol config used on chain if no version is provided.
	"""
	protocolConfigs(version: UInt53): ProtocolConfigs
	"""
	Configuration for this RPC service.
	"""
	serviceConfig: ServiceConfig!
	"""
	Fetch a transaction by its digest.
	
	Returns `null` if the transaction does not exist in the store, either because it never existed or because it was pruned.
	"""
	transaction(digest: String!): Transaction
	"""
	Fetch transaction effects by its transaction's digest.
	
	Returns `null` if the transaction effects do not exist in the store, either because that transaction was not executed, or it was pruned.
	"""
	transactionEffects(digest: String!): TransactionEffects
	"""
	The transactions that exist in the network, optionally filtered by transaction filters.
	"""
	transactions(first: Int, after: String, last: Int, before: String, filter: TransactionFilter): TransactionConnection!
}

"""
System transaction for creating the on-chain randomness state.
"""
type RandomnessStateCreateTransaction {
	"""
	A workaround to define an empty variant of a GraphQL union.
	"""
	_: Boolean
}

"""
System transaction to update the source of on-chain randomness.
"""
type RandomnessStateUpdateTransaction {
	"""
	Epoch of the randomness state update transaction.
	"""
	epoch: Int
	"""
	Randomness round of the update.
	"""
	randomnessRound: Int
	"""
	Updated random bytes, Base64 encoded.
	"""
	randomBytes: Base64
	"""
	The initial version of the randomness object that it was shared at.
	"""
	randomnessObjInitialSharedVersion: Int
}

"""
A transaction that wanted to read a consensus-managed object but couldn't because it became not-consensus-managed before the transaction executed (for example, it was deleted, turned into an owned object, or wrapped).
"""
type ReadConsensusStreamEnded {
	"""
	The ID of the consensus-managed object.
	"""
	address: SuiAddress
	"""
	The sequence number associated with the consensus stream ending.
	"""
	sequenceNumber: UInt53
}

type SafeMode {
	"""
	Whether safe mode was used for the last epoch change.
	The system will retry a full epoch change on every epoch boundary and automatically reset this flag if so.
	"""
	enabled: Boolean
	"""
	Accumulated fees for computation and cost that have not been added to the various reward pools, because the full epoch change did not happen.
	"""
	gasSummary: GasCostSummary
}

type ServiceConfig {
	"""
	Maximum time in milliseconds spent waiting for a response from fullnode after issuing a transaction to execute. Note that the transaction may still succeed even in the case of a timeout. Transactions are idempotent, so a transaction that times out should be re-submitted until the network returns a definite response (success or failure, not timeout).
	"""
	mutationTimeoutMs: Int
	"""
	Maximum time in milliseconds that will be spent to serve one query request.
	"""
	queryTimeoutMs: Int
	"""
	Maximum depth of a GraphQL query that can be accepted by this service.
	"""
	maxQueryDepth: Int
	"""
	The maximum number of nodes (field names) the service will accept in a single query.
	"""
	maxQueryNodes: Int
	"""
	Maximum number of estimated output nodes in a GraphQL response.
	
	The estimate is an upperbound of how many nodes there would be in the output assuming every requested field is present, paginated requests return full page sizes, and multi-get queries find all requested keys. Below is a worked example query:
	
	```graphql
	|  0: query {                            # 514 = total
	|  1:   checkpoint {                     # 1
	|  2:     sequenceNumber                 # 1
	|  3:   }
	|  4:
	|  5:   multiGetObjects([$a, $b, $c]) {  # 1 (* 3)
	|  6:     address                        # 3
	|  7:     digest                         # 3
	|  8:   }
	|  9:
	| 10:   # default page size is 20
	| 11:   transactions {                   # 1 (* 20)
	| 12:     pageInfo {                     # 1
	| 13:       hasNextPage                  # 1
	| 14:       endCursor                    # 1
	| 15:     }
	| 16:
	| 17:     nodes                          # 1
	| 18:     {                              # 20
	| 19:       digest                       # 20
	| 20:       effects {                    # 20
	| 21:         objectChanges(first: 10) { # 20 (* 10)
	| 22:           nodes                    # 20
	| 23:           {                        # 200
	| 24:             address                # 200
	| 25:           }
	| 26:         }
	| 27:       }
	| 28:     }
	| 29:   }
	| 30: }
	```
	"""
	maxOutputNodes: Int
	"""
	Maximum size in bytes allowed for the `txBytes` and `signatures` parameters of an `executeTransaction` or `simulateTransaction` field, or the `bytes` and `signature` parameters of a `verifyZkLoginSignature` field.
	
	This is cumulative across all matching fields in a single GraphQL request.
	"""
	maxTransactionPayloadSize: Int
	"""
	Maximum size in bytes of a single GraphQL request, excluding the elements covered by `maxTransactionPayloadSize`.
	"""
	maxQueryPayloadSize: Int
	"""
	Number of elements a paginated connection will return if a page size is not supplied.
	
	Accepts `type` and `field` arguments which identify the connection that is being queried. If the field in question is paginated, its default page size is returned. If it does not exist or is not paginated, `null` is returned.
	"""
	defaultPageSize(type: String!, field: String!): Int
	"""
	Maximum number of elements that can be requested from a paginated connection. A request to fetch more elements will result in an error.
	
	Accepts `type` and `field` arguments which identify the connection that is being queried. If the field in question is paginated, its max page size is returned. If it does not exist or is not paginated, `null` is returned.
	"""
	maxPageSize(type: String!, field: String!): Int
	"""
	Maximum number of elements that can be requested from a multi-get query. A request to fetch more keys will result in an error.
	"""
	maxMultiGetSize: Int
	"""
	Maximum amount of nesting among type arguments (type arguments nest when a type argument is itself generic and has arguments).
	"""
	maxTypeArgumentDepth: Int
	"""
	Maximum number of type parameters a type can have.
	"""
	maxTypeArgumentWidth: Int
	"""
	Maximum number of datatypes that need to be processed when calculating the layout of a single type.
	"""
	maxTypeNodes: Int
	"""
	Maximum nesting allowed in datatype fields when calculating the layout of a single type.
	"""
	maxMoveValueDepth: Int
}

"""
Parameters that control the distribution of the stake subsidy.
"""
type StakeSubsidy {
	"""
	SUI set aside for stake subsidies -- reduces over time as stake subsidies are paid out over time.
	"""
	balance: BigInt
	"""
	Number of times stake subsidies have been distributed.
	Subsidies are distributed with other staking rewards, at the end of the epoch.
	"""
	distributionCounter: Int
	"""
	Amount of stake subsidy deducted from the balance per distribution -- decays over time.
	"""
	currentDistributionAmount: BigInt
	"""
	Maximum number of stake subsidy distributions that occur with the same distribution amount (before the amount is reduced).
	"""
	periodLength: Int
	"""
	Percentage of the current distribution amount to deduct at the end of the current subsidy period, expressed in basis points.
	"""
	decreaseRate: Int
}

"""
SUI set aside to account for objects stored on-chain.
"""
type StorageFund {
	"""
	Sum of storage rebates of live objects on chain.
	"""
	totalObjectStorageRebates: BigInt
	"""
	The portion of the storage fund that will never be refunded through storage rebates.
	The system maintains an invariant that the sum of all storage fees into the storage fund is equal to the sum of all storage rebates out, the total storage rebates remaining, and the non-refundable balance.
	"""
	nonRefundableBalance: BigInt
}

"""
System transaction for storing execution time observations.
"""
type StoreExecutionTimeObservationsTransaction {
	"""
	A workaround to define an empty variant of a GraphQL union.
	"""
	_: Boolean
}


"""
String containing 32 byte hex-encoded address, with a leading '0x'. Leading zeroes can be omitted on input but will always appear in outputs (SuiAddress in output is guaranteed to be 66 characters long).
"""
scalar SuiAddress

"""
Details of the system that are decided during genesis.
"""
type SystemParameters {
	"""
	Target duration of an epoch, in milliseconds.
	"""
	durationMs: BigInt
	"""
	The epoch at which stake subsidies start being paid out.
	"""
	stakeSubsidyStartEpoch: UInt53
	"""
	The minimum number of active validators that the system supports.
	"""
	minValidatorCount: Int
	"""
	The maximum number of active validators that the system supports.
	"""
	maxValidatorCount: Int
	"""
	Minimum stake needed to become a new validator.
	"""
	minValidatorJoiningStake: BigInt
	"""
	Validators with stake below this threshold will enter the grace period (see `validatorLowStakeGracePeriod`), after which they are removed from the active validator set.
	"""
	validatorLowStakeThreshold: BigInt
	"""
	Validators with stake below this threshold will be removed from the active validator set at the next epoch boundary, without a grace period.
	"""
	validatorVeryLowStakeThreshold: BigInt
	"""
	The number of epochs that a validator has to recover from having less than `validatorLowStakeThreshold` stake.
	"""
	validatorLowStakeGracePeriod: BigInt
}

"""
Description of a transaction, the unit of activity on Sui.
"""
type Transaction {
	"""
	A 32-byte hash that uniquely identifies the transaction contents, encoded in Base58.
	"""
	digest: String!
	"""
	The results to the chain of executing this transaction.
	"""
	effects: TransactionEffects
	"""
	The type of this transaction as well as the commands and/or parameters comprising the transaction of this kind.
	"""
	kind: TransactionKind
	"""
	This field is set by senders of a transaction block. It is an epoch reference that sets a deadline after which validators will no longer consider the transaction valid. By default, there is no deadline for when a transaction must execute.
	"""
	expiration: Epoch
	"""
	The gas input field provides information on what objects were used as gas as well as the owner of the gas object(s) and information on the gas price and budget.
	"""
	gasInput: GasInput
	"""
	The address corresponding to the public key that signed this transaction. System transactions do not have senders.
	"""
	sender: Address
	"""
	The Base64-encoded BCS serialization of this transaction, as a `TransactionData`.
	"""
	transactionBcs: Base64
	"""
	User signatures for this transaction.
	"""
	signatures: [UserSignature!]!
}

type TransactionConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [TransactionEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Transaction!]!
}

"""
An edge in a connection.
"""
type TransactionEdge {
	"""
	The item at the end of the edge
	"""
	node: Transaction!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

"""
The results of executing a transaction.
"""
type TransactionEffects {
	"""
	A 32-byte hash that uniquely identifies the transaction contents, encoded in Base58.
	
	Note that this is different from the execution digest, which is the unique hash of the transaction effects.
	"""
	digest: String!
	"""
	The transaction that ran to produce these effects.
	"""
	transaction: Transaction
	"""
	The checkpoint this transaction was finalized in.
	"""
	checkpoint: Checkpoint
	"""
	Whether the transaction executed successfully or not.
	"""
	status: ExecutionStatus
	"""
	The latest version of all objects (apart from packages) that have been created or modified by this transaction, immediately following this transaction.
	"""
	lamportVersion: UInt53
	"""
	Rich execution error information for failed transactions.
	"""
	executionError: ExecutionError
	"""
	Timestamp corresponding to the checkpoint this transaction was finalized in.
	"""
	timestamp: DateTime
	"""
	The epoch this transaction was finalized in.
	"""
	epoch: Epoch
	"""
	Events emitted by this transaction.
	"""
	events(first: Int, after: String, last: Int, before: String): EventConnection
	"""
	The effect this transaction had on the balances (sum of coin values per coin type) of addresses and objects.
	"""
	balanceChanges(first: Int, after: String, last: Int, before: String): BalanceChangeConnection
	"""
	The Base64-encoded BCS serialization of these effects, as `TransactionEffects`.
	"""
	effectsBcs: Base64
	"""
	A 32-byte hash that uniquely identifies the effects contents, encoded in Base58.
	"""
	effectsDigest: String
	"""
	The before and after state of objects that were modified by this transaction.
	"""
	objectChanges(first: Int, after: String, last: Int, before: String): ObjectChangeConnection
	"""
	Effects related to the gas object used for the transaction (costs incurred and the identity of the smashed gas object returned).
	"""
	gasEffects: GasEffects
	"""
	The unchanged consensus-managed objects that were referenced by this transaction.
	"""
	unchangedConsensusObjects(first: Int, after: String, last: Int, before: String): UnchangedConsensusObjectConnection
}

input TransactionFilter {
	"""
	Limit to transactions that occured strictly after the given checkpoint.
	"""
	afterCheckpoint: UInt53
	"""
	Limit to transactions in the given checkpoint.
	"""
	atCheckpoint: UInt53
	"""
	Limit to transaction that occured strictly before the given checkpoint.
	"""
	beforeCheckpoint: UInt53
}

"""
Different types of transactions that can be executed on the Sui network.
"""
union TransactionKind = GenesisTransaction | ConsensusCommitPrologueTransaction | ChangeEpochTransaction | RandomnessStateUpdateTransaction | AuthenticatorStateUpdateTransaction | EndOfEpochTransaction

"""
An unsigned integer that can hold values up to 2^53 - 1. This can be treated similarly to `Int`, but it is guaranteed to be non-negative, and it may be larger than 2^32 - 1.
"""
scalar UInt53

"""
Details pertaining to consensus-managed objects that are referenced by but not changed by a transaction.
"""
union UnchangedConsensusObject = ConsensusObjectRead | MutateConsensusStreamEnded | ReadConsensusStreamEnded | ConsensusObjectCancelled | PerEpochConfig

type UnchangedConsensusObjectConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [UnchangedConsensusObjectEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [UnchangedConsensusObject!]!
}

"""
An edge in a connection.
"""
type UnchangedConsensusObjectEdge {
	"""
	The item at the end of the edge
	"""
	node: UnchangedConsensusObject!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type UserSignature {
	"""
	The signature bytes, Base64-encoded.
	For simple signatures: flag || signature || pubkey
	For complex signatures: flag || bcs_serialized_struct
	"""
	signatureBytes: Base64
}

type ValidatorAggregatedSignature {
	"""
	The epoch when this aggregate signature was produced.
	"""
	epoch: Epoch
	"""
	The Base64 encoded BLS12381 aggregated signature.
	"""
	signature: Base64
	"""
	The indexes of validators that contributed to this signature.
	"""
	signersMap: [Int!]!
}

"""
Representation of `0x3::validator_set::ValidatorSet`.
"""
type ValidatorSet {
	"""
	Total amount of stake for all active validators at the beginning of the epoch.
	"""
	totalStake: BigInt
	"""
	Validators that are pending removal from the active validator set, expressed as indices in
	to `activeValidators`.
	"""
	pendingRemovals: [Int!]
	"""
	Object ID of the wrapped object `TableVec` storing the pending active validators.
	"""
	pendingActiveValidatorsId: SuiAddress
	"""
	Size of the pending active validators table.
	"""
	pendingActiveValidatorsSize: Int
	"""
	Object ID of the `Table` storing the mapping from staking pool ids to the addresses
	of the corresponding validators. This is needed because a validator's address
	can potentially change but the object ID of its pool will not.
	"""
	stakingPoolMappingsId: SuiAddress
	"""
	Size of the stake pool mappings `Table`.
	"""
	stakingPoolMappingsSize: Int
	"""
	Object ID of the `Table` storing the inactive staking pools.
	"""
	inactivePoolsId: SuiAddress
	"""
	Size of the inactive pools `Table`.
	"""
	inactivePoolsSize: Int
	"""
	Object ID of the `Table` storing the validator candidates.
	"""
	validatorCandidatesId: SuiAddress
	"""
	Size of the validator candidates `Table`.
	"""
	validatorCandidatesSize: Int
}

"""
Filter for paginating the history of an Object or MovePackage.
"""
input VersionFilter {
	"""
	Filter to versions that are strictly newer than this one, defaults to fetching from the earliest version known to this RPC (this could be the initial version, or some later version if the initial version has been pruned).
	"""
	afterVersion: UInt53
	"""
	Filter to versions that are strictly older than this one, defaults to fetching up to the latest version (inclusive).
	"""
	beforeVersion: UInt53
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
}
