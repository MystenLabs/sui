syntax = "proto3";

package sui.rest;

// Sui `TransactionData` type serialized as Bcs
message Transaction {
    bytes transaction = 1;
}

// Sui `TransactionEffects` type serialized as Bcs
message TransactionEffects {
    bytes effects = 1;
}

// Sui `TransactionEvents` type serialized as Bcs
message TransactionEvents {
    bytes events = 1;
}

// Sui `Object` type serialized as Bcs
message Object {
    bytes object = 1;
}

// Sui `CheckpointSummary` type serialized as Bcs
message CheckpointSummary {
    bytes summary = 1;
}

// Sui `CheckpointContents` type serialized as Bcs
message CheckpointContents {
    bytes contents = 1;
}

// Sui `UserSignature` type serialized as bytes
message UserSignature {
    bytes signature = 1;
}

// Sui `ValidatorAggregatedSignature` type serialized as Bcs
message ValidatorAggregatedSignature {
    bytes signature = 1;
}

message GetTransactionResponse {
    // The digest of this transaction
    bytes digest = 1;
    optional Transaction transaction = 2;
    repeated UserSignature signatures = 3;
    optional TransactionEffects effects = 4;
    optional TransactionEvents events = 5;
    optional uint64 checkpoint = 6;
    optional uint64 timestamp_ms = 7;
}

message GetObjectResponse {
    // The digest of this object
    bytes digest = 1;
    optional Object object = 2;
}

message GetCheckpointResponse {
    // The digest of this CheckpointSummary
    bytes digest = 1;
    optional CheckpointSummary summary = 2;
    optional ValidatorAggregatedSignature signature = 3;
    optional CheckpointContents contents = 4;
}

message FullCheckpoint {
    optional CheckpointSummary summary = 1;
    optional ValidatorAggregatedSignature signature = 2;
    optional CheckpointContents contents = 3;
    repeated CheckpointTransaction transactions = 4;
}

message CheckpointTransaction {
    optional Transaction transaction = 1;
    repeated UserSignature signatures = 2;
    optional TransactionEffects effects = 3;
    optional TransactionEvents events = 4;
    repeated Object input_objects = 5;
    repeated Object output_objects = 6;
}

message ListCheckpointResponse {
    repeated GetCheckpointResponse checkpoints = 1;
}

message ListTransactionsResponse {
    repeated GetTransactionResponse transactions = 1;
}

message Address {
    bytes address = 1;
}

message TypeTag {
    string type_tag = 1;
}

message I128 {
    bytes little_endian_bytes = 1;
}

message BalanceChange {
    Address address = 1;
    TypeTag coin_type = 2;
    I128 amount = 3;
}

message EffectsFinality {
    optional ValidatorAggregatedSignature signature = 1;
    optional uint64 checkpoint = 2;
    optional bool quorum_executed = 3;
}

message TransactionExecutionResponse {
    optional TransactionEffects effects = 1;
    optional EffectsFinality finality = 2;
    optional TransactionEvents events = 3;
    repeated BalanceChange balance_changes = 4;
    repeated Object input_objects = 5;
    repeated Object output_objects = 6;
}

message TransactionSimulationResponse {
    optional TransactionEffects effects = 1;
    optional TransactionEvents events = 2;
    repeated BalanceChange balance_changes = 3;
    repeated Object input_objects = 4;
    repeated Object output_objects = 5;
}

message ResolveTransactionResponse {
    optional Transaction transaction = 1;
    optional TransactionSimulationResponse simulation = 2;
}

message ExecuteTransactionRequest {
    optional Transaction transaction = 1;
    repeated UserSignature signatures = 2;
}

message SimulateTransactionRequest {
    optional Transaction transaction = 1;
}

message ValidatorCommittee {
    uint64 epoch = 1;
    repeated ValidatorCommitteeMember members = 2;
}

message ValidatorCommitteeMember {
    bytes public_key = 1;
    uint64 stake = 2;
}
