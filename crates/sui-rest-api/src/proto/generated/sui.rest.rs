// This file is @generated by prost-build.
/// Sui `TransactionData` type serialized as Bcs
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes = "bytes", tag = "1")]
    pub transaction: ::prost::bytes::Bytes,
}
/// Sui `TransactionEffects` type serialized as Bcs
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionEffects {
    #[prost(bytes = "bytes", tag = "1")]
    pub effects: ::prost::bytes::Bytes,
}
/// Sui `TransactionEvents` type serialized as Bcs
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionEvents {
    #[prost(bytes = "bytes", tag = "1")]
    pub events: ::prost::bytes::Bytes,
}
/// Sui `Object` type serialized as Bcs
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Object {
    #[prost(bytes = "bytes", tag = "1")]
    pub object: ::prost::bytes::Bytes,
}
/// Sui `CheckpointSummary` type serialized as Bcs
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckpointSummary {
    #[prost(bytes = "bytes", tag = "1")]
    pub summary: ::prost::bytes::Bytes,
}
/// Sui `CheckpointContents` type serialized as Bcs
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckpointContents {
    #[prost(bytes = "bytes", tag = "1")]
    pub contents: ::prost::bytes::Bytes,
}
/// Sui `UserSignature` type serialized as bytes
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserSignature {
    #[prost(bytes = "bytes", tag = "1")]
    pub signature: ::prost::bytes::Bytes,
}
/// Sui `ValidatorAggregatedSignature` type serialized as Bcs
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorAggregatedSignature {
    #[prost(bytes = "bytes", tag = "1")]
    pub signature: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTransactionResponse {
    /// The digest of this transaction
    #[prost(bytes = "bytes", tag = "1")]
    pub digest: ::prost::bytes::Bytes,
    #[prost(message, optional, tag = "2")]
    pub transaction: ::core::option::Option<Transaction>,
    #[prost(message, repeated, tag = "3")]
    pub signatures: ::prost::alloc::vec::Vec<UserSignature>,
    #[prost(message, optional, tag = "4")]
    pub effects: ::core::option::Option<TransactionEffects>,
    #[prost(message, optional, tag = "5")]
    pub events: ::core::option::Option<TransactionEvents>,
    #[prost(uint64, optional, tag = "6")]
    pub checkpoint: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub timestamp_ms: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetObjectResponse {
    /// The digest of this object
    #[prost(bytes = "bytes", tag = "1")]
    pub digest: ::prost::bytes::Bytes,
    #[prost(message, optional, tag = "2")]
    pub object: ::core::option::Option<Object>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCheckpointResponse {
    /// The digest of this CheckpointSummary
    #[prost(bytes = "bytes", tag = "1")]
    pub digest: ::prost::bytes::Bytes,
    #[prost(message, optional, tag = "2")]
    pub summary: ::core::option::Option<CheckpointSummary>,
    #[prost(message, optional, tag = "3")]
    pub signature: ::core::option::Option<ValidatorAggregatedSignature>,
    #[prost(message, optional, tag = "4")]
    pub contents: ::core::option::Option<CheckpointContents>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FullCheckpoint {
    #[prost(message, optional, tag = "1")]
    pub summary: ::core::option::Option<CheckpointSummary>,
    #[prost(message, optional, tag = "2")]
    pub signature: ::core::option::Option<ValidatorAggregatedSignature>,
    #[prost(message, optional, tag = "3")]
    pub contents: ::core::option::Option<CheckpointContents>,
    #[prost(message, repeated, tag = "4")]
    pub transactions: ::prost::alloc::vec::Vec<CheckpointTransaction>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckpointTransaction {
    #[prost(message, optional, tag = "1")]
    pub transaction: ::core::option::Option<Transaction>,
    #[prost(message, repeated, tag = "2")]
    pub signatures: ::prost::alloc::vec::Vec<UserSignature>,
    #[prost(message, optional, tag = "3")]
    pub effects: ::core::option::Option<TransactionEffects>,
    #[prost(message, optional, tag = "4")]
    pub events: ::core::option::Option<TransactionEvents>,
    #[prost(message, repeated, tag = "5")]
    pub input_objects: ::prost::alloc::vec::Vec<Object>,
    #[prost(message, repeated, tag = "6")]
    pub output_objects: ::prost::alloc::vec::Vec<Object>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCheckpointResponse {
    #[prost(message, repeated, tag = "1")]
    pub checkpoints: ::prost::alloc::vec::Vec<GetCheckpointResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTransactionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub transactions: ::prost::alloc::vec::Vec<GetTransactionResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Address {
    #[prost(bytes = "bytes", tag = "1")]
    pub address: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TypeTag {
    #[prost(string, tag = "1")]
    pub type_tag: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct I128 {
    #[prost(bytes = "bytes", tag = "1")]
    pub little_endian_bytes: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalanceChange {
    #[prost(message, optional, tag = "1")]
    pub address: ::core::option::Option<Address>,
    #[prost(message, optional, tag = "2")]
    pub coin_type: ::core::option::Option<TypeTag>,
    #[prost(message, optional, tag = "3")]
    pub amount: ::core::option::Option<I128>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EffectsFinality {
    #[prost(message, optional, tag = "1")]
    pub signature: ::core::option::Option<ValidatorAggregatedSignature>,
    #[prost(uint64, optional, tag = "2")]
    pub checkpoint: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "3")]
    pub quorum_executed: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionExecutionResponse {
    #[prost(message, optional, tag = "1")]
    pub effects: ::core::option::Option<TransactionEffects>,
    #[prost(message, optional, tag = "2")]
    pub finality: ::core::option::Option<EffectsFinality>,
    #[prost(message, optional, tag = "3")]
    pub events: ::core::option::Option<TransactionEvents>,
    #[prost(message, repeated, tag = "4")]
    pub balance_changes: ::prost::alloc::vec::Vec<BalanceChange>,
    #[prost(message, repeated, tag = "5")]
    pub input_objects: ::prost::alloc::vec::Vec<Object>,
    #[prost(message, repeated, tag = "6")]
    pub output_objects: ::prost::alloc::vec::Vec<Object>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionSimulationResponse {
    #[prost(message, optional, tag = "1")]
    pub effects: ::core::option::Option<TransactionEffects>,
    #[prost(message, optional, tag = "2")]
    pub events: ::core::option::Option<TransactionEvents>,
    #[prost(message, repeated, tag = "3")]
    pub balance_changes: ::prost::alloc::vec::Vec<BalanceChange>,
    #[prost(message, repeated, tag = "4")]
    pub input_objects: ::prost::alloc::vec::Vec<Object>,
    #[prost(message, repeated, tag = "5")]
    pub output_objects: ::prost::alloc::vec::Vec<Object>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResolveTransactionResponse {
    #[prost(message, optional, tag = "1")]
    pub transaction: ::core::option::Option<Transaction>,
    #[prost(message, optional, tag = "2")]
    pub simulation: ::core::option::Option<TransactionSimulationResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteTransactionRequest {
    #[prost(message, optional, tag = "1")]
    pub transaction: ::core::option::Option<Transaction>,
    #[prost(message, repeated, tag = "2")]
    pub signatures: ::prost::alloc::vec::Vec<UserSignature>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimulateTransactionRequest {
    #[prost(message, optional, tag = "1")]
    pub transaction: ::core::option::Option<Transaction>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorCommittee {
    #[prost(uint64, tag = "1")]
    pub epoch: u64,
    #[prost(message, repeated, tag = "2")]
    pub members: ::prost::alloc::vec::Vec<ValidatorCommitteeMember>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorCommitteeMember {
    #[prost(bytes = "bytes", tag = "1")]
    pub public_key: ::prost::bytes::Bytes,
    #[prost(uint64, tag = "2")]
    pub stake: u64,
}
