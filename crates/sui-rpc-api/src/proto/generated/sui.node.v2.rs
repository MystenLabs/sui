// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNodeInfoResponse {
    /// The chain identifier of the chain that this Node is on
    #[prost(message, optional, tag = "1")]
    pub chain_id: ::core::option::Option<super::super::types::Digest>,
    /// Human readable name of the chain that this Node is on
    #[prost(string, optional, tag = "2")]
    pub chain: ::core::option::Option<::prost::alloc::string::String>,
    /// Current epoch of the Node based on its highest executed checkpoint
    #[prost(uint64, optional, tag = "3")]
    pub epoch: ::core::option::Option<u64>,
    /// Checkpoint height of the most recently executed checkpoint
    #[prost(uint64, optional, tag = "4")]
    pub checkpoint_height: ::core::option::Option<u64>,
    /// Unix timestamp of the most recently executed checkpoint
    #[prost(message, optional, tag = "5")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// The lowest checkpoint for which checkpoints and transaction data is available
    #[prost(uint64, optional, tag = "6")]
    pub lowest_available_checkpoint: ::core::option::Option<u64>,
    /// The lowest checkpoint for which object data is available
    #[prost(uint64, optional, tag = "7")]
    pub lowest_available_checkpoint_objects: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "8")]
    pub software_version: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCommitteeRequest {
    #[prost(uint64, optional, tag = "1")]
    pub epoch: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCommitteeResponse {
    #[prost(message, optional, tag = "1")]
    pub committee: ::core::option::Option<super::super::types::ValidatorCommittee>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTransactionRequest {
    #[prost(message, optional, tag = "1")]
    pub digest: ::core::option::Option<super::super::types::Digest>,
    #[prost(message, optional, tag = "3")]
    pub options: ::core::option::Option<GetTransactionOptions>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTransactionOptions {
    /// Include the sui.types.Transaction message in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "1")]
    pub transaction: ::core::option::Option<bool>,
    /// Include the Transaction formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "2")]
    pub transaction_bcs: ::core::option::Option<bool>,
    /// Include the set of sui.types.UserSignature's in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "3")]
    pub signatures: ::core::option::Option<bool>,
    /// Include the sui.types.TransactionEffects message in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "4")]
    pub effects: ::core::option::Option<bool>,
    /// Include the TransactionEffects formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "5")]
    pub effects_bcs: ::core::option::Option<bool>,
    /// Include the sui.types.TransactionEvents message in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "6")]
    pub events: ::core::option::Option<bool>,
    /// Include the TransactionEvents formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "7")]
    pub events_bcs: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTransactionResponse {
    /// The digest of this transaction
    #[prost(message, optional, tag = "1")]
    pub digest: ::core::option::Option<super::super::types::Digest>,
    #[prost(message, optional, tag = "2")]
    pub transaction: ::core::option::Option<super::super::types::Transaction>,
    #[prost(message, optional, tag = "3")]
    pub transaction_bcs: ::core::option::Option<super::super::types::Bcs>,
    #[prost(message, optional, tag = "4")]
    pub signatures: ::core::option::Option<UserSignatures>,
    #[prost(message, optional, tag = "5")]
    pub effects: ::core::option::Option<super::super::types::TransactionEffects>,
    #[prost(message, optional, tag = "6")]
    pub effects_bcs: ::core::option::Option<super::super::types::Bcs>,
    #[prost(message, optional, tag = "7")]
    pub events: ::core::option::Option<super::super::types::TransactionEvents>,
    #[prost(message, optional, tag = "8")]
    pub events_bcs: ::core::option::Option<super::super::types::Bcs>,
    #[prost(uint64, optional, tag = "9")]
    pub checkpoint: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "10")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserSignatures {
    #[prost(message, repeated, tag = "1")]
    pub signatures: ::prost::alloc::vec::Vec<super::super::types::UserSignature>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetObjectRequest {
    #[prost(message, optional, tag = "1")]
    pub object_id: ::core::option::Option<super::super::types::ObjectId>,
    #[prost(uint64, optional, tag = "2")]
    pub version: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "3")]
    pub options: ::core::option::Option<GetObjectOptions>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetObjectOptions {
    /// Include the sui.types.Object message in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "1")]
    pub object: ::core::option::Option<bool>,
    /// Include the Object formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "2")]
    pub object_bcs: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetObjectResponse {
    #[prost(message, optional, tag = "1")]
    pub object_id: ::core::option::Option<super::super::types::ObjectId>,
    #[prost(uint64, optional, tag = "2")]
    pub version: ::core::option::Option<u64>,
    /// The digest of this object
    #[prost(message, optional, tag = "3")]
    pub digest: ::core::option::Option<super::super::types::Digest>,
    #[prost(message, optional, tag = "4")]
    pub object: ::core::option::Option<super::super::types::Object>,
    #[prost(message, optional, tag = "5")]
    pub object_bcs: ::core::option::Option<super::super::types::Bcs>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCheckpointRequest {
    #[prost(uint64, optional, tag = "1")]
    pub sequence_number: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "2")]
    pub digest: ::core::option::Option<super::super::types::Digest>,
    #[prost(message, optional, tag = "3")]
    pub options: ::core::option::Option<GetCheckpointOptions>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCheckpointOptions {
    /// Include the sui.types.CheckpointSummary in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "3")]
    pub summary: ::core::option::Option<bool>,
    /// Include the CheckpointSummary formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "4")]
    pub summary_bcs: ::core::option::Option<bool>,
    /// Include the sui.types.ValidatorAggregatedSignature in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "5")]
    pub signature: ::core::option::Option<bool>,
    /// Include the sui.types.CheckpointContents message in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "6")]
    pub contents: ::core::option::Option<bool>,
    /// Include the CheckpointContents formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "7")]
    pub contents_bcs: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCheckpointResponse {
    /// The sequence number of this Checkpoint
    #[prost(uint64, optional, tag = "1")]
    pub sequence_number: ::core::option::Option<u64>,
    /// The digest of this Checkpoint's CheckpointSummary
    #[prost(message, optional, tag = "2")]
    pub digest: ::core::option::Option<super::super::types::Digest>,
    #[prost(message, optional, tag = "3")]
    pub summary: ::core::option::Option<super::super::types::CheckpointSummary>,
    #[prost(message, optional, tag = "4")]
    pub summary_bcs: ::core::option::Option<super::super::types::Bcs>,
    #[prost(message, optional, tag = "5")]
    pub signature: ::core::option::Option<
        super::super::types::ValidatorAggregatedSignature,
    >,
    #[prost(message, optional, tag = "6")]
    pub contents: ::core::option::Option<super::super::types::CheckpointContents>,
    #[prost(message, optional, tag = "7")]
    pub contents_bcs: ::core::option::Option<super::super::types::Bcs>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFullCheckpointRequest {
    #[prost(uint64, optional, tag = "1")]
    pub sequence_number: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "2")]
    pub digest: ::core::option::Option<super::super::types::Digest>,
    #[prost(message, optional, tag = "3")]
    pub options: ::core::option::Option<GetFullCheckpointOptions>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFullCheckpointOptions {
    /// Include the sui.types.CheckpointSummary in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "3")]
    pub summary: ::core::option::Option<bool>,
    /// Include the CheckpointSummary formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "4")]
    pub summary_bcs: ::core::option::Option<bool>,
    /// Include the sui.types.ValidatorAggregatedSignature in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "5")]
    pub signature: ::core::option::Option<bool>,
    /// Include the sui.types.CheckpointContents message in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "6")]
    pub contents: ::core::option::Option<bool>,
    /// Include the CheckpointContents formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "7")]
    pub contents_bcs: ::core::option::Option<bool>,
    /// Include the sui.types.Transaction message in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "8")]
    pub transaction: ::core::option::Option<bool>,
    /// Include the Transaction formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "9")]
    pub transaction_bcs: ::core::option::Option<bool>,
    /// Include the sui.types.TransactionEffects message in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "10")]
    pub effects: ::core::option::Option<bool>,
    /// Include the TransactionEffects formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "11")]
    pub effects_bcs: ::core::option::Option<bool>,
    /// Include the sui.types.TransactionEvents message in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "12")]
    pub events: ::core::option::Option<bool>,
    /// Include the TransactionEvents formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "13")]
    pub events_bcs: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14")]
    pub input_objects: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "15")]
    pub output_objects: ::core::option::Option<bool>,
    /// Include the sui.types.Object message in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "16")]
    pub object: ::core::option::Option<bool>,
    /// Include the Object formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "17")]
    pub object_bcs: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFullCheckpointResponse {
    /// The sequence number of this Checkpoint
    #[prost(uint64, optional, tag = "1")]
    pub sequence_number: ::core::option::Option<u64>,
    /// The digest of this Checkpoint's CheckpointSummary
    #[prost(message, optional, tag = "2")]
    pub digest: ::core::option::Option<super::super::types::Digest>,
    #[prost(message, optional, tag = "3")]
    pub summary: ::core::option::Option<super::super::types::CheckpointSummary>,
    #[prost(message, optional, tag = "4")]
    pub summary_bcs: ::core::option::Option<super::super::types::Bcs>,
    #[prost(message, optional, tag = "5")]
    pub signature: ::core::option::Option<
        super::super::types::ValidatorAggregatedSignature,
    >,
    #[prost(message, optional, tag = "6")]
    pub contents: ::core::option::Option<super::super::types::CheckpointContents>,
    #[prost(message, optional, tag = "7")]
    pub contents_bcs: ::core::option::Option<super::super::types::Bcs>,
    #[prost(message, repeated, tag = "8")]
    pub transactions: ::prost::alloc::vec::Vec<FullCheckpointTransaction>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FullCheckpointTransaction {
    /// The digest of this transaction
    #[prost(message, optional, tag = "1")]
    pub digest: ::core::option::Option<super::super::types::Digest>,
    #[prost(message, optional, tag = "2")]
    pub transaction: ::core::option::Option<super::super::types::Transaction>,
    #[prost(message, optional, tag = "3")]
    pub transaction_bcs: ::core::option::Option<super::super::types::Bcs>,
    #[prost(message, optional, tag = "5")]
    pub effects: ::core::option::Option<super::super::types::TransactionEffects>,
    #[prost(message, optional, tag = "6")]
    pub effects_bcs: ::core::option::Option<super::super::types::Bcs>,
    #[prost(message, optional, tag = "7")]
    pub events: ::core::option::Option<super::super::types::TransactionEvents>,
    #[prost(message, optional, tag = "8")]
    pub events_bcs: ::core::option::Option<super::super::types::Bcs>,
    #[prost(message, optional, tag = "11")]
    pub input_objects: ::core::option::Option<FullCheckpointObjects>,
    #[prost(message, optional, tag = "12")]
    pub output_objects: ::core::option::Option<FullCheckpointObjects>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FullCheckpointObjects {
    #[prost(message, repeated, tag = "1")]
    pub objects: ::prost::alloc::vec::Vec<FullCheckpointObject>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FullCheckpointObject {
    #[prost(message, optional, tag = "1")]
    pub object_id: ::core::option::Option<super::super::types::ObjectId>,
    #[prost(uint64, optional, tag = "2")]
    pub version: ::core::option::Option<u64>,
    /// The digest of this object
    #[prost(message, optional, tag = "3")]
    pub digest: ::core::option::Option<super::super::types::Digest>,
    #[prost(message, optional, tag = "4")]
    pub object: ::core::option::Option<super::super::types::Object>,
    #[prost(message, optional, tag = "5")]
    pub object_bcs: ::core::option::Option<super::super::types::Bcs>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalanceChange {
    #[prost(message, optional, tag = "1")]
    pub address: ::core::option::Option<super::super::types::Address>,
    #[prost(message, optional, tag = "2")]
    pub coin_type: ::core::option::Option<super::super::types::TypeTag>,
    #[prost(message, optional, tag = "3")]
    pub amount: ::core::option::Option<super::super::types::I128>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalanceChanges {
    #[prost(message, repeated, tag = "4")]
    pub balance_changes: ::prost::alloc::vec::Vec<BalanceChange>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EffectsFinality {
    #[prost(oneof = "effects_finality::Finality", tags = "1, 2, 3")]
    pub finality: ::core::option::Option<effects_finality::Finality>,
}
/// Nested message and enum types in `EffectsFinality`.
pub mod effects_finality {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Finality {
        #[prost(message, tag = "1")]
        Certified(super::super::super::types::ValidatorAggregatedSignature),
        #[prost(uint64, tag = "2")]
        Checkpointed(u64),
        #[prost(message, tag = "3")]
        QuorumExecuted(()),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteTransactionResponse {
    #[prost(message, optional, tag = "1")]
    pub finality: ::core::option::Option<EffectsFinality>,
    #[prost(message, optional, tag = "2")]
    pub effects: ::core::option::Option<super::super::types::TransactionEffects>,
    #[prost(message, optional, tag = "3")]
    pub effects_bcs: ::core::option::Option<super::super::types::Bcs>,
    #[prost(message, optional, tag = "4")]
    pub events: ::core::option::Option<super::super::types::TransactionEvents>,
    #[prost(message, optional, tag = "5")]
    pub events_bcs: ::core::option::Option<super::super::types::Bcs>,
    #[prost(message, optional, tag = "6")]
    pub balance_changes: ::core::option::Option<BalanceChanges>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteTransactionRequest {
    #[prost(message, optional, tag = "1")]
    pub transaction: ::core::option::Option<super::super::types::Transaction>,
    #[prost(message, optional, tag = "2")]
    pub transaction_bcs: ::core::option::Option<super::super::types::Bcs>,
    #[prost(message, repeated, tag = "3")]
    pub signatures: ::prost::alloc::vec::Vec<super::super::types::UserSignature>,
    #[prost(message, optional, tag = "4")]
    pub options: ::core::option::Option<ExecuteTransactionOptions>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExecuteTransactionOptions {
    /// Include the sui.types.TransactionEffects message in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "4")]
    pub effects: ::core::option::Option<bool>,
    /// Include the TransactionEffects formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "5")]
    pub effects_bcs: ::core::option::Option<bool>,
    /// Include the sui.types.TransactionEvents message in the response.
    ///
    /// Defaults to true if not included
    #[prost(bool, optional, tag = "6")]
    pub events: ::core::option::Option<bool>,
    /// Include the TransactionEvents formatted as BCS in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "7")]
    pub events_bcs: ::core::option::Option<bool>,
    /// Include the BalanceChanges in the response.
    ///
    /// Defaults to false if not included
    #[prost(bool, optional, tag = "8")]
    pub balance_changes: ::core::option::Option<bool>,
}
/// Generated client implementations.
pub mod node_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct NodeClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl NodeClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> NodeClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> NodeClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            NodeClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_node_info(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::GetNodeInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sui.node.v2.Node/GetNodeInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sui.node.v2.Node", "GetNodeInfo"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_committee(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCommitteeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCommitteeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sui.node.v2.Node/GetCommittee",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sui.node.v2.Node", "GetCommittee"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_object(
            &mut self,
            request: impl tonic::IntoRequest<super::GetObjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetObjectResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sui.node.v2.Node/GetObject",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sui.node.v2.Node", "GetObject"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTransactionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sui.node.v2.Node/GetTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sui.node.v2.Node", "GetTransaction"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_checkpoint(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCheckpointRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCheckpointResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sui.node.v2.Node/GetCheckpoint",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sui.node.v2.Node", "GetCheckpoint"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_full_checkpoint(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFullCheckpointRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFullCheckpointResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sui.node.v2.Node/GetFullCheckpoint",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sui.node.v2.Node", "GetFullCheckpoint"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn execute_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::ExecuteTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ExecuteTransactionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sui.node.v2.Node/ExecuteTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sui.node.v2.Node", "ExecuteTransaction"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod node_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with NodeServer.
    #[async_trait]
    pub trait Node: std::marker::Send + std::marker::Sync + 'static {
        async fn get_node_info(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::GetNodeInfoResponse>,
            tonic::Status,
        >;
        async fn get_committee(
            &self,
            request: tonic::Request<super::GetCommitteeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCommitteeResponse>,
            tonic::Status,
        >;
        async fn get_object(
            &self,
            request: tonic::Request<super::GetObjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetObjectResponse>,
            tonic::Status,
        >;
        async fn get_transaction(
            &self,
            request: tonic::Request<super::GetTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTransactionResponse>,
            tonic::Status,
        >;
        async fn get_checkpoint(
            &self,
            request: tonic::Request<super::GetCheckpointRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCheckpointResponse>,
            tonic::Status,
        >;
        async fn get_full_checkpoint(
            &self,
            request: tonic::Request<super::GetFullCheckpointRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFullCheckpointResponse>,
            tonic::Status,
        >;
        async fn execute_transaction(
            &self,
            request: tonic::Request<super::ExecuteTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ExecuteTransactionResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct NodeServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> NodeServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for NodeServer<T>
    where
        T: Node,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/sui.node.v2.Node/GetNodeInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetNodeInfoSvc<T: Node>(pub Arc<T>);
                    impl<T: Node> tonic::server::UnaryService<()> for GetNodeInfoSvc<T> {
                        type Response = super::GetNodeInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Node>::get_node_info(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetNodeInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sui.node.v2.Node/GetCommittee" => {
                    #[allow(non_camel_case_types)]
                    struct GetCommitteeSvc<T: Node>(pub Arc<T>);
                    impl<T: Node> tonic::server::UnaryService<super::GetCommitteeRequest>
                    for GetCommitteeSvc<T> {
                        type Response = super::GetCommitteeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetCommitteeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Node>::get_committee(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetCommitteeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sui.node.v2.Node/GetObject" => {
                    #[allow(non_camel_case_types)]
                    struct GetObjectSvc<T: Node>(pub Arc<T>);
                    impl<T: Node> tonic::server::UnaryService<super::GetObjectRequest>
                    for GetObjectSvc<T> {
                        type Response = super::GetObjectResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetObjectRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Node>::get_object(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetObjectSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sui.node.v2.Node/GetTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct GetTransactionSvc<T: Node>(pub Arc<T>);
                    impl<
                        T: Node,
                    > tonic::server::UnaryService<super::GetTransactionRequest>
                    for GetTransactionSvc<T> {
                        type Response = super::GetTransactionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Node>::get_transaction(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTransactionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sui.node.v2.Node/GetCheckpoint" => {
                    #[allow(non_camel_case_types)]
                    struct GetCheckpointSvc<T: Node>(pub Arc<T>);
                    impl<
                        T: Node,
                    > tonic::server::UnaryService<super::GetCheckpointRequest>
                    for GetCheckpointSvc<T> {
                        type Response = super::GetCheckpointResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetCheckpointRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Node>::get_checkpoint(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetCheckpointSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sui.node.v2.Node/GetFullCheckpoint" => {
                    #[allow(non_camel_case_types)]
                    struct GetFullCheckpointSvc<T: Node>(pub Arc<T>);
                    impl<
                        T: Node,
                    > tonic::server::UnaryService<super::GetFullCheckpointRequest>
                    for GetFullCheckpointSvc<T> {
                        type Response = super::GetFullCheckpointResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetFullCheckpointRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Node>::get_full_checkpoint(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFullCheckpointSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sui.node.v2.Node/ExecuteTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct ExecuteTransactionSvc<T: Node>(pub Arc<T>);
                    impl<
                        T: Node,
                    > tonic::server::UnaryService<super::ExecuteTransactionRequest>
                    for ExecuteTransactionSvc<T> {
                        type Response = super::ExecuteTransactionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ExecuteTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Node>::execute_transaction(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ExecuteTransactionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for NodeServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "sui.node.v2.Node";
    impl<T> tonic::server::NamedService for NodeServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
