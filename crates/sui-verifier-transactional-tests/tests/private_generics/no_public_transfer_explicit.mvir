// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Tests private transfer functions cannot be called on types defined outside of the module.

//# init --addresses test=0x0

//# publish
module test.m {
    import 0x2.object;

    struct KeyStruct has key {
        id: object.UID,
    }

    struct KeyStoreStruct has key, store {
        id: object.UID,
    }

    // Enums cannot have key see failure below
    enum StoreEnum has store {
        V { id: object.UID },
    }
}



//# set-address test object(1,0)

//# publish
module 0x0.m {
    import 0x2.object;
    // Enums cannot have key 
    enum StoreEnum has key {
        V { id: object.UID },
    }
}

// Key-only struct not defined in current module

//# publish --dependencies test
module 0x0.u {
    import test.m;
    import 0x2.transfer;

    f(x: m.KeyStruct) {
        label l0:
        transfer.transfer<m.KeyStruct>(move(x), 0x0);
        return;
    }
}

//# publish --dependencies test
module 0x0.u {
    import test.m;
    import 0x2.transfer;

    f(x: m.KeyStruct) {
        label l0:
        transfer.freeze_object<m.KeyStruct>(move(x));
        return;
    }
}

//# publish --dependencies test
module 0x0.u {
    import test.m;
    import 0x2.transfer;

    f(x: m.KeyStruct) {
        label l0:
        transfer.share_object<m.KeyStruct>(move(x));
        return;
    }
}

//# publish --dependencies test
module 0x0.u {
    import test.m;
    import 0x2.transfer;
    import 0x2.object;

    f(uid: &mut object.UID, x: transfer.Receiving<m.KeyStruct>): m.KeyStruct {
        let c: m.KeyStruct;
        label l0:
        c = transfer.receive<m.KeyStruct>(move(uid), move(x));
        return move(c);
    }
}

// Key + store struct not defined in current module

//# publish --dependencies test
module 0x0.u {
    import test.m;
    import 0x2.transfer;

    f(x: m.KeyStoreStruct) {
        label l0:
        transfer.transfer<m.KeyStoreStruct>(move(x), 0x0);
        return;
    }
}

//# publish --dependencies test
module 0x0.u {
    import test.m;
    import 0x2.transfer;

    f(x: m.KeyStoreStruct) {
        label l0:
        transfer.freeze_object<m.KeyStoreStruct>(move(x));
        return;
    }
}

//# publish --dependencies test
module 0x0.u {
    import test.m;
    import 0x2.transfer;

    f(x: m.KeyStoreStruct) {
        label l0:
        transfer.share_object<m.KeyStoreStruct>(move(x));
        return;
    }
}

//# publish --dependencies test
module 0x0.u {
    import test.m;
    import 0x2.transfer;
    import 0x2.object;

    f(uid: &mut object.UID, x: transfer.Receiving<m.KeyStoreStruct>): m.KeyStoreStruct {
        let c: m.KeyStoreStruct;
        label l0:
        c = transfer.receive<m.KeyStoreStruct>(move(uid), move(x));
        return move(c);
    }
}

// Store enum not defined in current module

//# publish --dependencies test
module 0x0.u {
    import test.m;
    import 0x2.transfer;

    f(x: m.StoreEnum) {
        label l0:
        transfer.transfer<m.StoreEnum>(move(x), 0x0);
        return;
    }
}

//# publish --dependencies test
module 0x0.u {
    import test.m;
    import 0x2.transfer;

    f(x: m.StoreEnum) {
        label l0:
        transfer.freeze_object<m.StoreEnum>(move(x));
        return;
    }
}

//# publish --dependencies test
module 0x0.u {
    import test.m;
    import 0x2.transfer;

    f(x: m.StoreEnum) {
        label l0:
        transfer.share_object<m.StoreEnum>(move(x));
        return;
    }
}

//# publish --dependencies test
module 0x0.u {
    import test.m;
    import 0x2.transfer;
    import 0x2.object;

    f(uid: &mut object.UID, x: transfer.Receiving<m.StoreEnum>): m.StoreEnum {
        let c: m.StoreEnum;
        label l0:
        c = transfer.receive<m.StoreEnum>(move(uid), move(x));
        return move(c);
    }
}
