---
source: crates/sui/src/unit_tests/upgrade_compatibility_tests.rs
expression: err.to_string()
---
Upgrade compatibility check failed with the following errors:
- StructAbilityMismatch { name: Identifier("StructAbilityMismatchAdd"), old_struct: Struct { abilities: [], type_parameters: [], fields: [Field { name: Identifier("dummy_field"), type_: Bool }] }, new_struct: Struct { abilities: [Copy, ], type_parameters: [], fields: [Field { name: Identifier("dummy_field"), type_: Bool }] } }
- StructAbilityMismatch { name: Identifier("StructAbilityMismatchChange"), old_struct: Struct { abilities: [Copy, ], type_parameters: [], fields: [Field { name: Identifier("dummy_field"), type_: Bool }] }, new_struct: Struct { abilities: [Drop, ], type_parameters: [], fields: [Field { name: Identifier("dummy_field"), type_: Bool }] } }
- StructAbilityMismatch { name: Identifier("StructAbilityMismatchRemove"), old_struct: Struct { abilities: [Copy, ], type_parameters: [], fields: [Field { name: Identifier("dummy_field"), type_: Bool }] }, new_struct: Struct { abilities: [], type_parameters: [], fields: [Field { name: Identifier("dummy_field"), type_: Bool }] } }
- StructFieldMismatch { name: Identifier("StructFieldMismatchAdd"), old_struct: Struct { abilities: [], type_parameters: [], fields: [Field { name: Identifier("a"), type_: U64 }, Field { name: Identifier("b"), type_: U64 }] }, new_struct: Struct { abilities: [], type_parameters: [], fields: [Field { name: Identifier("a"), type_: U64 }, Field { name: Identifier("b"), type_: U64 }, Field { name: Identifier("c"), type_: U64 }] } }
- StructFieldMismatch { name: Identifier("StructFieldMismatchChange"), old_struct: Struct { abilities: [], type_parameters: [], fields: [Field { name: Identifier("a"), type_: U64 }, Field { name: Identifier("b"), type_: U64 }] }, new_struct: Struct { abilities: [], type_parameters: [], fields: [Field { name: Identifier("a"), type_: U64 }, Field { name: Identifier("b"), type_: U8 }] } }
- StructFieldMismatch { name: Identifier("StructFieldMismatchRemove"), old_struct: Struct { abilities: [], type_parameters: [], fields: [Field { name: Identifier("a"), type_: U64 }, Field { name: Identifier("b"), type_: U64 }] }, new_struct: Struct { abilities: [], type_parameters: [], fields: [Field { name: Identifier("a"), type_: U64 }] } }
- StructMissing { name: Identifier("StructToBeRemoved"), old_struct: Struct { abilities: [], type_parameters: [], fields: [Field { name: Identifier("b"), type_: U64 }] } }
- StructTypeParamMismatch { name: Identifier("StructTypeParamMismatch"), old_struct: Struct { abilities: [], type_parameters: [DatatypeTyParameter { constraints: [], is_phantom: false }, DatatypeTyParameter { constraints: [], is_phantom: false }], fields: [Field { name: Identifier("a"), type_: TypeParameter(0) }] }, new_struct: Struct { abilities: [], type_parameters: [DatatypeTyParameter { constraints: [], is_phantom: false }], fields: [Field { name: Identifier("a"), type_: TypeParameter(0) }] } }
- EnumAbilityMismatch { name: Identifier("EnumAbilityMismatchAdd"), old_enum: Enum { abilities: [], type_parameters: [], variants: [Variant { name: Identifier("A"), fields: [] }] }, new_enum: Enum { abilities: [Copy, ], type_parameters: [], variants: [Variant { name: Identifier("A"), fields: [] }] } }
- EnumAbilityMismatch { name: Identifier("EnumAbilityMismatchChange"), old_enum: Enum { abilities: [Copy, ], type_parameters: [], variants: [Variant { name: Identifier("A"), fields: [] }] }, new_enum: Enum { abilities: [Drop, ], type_parameters: [], variants: [Variant { name: Identifier("A"), fields: [] }] } }
- EnumAbilityMismatch { name: Identifier("EnumAbilityMismatchRemove"), old_enum: Enum { abilities: [Copy, ], type_parameters: [], variants: [Variant { name: Identifier("A"), fields: [] }] }, new_enum: Enum { abilities: [], type_parameters: [], variants: [Variant { name: Identifier("A"), fields: [] }] } }
- EnumNewVariant { name: Identifier("EnumNewVariant"), old_enum: Enum { abilities: [], type_parameters: [], variants: [Variant { name: Identifier("A"), fields: [] }, Variant { name: Identifier("B"), fields: [] }, Variant { name: Identifier("C"), fields: [] }] }, new_enum: Enum { abilities: [], type_parameters: [], variants: [Variant { name: Identifier("A"), fields: [] }, Variant { name: Identifier("B"), fields: [] }, Variant { name: Identifier("C"), fields: [] }, Variant { name: Identifier("D"), fields: [] }] } }
- EnumMissing { name: Identifier("EnumToBeRemoved"), old_enum: Enum { abilities: [], type_parameters: [], variants: [Variant { name: Identifier("A"), fields: [] }, Variant { name: Identifier("B"), fields: [] }] } }
- EnumVariantMissing { name: Identifier("EnumVariantMissing"), old_enum: Enum { abilities: [], type_parameters: [], variants: [Variant { name: Identifier("A"), fields: [] }, Variant { name: Identifier("B"), fields: [] }] }, tag: 1 }
- FunctionSignatureMismatch { name: Identifier("function_add_arg"), old_function: Function { visibility: Public, is_entry: false, type_parameters: [], parameters: [], return_: [], code: [Ret] }, new_function: Function { visibility: Public, is_entry: false, type_parameters: [], parameters: [U64], return_: [], code: [Ret] } }
- FunctionSignatureMismatch { name: Identifier("function_change_arg"), old_function: Function { visibility: Public, is_entry: false, type_parameters: [], parameters: [U64], return_: [], code: [Ret] }, new_function: Function { visibility: Public, is_entry: false, type_parameters: [], parameters: [U8], return_: [], code: [Ret] } }
- FunctionSignatureMismatch { name: Identifier("function_remove_arg"), old_function: Function { visibility: Public, is_entry: false, type_parameters: [], parameters: [U64], return_: [], code: [Ret] }, new_function: Function { visibility: Public, is_entry: false, type_parameters: [], parameters: [], return_: [], code: [Ret] } }
- FunctionLostPublicVisibility { name: Identifier("function_to_have_public_removed"), old_function: Function { visibility: Public, is_entry: false, type_parameters: [], parameters: [], return_: [], code: [Ret] } }
