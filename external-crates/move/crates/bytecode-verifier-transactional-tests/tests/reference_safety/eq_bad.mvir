//# publish
module 0x1.Tester {
    eqtest1() {
        let x: u64;
        let r: &mut u64;
    label b0:
        x = 0;
        r = &mut x;
        // invalid read of mutable ref, does not currently own its data
        _ = copy(r) == copy(r);
        return;
    }
}

//# publish
module 0x1.Tester2 {
    eqtest2() {
        let x: u64;
        let r: &mut u64;
    label b0:
        x = 0;
        r = &mut x;
        // invalid read of mutable ref, does not currently own its data
        _ = copy(r) == move(r);
        return;
    }
}

//# publish
module 0x1.Tester3 {
    neqtest1() {
        let x: u64;
        let r: &mut u64;
    label b0:
        x = 0;
        r = &mut x;
        // invalid read of mutable ref, does not currently own its data
        _ = copy(r) != copy(r);
        return;
    }
}

//# publish
module 0x1.Tester4 {
    neqtest2() {
        let x: u64;
        let r: &mut u64;
    label b0:
        x = 0;
        r = &mut x;
        // invalid read of mutable ref, does not currently own its data
        _ = copy(r) != move(r);
        return;
    }
}
