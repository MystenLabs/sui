//# publish
module 0x1.M {
    struct K has key { dummy: bool }

    struct BoxCopy<T> has copy { f: T }
    struct BoxDrop<T> has drop { f: T }
    struct BoxStore<T> has store { f: T }
    struct BoxKey<T> has key { f: T }

    struct NeedsCopy<T: copy> { dummy: bool }
    struct NeedsDrop<T: drop> { dummy: bool }
    struct NeedsStore<T: store> { dummy: bool }
    struct NeedsKey<T: key> { dummy: bool }
}

// tests various valid constraints in script arguments
// all tests should abort, signaling they pass verification

//# run --type-args u64 --args false
module 0x1.m {
import 0x1.M;
entry foo<T: copy>(x: M.NeedsCopy<T>) {
    label l0:
    abort 0;
}
}

//# run --type-args u64 --args false
module 0x2.m {
import 0x1.M;
entry foo<T: drop>(x: M.NeedsDrop<T>) {
    label l0:
    abort 0;
}
}

//# run --type-args u64 --args false
module 0x3.m {
import 0x1.M;
entry foo<T: store>(x: M.NeedsStore<T>) {
    label l0:
    abort 0;
}
}

//# run --type-args 0x1::M::K --args false
module 0x4.m {
import 0x1.M;
entry foo<T: key>(x: M.NeedsKey<T>) {
    label l0:
    abort 0;
}
}

//# run --type-args u64 --args false
module 0x5.m {
import 0x1.M;
entry foo<T: copy>(x: M.NeedsCopy<M.BoxCopy<T>>) {
    label l0:
    abort 0;
}
}

//# run --type-args u64 --args false
module 0x6.m {
import 0x1.M;
entry foo<T: drop>(x: M.NeedsDrop<M.BoxDrop<T>>) {
    label l0:
    abort 0;
}
}

//# run --type-args u64 --args false
module 0x7.m {
import 0x1.M;
entry foo<T: store>(x: M.NeedsStore<M.BoxStore<T>>) {
    label l0:
    abort 0;
}
}

//# run --type-args u64 --args false
module 0x8.m {
import 0x1.M;
entry foo<T: store>(x: M.NeedsKey<M.BoxKey<T>>) {
    label l0:
    abort 0;
}
}
