//# publish
module 0x1.M {
    struct BoxCopy<T> has copy { f: T }
    struct BoxDrop<T> has drop { f: T }
    struct BoxStore<T> has store { f: T }
    struct BoxKey<T> has key { f: T }

    struct NeedsCopy<T: copy> { dummy: bool }
    struct NeedsDrop<T: drop> { dummy: bool }
    struct NeedsStore<T: store> { dummy: bool }
    struct NeedsKey<T: key> { dummy: bool }
}

// tests various invalid constraints in script arguments
// all tests should give a constraint violation, even without type arguments passed in to 'run'

//# run
module 0x42.m {
import 0x1.M;
entry foo<T: drop>(x: M.NeedsCopy<T>) {
    label l0:
    abort 0;
}
}

//# run
module 0x42.m {
import 0x1.M;
entry foo<T: copy + store>(x: M.NeedsDrop<T>) {
    label l0:
    abort 0;
}
}

//# run
module 0x42.m {
import 0x1.M;
entry foo<T: key>(x: M.NeedsStore<T>) {
    label l0:
    abort 0;
}
}

//# run
module 0x42.m {
import 0x1.M;
entry foo<T>(x: M.NeedsKey<T>) {
    label l0:
    abort 0;
}
}

//# run
module 0x42.m {
import 0x1.M;
entry foo<T: store>(x: M.NeedsCopy<M.BoxCopy<T>>) {
    label l0:
    abort 0;
}
}

//# run
module 0x42.m {
import 0x1.M;
entry foo<T: key + store>(x: M.NeedsDrop<M.BoxDrop<T>>) {
    label l0:
    abort 0;
}
}

//# run
module 0x42.m {
import 0x1.M;
entry foo<T>(x: M.NeedsStore<M.BoxStore<T>>) {
    label l0:
    abort 0;
}
}

//# run
module 0x42.m {
import 0x1.M;
entry foo<T: drop>(x: M.NeedsKey<M.BoxKey<T>>) {
    label l0:
    abort 0;
}
}
