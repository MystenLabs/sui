//# publish
module 0x1.Cup {
    struct Cup<T> { f: T }
    public cup<T>(f: T): Self.Cup<T> {
    label b0:
        return Cup<T> { f: move(f) };
    }
}

//# publish
module 0x1.M0 {
    // recursive struct
    struct Foo { f: Self.Foo }
}

//# publish
module 0x1.M1 {
    import 0x1.Cup;
    // recursive struct
    struct Foo { f: Cup.Cup<Self.Foo> }

    // would blow up the stack
    public foo(): Self.Foo {
    label b0:
        return Foo { f: Cup.cup<Self.Foo>(Self.foo()) };
    }

}

//# publish
module 0x1.M2 {
    import 0x1.signer;

    struct X { y: vector<Self.Y> }
    struct Y { x: vector<Self.X> }

}

//# publish
module 0x1.M3 {
    import 0x1.Cup;

    // recursive struct
    struct Foo { f: Cup.Cup<Self.Foo> }

}

//# publish
module 0x1.M3 {
    import 0x1.Cup;

    // indirect recursive struct
    struct A { b: Self.B }
    struct B { c: Self.C }
    struct C { d: vector<Self.D> }
    struct D { x: Cup.Cup<Cup.Cup<Cup.Cup<Self.A>>> }

}
