//# publish
module 0x1.Token {
    struct T has key { b: bool }

    public test() {
        let t: Self.T;
        let t_ref: &Self.T;
        let b: bool;
    label b0:
        t = T{ b: true };
        t_ref = &t;
        assert(copy(t_ref) == move(t_ref), 42); // == works over refs, even if resources without drop
        T{ b } = move(t);
        return;
    }
}

//# run
module 0x42.m {
import 0x1.Token;

entry foo() {
label b0:
    Token.test();
    return;
}
}

//# publish
module 0x2.Token {
    enum T has key { V { b: bool } }

    public test() {
        let t: Self.T;
        let t_ref: &Self.T;
        let b: bool;
    label b0:
        t = T.V{ b: true };
        t_ref = &t;
        assert(copy(t_ref) == move(t_ref), 42); // == works over refs, even if resources without drop
        T.V{ b } = move(t);
        return;
    }
}

//# run
module 0x43.m {
import 0x2.Token;

entry foo() {
label b0:
    Token.test();
    return;
}
}
