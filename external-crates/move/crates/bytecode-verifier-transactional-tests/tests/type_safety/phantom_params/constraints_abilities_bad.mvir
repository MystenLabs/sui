//# publish
module 0x1.M1 {
    struct NoAbilities { a: bool }
    struct HasAbilities<phantom T1, T2> has drop, copy, store, key { a: bool }
}

//# publish
module 0x1.M2 {
    import 0x1.M1;

    struct S1<T: drop + copy + store + key> { a: bool }
    struct S2 {
        a: Self.S1<M1.HasAbilities<M1.NoAbilities, M1.NoAbilities>>,
    }
}

//# publish
module 0x1.M3 {
    import 0x1.M1;

    struct HasDrop<phantom T1, T2> has drop { a: bool }
    struct HasCopy<phantom T1, T2> has copy { a: bool }
    struct HasStore<phantom T1, T2> has store { a: bool }
    struct HasKey<phantom T1, T2> has key { a: bool }

    struct S1<T1: drop, T2: copy, T3: store, T4: key> { a: bool }
    struct S2 {
        a: Self.S1< Self.HasDrop<M1.NoAbilities, M1.NoAbilities>,
                    Self.HasCopy<M1.NoAbilities, M1.NoAbilities>,
                    Self.HasStore<M1.NoAbilities, M1.NoAbilities>,
                    Self.HasKey<M1.NoAbilities, M1.NoAbilities>
                  >
    }
}

//# publish
module 0x1.M4 {
    import 0x1.M1;

    f1<T: drop + copy + store + key>() { label b0: return; }
    f2() {
    label b0:
        Self.f1<M1.HasAbilities<M1.NoAbilities, M1.NoAbilities>>();
        return;
    }
}


//# publish
module 0x1.M3Valid {
    import 0x1.M1;

    struct HasDrop<phantom T1, T2> has drop { a: bool }
    struct HasCopy<phantom T1, T2> has copy { a: bool }
    struct HasStore<phantom T1, T2> has store { a: bool }
    struct HasKey<phantom T1, T2> has key { a: bool }

}

//# publish
module 0x1.M5 {
    import 0x1.M1;
    import 0x1.M3Valid;

    f1<T1: drop, T2: copy, T3: store, T4: key>() { label b0: return; }
    f2() {
    label b0:
        Self.f1< M3Valid.HasDrop<M1.NoAbilities, M1.NoAbilities>,
                 M3Valid.HasCopy<M1.NoAbilities, M1.NoAbilities>,
                 M3Valid.HasStore<M1.NoAbilities, M1.NoAbilities>,
                 M3Valid.HasKey<M1.NoAbilities, M1.NoAbilities>
               >();
        return;
    }
}

//# publish
module 0x2.M1 {
    enum NoAbilities { V{ a: bool } }
    enum HasAbilities<phantom T1, T2> has drop, copy, store, key { V{ a: bool } }
}

//# publish
module 0x2.M2 {
    import 0x2.M1;

    enum S1<T: drop + copy + store + key> { V{ a: bool }}
    enum S2 {
        V { a: Self.S1<M1.HasAbilities<M1.NoAbilities, M1.NoAbilities>> } 
    }
}

//# publish
module 0x2.M3 {
    import 0x2.M1;

    enum HasDrop<phantom T1, T2> has drop { V{ a: bool }}
    enum HasCopy<phantom T1, T2> has copy { V{ a: bool }}
    enum HasStore<phantom T1, T2> has store { V{ a: bool }}
    enum HasKey<phantom T1, T2> has key { V{ a: bool }}

    enum S1<T1: drop, T2: copy, T3: store, T4: key> { V{ a: bool }}
    enum S2 {
        V { 
            a: Self.S1< Self.HasDrop<M1.NoAbilities, M1.NoAbilities>,
                    Self.HasCopy<M1.NoAbilities, M1.NoAbilities>,
                    Self.HasStore<M1.NoAbilities, M1.NoAbilities>,
                    Self.HasKey<M1.NoAbilities, M1.NoAbilities>
                  >
        }
    }
}

//# publish
module 0x2.M4 {
    import 0x2.M1;

    f1<T: drop + copy + store + key>() { label b0: return; }
    f2() {
    label b0:
        Self.f1<M1.HasAbilities<M1.NoAbilities, M1.NoAbilities>>();
        return;
    }
}


//# publish
module 0x2.M3Valid {
    import 0x2.M1;

    enum HasDrop<phantom T1, T2> has drop { V{ a: bool }}
    enum HasCopy<phantom T1, T2> has copy { V{ a: bool }}
    enum HasStore<phantom T1, T2> has store { V{ a: bool }}
    enum HasKey<phantom T1, T2> has key { V{ a: bool }}

}

//# publish
module 0x2.M5 {
    import 0x2.M1;
    import 0x2.M3Valid;

    f1<T1: drop, T2: copy, T3: store, T4: key>() { label b0: return; }
    f2() {
    label b0:
        Self.f1< M3Valid.HasDrop<M1.NoAbilities, M1.NoAbilities>,
                 M3Valid.HasCopy<M1.NoAbilities, M1.NoAbilities>,
                 M3Valid.HasStore<M1.NoAbilities, M1.NoAbilities>,
                 M3Valid.HasKey<M1.NoAbilities, M1.NoAbilities>
               >();
        return;
    }
}
