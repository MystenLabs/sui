//# publish
module 0x1.M {
    struct NoAbilities { a: bool }
    struct HasDrop<phantom T1, T2> has drop { a: bool }
    struct HasCopy<phantom T1, T2> has copy { a: bool }
    struct HasStore<phantom T1, T2> has store { a: bool }
    struct HasKey<phantom T1, T2> has key { a: bool }
    struct HasAbilities<phantom T1, T2> has drop, copy, store, key { a: bool }

    struct S1<T: drop + copy + store + key> { a: bool }
    struct S2 {
        a: Self.S1<Self.HasAbilities<Self.NoAbilities, u64>>,
    }

    struct S3<T1: drop, T2: copy, T3: store, T4: key> { a: bool }
    struct S4 {
        a: Self.S3< Self.HasDrop<Self.NoAbilities, u64>,
                    Self.HasCopy<Self.NoAbilities, u64>,
                    Self.HasStore<Self.NoAbilities, u64>,
                    Self.HasKey<Self.NoAbilities, u64>
                  >
    }

    f1<T: drop + copy + store + key>() { label b0: return; }
    f2() {
    label b0:
        Self.f1<Self.HasAbilities<Self.NoAbilities, u64>>();
        return;
    }

    f3<T1: drop, T2: copy, T3: store, T4: key>() { label b0: return; }
    f4() {
    label b0:
        Self.f3< Self.HasDrop<Self.NoAbilities, u64>,
                 Self.HasCopy<Self.NoAbilities, u64>,
                 Self.HasStore<Self.NoAbilities, u64>,
                 Self.HasKey<Self.NoAbilities, u64>
               >();
        return;
    }
}

//# publish
module 0x2.M {
    enum NoAbilities { V{ a: bool } }
    enum HasDrop<phantom T1, T2> has drop { V{ a: bool }}
    enum HasCopy<phantom T1, T2> has copy { V{ a: bool }}
    enum HasStore<phantom T1, T2> has store { V{ a: bool }}
    enum HasKey<phantom T1, T2> has key { V{ a: bool }}
    enum HasAbilities<phantom T1, T2> has drop, copy, store, key { V{ a: bool } }

    enum S1<T: drop + copy + store + key> { V{ a: bool }}
    enum S2 {
        V { a: Self.S1<Self.HasAbilities<Self.NoAbilities, u64>>, }
    }

    enum S3<T1: drop, T2: copy, T3: store, T4: key> { V{ a: bool }}
    enum S4 {
        V { 
            a: Self.S3< Self.HasDrop<Self.NoAbilities, u64>,
                    Self.HasCopy<Self.NoAbilities, u64>,
                    Self.HasStore<Self.NoAbilities, u64>,
                    Self.HasKey<Self.NoAbilities, u64>
                  >
        }
    }

    f1<T: drop + copy + store + key>() { label b0: return; }
    f2() {
    label b0:
        Self.f1<Self.HasAbilities<Self.NoAbilities, u64>>();
        return;
    }

    f3<T1: drop, T2: copy, T3: store, T4: key>() { label b0: return; }
    f4() {
    label b0:
        Self.f3< Self.HasDrop<Self.NoAbilities, u64>,
                 Self.HasCopy<Self.NoAbilities, u64>,
                 Self.HasStore<Self.NoAbilities, u64>,
                 Self.HasKey<Self.NoAbilities, u64>
               >();
        return;
    }
}
