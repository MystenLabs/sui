//# publish
module 0x2.O {
    enum Foo<T> { V { x: T } }

    foo(x: &mut Self.Foo<u64>) {
    label b0:
        // mut ref is not allowed
        variant_switch Foo move(x) {
            V : b1,
        };
    label b1:
        return;
    }
}

//# publish
module 0x2.O {
    enum Foo<T> { V { x: T } }

    foo(x: Self.Foo<u64>) {
    label b0:
        // by value is not allowed
        variant_switch Foo move(x) {
            V : b1,
        };
    label b1:
        return;
    }
}

//# publish
module 0x2.O {
    enum Foo<T> { V { x: T } }

    foo(x: u64) {
    label b0:
        // non-enum is not allowed
        variant_switch Foo move(x) {
            V : b1,
        };
    label b1:
        return;
    }
}

//# publish
module 0x2.O {
    enum Foo<T> { V { x: T } }

    foo(x: &u64) {
    label b0:
        // non-enum is not allowed
        variant_switch Foo move(x) {
            V : b1,
        };
    label b1:
        return;
    }
}

//# publish
module 0x2.O {
    enum Foo<T> { V { x: T } }

    foo(x: &mut u64) {
    label b0:
        // non-enum is not allowed
        variant_switch Foo move(x) {
            V : b1,
        };
    label b1:
        return;
    }
}


//# publish
module 0x2.O {
    struct Bar { x: bool }

    enum Foo<T> { V { x: T } }

    foo(x: &Self.Bar) {
    label b0:
        // type mismatch
        variant_switch Foo move(x) {
            V : b1,
        };
    label b1:
        return;
    }
}

//# publish
module 0x2.O {
    struct Bar { x: bool }

    enum Foo<T> { V { x: T } }

    foo(x: &mut Self.Bar) {
    label b0:
        // type mismatch and invalid operand
        variant_switch Foo move(x) {
            V : b1,
        };
    label b1:
        return;
    }
}

//# publish
module 0x2.P {
    enum Foo<T> { V { x: T } }
    enum Bar<T> { V { x: T } }

    foo(x: &Self.Bar<u64>) {
    label b0:
        // valid
        variant_switch Bar move(x) {
            V : b1,
        };
    label b1:
        return;
    }
}

//# publish
module 0x2.P {
    enum Foo<T> { V { x: T } }
    enum Bar<T> { V { x: T } }

    foo(x: &Self.Foo<u64>) {
    label b0:
        // type mismatch
        variant_switch Bar move(x) {
            V : b1,
        };
    label b1:
        return;
    }
}

//# publish
module 0x2.P {
    enum Foo<T> { V { x: T } }
    enum Bar { V { x: u64 } }

    foo(x: &Self.Foo<u64>) {
    label b0:
        // type mismatch
        variant_switch Bar move(x) {
            V : b1,
        };
    label b1:
        return;
    }
}

//# publish
module 0x2.P {
    enum Foo<T> { V { x: T } }
    enum Bar { V { x: u64 } }

    foo(x: &Self.Bar) {
    label b0:
        // type mismatch
        variant_switch Foo move(x) {
            V : b1,
        };
    label b1:
        return;
    }
}
