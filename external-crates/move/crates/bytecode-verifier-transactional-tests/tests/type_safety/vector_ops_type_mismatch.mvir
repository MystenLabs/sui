//# run
module 0x42.m {

entry foo() {
    let v: vector<u8>;
label b0:
    v = vec_pack_0<bool>();
    return;
}

}
//# run
module 0x42.m {

entry foo() {
    let v: vector<u8>;
    let v_mut: &mut vector<bool>;
label b0:
    v = vec_pack_0<u8>();
    v_mut = &mut v;

    return;
}

}
//# run
module 0x42.m {

entry foo() {
    let v: vector<u8>;
    let v_imm: &vector<u8>;
    let v_len: u8;
label b0:
    v = vec_pack_0<u8>();
    v_imm = &v;
    v_len = vec_len<u8>(move(v_imm));

    return;
}

}
//# run
module 0x42.m {

entry foo() {
    let v: vector<u8>;
    let v_mut: &mut vector<u8>;
    let e: u64;
label b0:
    e = 0;
    v = vec_pack_0<u8>();
    v_mut = &mut v;
    vec_push_back<u8>(move(v_mut), move(e));

    return;
}

}
//# run
module 0x42.m {

entry foo() {
    let v: vector<u8>;
    let v_mut: &mut vector<u8>;
    let e: u64;
label b0:
    v = vec_pack_0<u8>();
    v_mut = &mut v;
    vec_push_back<u8>(copy(v_mut), 0);

    e = vec_pop_back<u8>(move(v_mut));
    return;
}

}
//# run
module 0x42.m {

entry foo() {
    let v: vector<u8>;
    let v_mut: &mut vector<u8>;
    let i1: u8;
    let i2: u128;
label b0:
    i1 = 0;
    i2 = 1;
    v = vec_pack_0<u8>();
    v_mut = &mut v;
    vec_swap<u8>(move(v_mut), move(i1), move(i2));

    return;
}

}
// push int on the stack, then try to pack into vector of the wrong type
//# run
module 0x42.m {

entry foo() {
    let v: vector<bool>;
label b0:
    v = vec_pack_1<bool>(28u8);
    return;
}

}
// create vector<T>, try to unpack into different type
//# run
module 0x42.m {

entry foo() {
    let v: vector<u8>;
    let x: bool;
    let y: bool;
label b0:
    v = vec_pack_2<u8>(1u8, 0u8);
    x, y = vec_unpack_2<bool>(move(v));
    return;
}

}
