{
    // Don't bother looking for eslint configuration files in parent
    // directories; this is the root configuration.
    "root": true,

    // Instruct eslint to use a parser that can parse TypeScript.
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        // Match the ECMAScript standard specified in our TypeScript config.
        "ecmaVersion": 2021,
        // Use ECMAScript modules.
        "sourceType": "module",
        // To type-check while linting, specify the TypeScript compiler be
        // invoked from the same directory as this lint configuration file,
        // using the TypeScript configuration file at the "project" path.
        "tsconfigRootDir": ".",
        "project": [
            "**/tsconfig.json"
        ]
    },

    // Specify the environment in which our JavaScript will run.
    "env": {
        // The Node.js runtime environment provides globals such as `__dirname`.
        "node": true
    },

    // Plug-in eslint rules from @typescript-eslint.
    "plugins": [
        "@typescript-eslint",
        "eslint-plugin-tsdoc"
    ],
    // Use the core rules that eslint and @typescript-eslint recommend.
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking"
    ],
    // Enable some additional rules beyond the recommended ones.
    // For more information, see: https://eslint.org/docs/rules/
    "rules": {
        // The following are in the "possible errors" category of eslint rules.
        "no-promise-executor-return": "warn",
        "no-template-curly-in-string": "warn",
        "no-unreachable-loop": "warn",
        "no-unsafe-optional-chaining": "warn",
        "no-useless-backreference": "warn",
        "require-atomic-updates": "warn",

        // The following are in the "best practices" category of eslint rules.
        "array-callback-return": "warn",
        "block-scoped-var": "warn",
        "class-methods-use-this": "warn",
        "consistent-return": "warn",
        "curly": "warn",
        "default-case": "warn",
        "default-case-last": "warn",
        "dot-location": "warn",
        "eqeqeq": "warn",
        "guard-for-in": "warn",
        "no-constructor-return": "warn",
        "no-else-return": "warn",
        "no-eq-null": "warn",
        "no-eval": "warn",
        "no-extend-native": "warn",
        "no-extra-bind": "warn",
        "no-extra-label": "warn",
        "no-floating-decimal": "warn",
        "no-implicit-coercion": "warn",
        "no-implicit-globals": "warn",
        "no-labels": "warn",
        "no-lone-blocks": "warn",
        "no-multi-spaces": "warn",
        "no-nonoctal-decimal-escape": "warn",
        "no-octal-escape": "warn",
        "no-param-reassign": "warn",
        "no-return-assign": "warn",
        "no-script-url": "warn",
        "no-self-compare": "warn",
        "no-sequences": "warn",
        "no-throw-literal": "warn",
        "no-unmodified-loop-condition": "warn",
        "no-useless-call": "warn",
        "no-useless-concat": "warn",
        "no-useless-return": "warn",
        "prefer-promise-reject-errors": "warn",
        "radix": "warn",

        // The following are in the "stylistic issues" category of eslint rules.
        "array-bracket-spacing": "warn",
        "array-element-newline": [
            "warn",
            "consistent"
        ],
        "block-spacing": "warn",
        "capitalized-comments": [
            "warn",
            "always",
            {
                "ignoreConsecutiveComments": true
            }
        ],
        "comma-style": "warn",
        "computed-property-spacing": "warn",
        "eol-last": "warn",
        "function-call-argument-newline": ["warn", "consistent"],
        "function-paren-newline": ["warn", "consistent"],
        "key-spacing": "warn",
        "linebreak-style": "off", // We use different linebreak styles. ref https://eslint.org/docs/latest/rules/linebreak-style
        "max-len": [
            "warn",
            {
                "code": 120,
                "ignoreUrls": true
            }
        ],
        "new-cap": "warn",
        "new-parens": "warn",
        "no-lonely-if": "warn",
        "no-mixed-operators": "warn",
        "no-multi-assign": "warn",
        "no-multiple-empty-lines": "warn",
        "no-negated-condition": "warn",
        "no-new-object": "warn",
        "no-tabs": "warn",
        "no-trailing-spaces": "warn",
        "no-unneeded-ternary": "warn",
        "no-whitespace-before-property": "warn",
        "prefer-exponentiation-operator": "warn",
        "prefer-object-spread": "warn",
        "semi-spacing": "warn",
        "semi-style": "warn",
        "space-in-parens": "warn",
        "spaced-comment": "warn",
        "switch-colon-spacing": "warn",
        "unicode-bom": "warn",

        // The following are @typescript-eslint rules. For more information, see:
        // * All @typescript-eslint rules: https://github.com/typescript-eslint/typescript-eslint/tree/v4.31.1/packages/eslint-plugin/docs/rules
        // * The rules included in @typescript-eslint/recommended: https://github.com/typescript-eslint/typescript-eslint/blob/v4.31.1/packages/eslint-plugin/src/configs/recommended.ts
        // * The rules included in @typescript-eslint/recommended-requiring-type-checking: https://github.com/typescript-eslint/typescript-eslint/blob/v4.31.1/packages/eslint-plugin/src/configs/recommended-requiring-type-checking.ts
        "@typescript-eslint/ban-tslint-comment": "warn",
        "@typescript-eslint/brace-style": "warn",
        "@typescript-eslint/comma-dangle": [
            "warn",
            "always-multiline"
        ],
        "@typescript-eslint/comma-spacing": "warn",
        "@typescript-eslint/consistent-indexed-object-style": "warn",
        "@typescript-eslint/consistent-type-assertions": "warn",
        "@typescript-eslint/consistent-type-definitions": "warn",
        "@typescript-eslint/consistent-type-imports": "warn",
        "@typescript-eslint/default-param-last": "warn",
        "@typescript-eslint/dot-notation": "warn",
        "@typescript-eslint/explicit-function-return-type": "warn",
        "@typescript-eslint/func-call-spacing": "warn",
        "@typescript-eslint/keyword-spacing": "warn",
        "@typescript-eslint/lines-between-class-members": "warn",
        "@typescript-eslint/member-delimiter-style": "warn",
        "@typescript-eslint/naming-convention": "off",
        "@typescript-eslint/no-base-to-string": "warn",
        "@typescript-eslint/no-confusing-non-null-assertion": "warn",
        "@typescript-eslint/no-dynamic-delete": "warn",
        "@typescript-eslint/no-extra-parens": "warn",
        "@typescript-eslint/no-extraneous-class": "warn",
        "@typescript-eslint/no-invalid-this": "warn",
        "@typescript-eslint/no-invalid-void-type": "warn",
        "@typescript-eslint/no-loop-func": "warn",
        "@typescript-eslint/no-loss-of-precision": "warn",
        "@typescript-eslint/no-meaningless-void-operator": "warn",
        "@typescript-eslint/no-redeclare": "warn",
        "@typescript-eslint/no-require-imports": "warn",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
        "@typescript-eslint/no-unnecessary-condition": "warn",
        "@typescript-eslint/no-unnecessary-qualifier": "warn",
        "@typescript-eslint/no-unnecessary-type-arguments": "warn",
        "@typescript-eslint/no-unnecessary-type-constraint": "warn",
        "@typescript-eslint/no-unused-expressions": "warn",
        "@typescript-eslint/no-unused-vars": "warn",
        "@typescript-eslint/no-use-before-define": "warn",
        "@typescript-eslint/non-nullable-type-assertion-style": "warn",
        "@typescript-eslint/object-curly-spacing": ["warn", "always"],
        "@typescript-eslint/prefer-for-of": "warn",
        "@typescript-eslint/prefer-function-type": "warn",
        "@typescript-eslint/prefer-includes": "warn",
        "@typescript-eslint/prefer-literal-enum-member": "warn",
        "@typescript-eslint/prefer-nullish-coalescing": "warn",
        "@typescript-eslint/prefer-optional-chain": "warn",
        "@typescript-eslint/prefer-readonly": "warn",
        "@typescript-eslint/prefer-reduce-type-parameter": "warn",
        "@typescript-eslint/prefer-string-starts-ends-with": "warn",
        "@typescript-eslint/promise-function-async": "warn",
        "@typescript-eslint/quotes": ["warn", "single"],
        "@typescript-eslint/require-array-sort-compare": "warn",
        "@typescript-eslint/return-await": "warn",
        "@typescript-eslint/semi": "warn",
        "@typescript-eslint/space-before-function-paren": [
            "warn",
            {
                "anonymous": "never",
                "named": "never",
                "asyncArrow": "always"
            }
        ],
        "@typescript-eslint/strict-boolean-expressions": "warn",
        "@typescript-eslint/switch-exhaustiveness-check": "warn",
        "@typescript-eslint/unified-signatures": "warn",

        // The following are eslint-plugin-tsdoc rules:
        "tsdoc/syntax": "warn",

        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/type-annotation-spacing": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-unsafe-argument": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-enum-comparison": "off",
        "@typescript-eslint/restrict-template-expressions": "off",
        "@typescript-eslint/array-type": "off"
    }
}
