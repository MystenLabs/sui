== colon_colon.move ========================================================
-- test 0 -------------------
use line: 15, use_col: 68
Struct 'CompletionStruct'
Struct 'SomeStruct'
Enum 'SomeEnum'
Enum 'TargEnum'

-- test 1 -------------------
use line: 21, use_col: 22
Unit '0x1'
Unit '0xA'
Unit '0xCAFE'
Unit 'Completion'
Unit 'std'
Module 'CC'
Module 'Self'
Module 'option'
Module 'vector'
Struct 'CompletionStruct'
Struct 'Option'
Enum 'SE'
Constant 'SOME_CONST'
Enum 'SomeEnum'
Struct 'SomeStruct'
Enum 'TargEnum'
Method 'complete_chains()'
    INSERT TEXT: 'complete_chains(${1:s})'
    TARGET     : '(Completion::colon_colon::complete_chains)'
    TYPE       : 'fun (SomeStruct)'
Method 'multi_colon_colon()'
    INSERT TEXT: 'multi_colon_colon()'
    TARGET     : '(Completion::colon_colon::multi_colon_colon)'
    TYPE       : 'fun ()'
Method 'one_colon_colon()'
    INSERT TEXT: 'one_colon_colon()'
    TARGET     : '(Completion::colon_colon::one_colon_colon)'
    TYPE       : 'fun ()'
Method 'sbar()'
    INSERT TEXT: 'sbar(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::colon_colon::sbar)'
    TYPE       : 'fun (u64, SomeStruct)'
Method 'sbaz()'
    INSERT TEXT: 'sbaz()'
    TARGET     : '(Completion::colon_colon::sbaz)'
    TYPE       : 'fun ()'
Method 'single_ident()'
    INSERT TEXT: 'single_ident()'
    TARGET     : '(Completion::colon_colon::single_ident)'
    TYPE       : 'fun ()'
Method 'targ_chain()'
    INSERT TEXT: 'targ_chain()'
    TARGET     : '(Completion::colon_colon::targ_chain)'
    TYPE       : 'fun ()'
Method 'targ_type()'
    INSERT TEXT: 'targ_type(${1:p})'
    TARGET     : '(Completion::colon_colon::targ_type)'
    TYPE       : 'fun <SOME_TYPE>(SOME_TYPE)'

-- test 2 -------------------
use line: 21, use_col: 34
Module 'colon_colon'
Module 'dot'
Module 'init'
Module 'init_otw'
Module 'macro_dot'
Module 'object'
Module 'other_mod_dot'

-- test 3 -------------------
use line: 21, use_col: 47
Method 'complete_chains()'
    INSERT TEXT: 'complete_chains(${1:s})'
    TARGET     : '(Completion::colon_colon::complete_chains)'
    TYPE       : 'fun (SomeStruct)'
Method 'multi_colon_colon()'
    INSERT TEXT: 'multi_colon_colon()'
    TARGET     : '(Completion::colon_colon::multi_colon_colon)'
    TYPE       : 'fun ()'
Method 'one_colon_colon()'
    INSERT TEXT: 'one_colon_colon()'
    TARGET     : '(Completion::colon_colon::one_colon_colon)'
    TYPE       : 'fun ()'
Method 'sbar()'
    INSERT TEXT: 'sbar(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::colon_colon::sbar)'
    TYPE       : 'fun (u64, SomeStruct)'
Method 'sbaz()'
    INSERT TEXT: 'sbaz()'
    TARGET     : '(Completion::colon_colon::sbaz)'
    TYPE       : 'fun ()'
Method 'single_ident()'
    INSERT TEXT: 'single_ident()'
    TARGET     : '(Completion::colon_colon::single_ident)'
    TYPE       : 'fun ()'
Method 'targ_chain()'
    INSERT TEXT: 'targ_chain()'
    TARGET     : '(Completion::colon_colon::targ_chain)'
    TYPE       : 'fun ()'
Method 'targ_type()'
    INSERT TEXT: 'targ_type(${1:p})'
    TARGET     : '(Completion::colon_colon::targ_type)'
    TYPE       : 'fun <SOME_TYPE>(SOME_TYPE)'
Struct 'CompletionStruct'
Struct 'SomeStruct'
Enum 'SomeEnum'
Enum 'TargEnum'
Constant 'SOME_CONST'

-- test 4 -------------------
use line: 21, use_col: 57
EnumMember 'SomeNamedVariant{}'
    INSERT TEXT: 'SomeNamedVariant{${1:name1}, ${2:name2}}'
EnumMember 'SomePositionalVariant()'
    INSERT TEXT: 'SomePositionalVariant(${1}, ${2})'
EnumMember 'SomeVariant'
    INSERT TEXT: 'SomeVariant{}'

-- test 5 -------------------
use line: 22, use_col: 11
Unit '0x1'
Unit '0xA'
Unit '0xCAFE'
Unit 'Completion'
Unit 'std'

-- test 6 -------------------
use line: 22, use_col: 46
EnumMember 'SomeNamedVariant{}'
    INSERT TEXT: 'SomeNamedVariant{${1:name1}, ${2:name2}}'
EnumMember 'SomePositionalVariant()'
    INSERT TEXT: 'SomePositionalVariant(${1}, ${2})'
EnumMember 'SomeVariant'
    INSERT TEXT: 'SomeVariant{}'

-- test 7 -------------------
use line: 23, use_col: 25
Method 'aliased()'
    INSERT TEXT: 'aliased()'
    TARGET     : '(Completion::dot::aliased)'
    TYPE       : 'fun ()'
Method 'bar()'
    INSERT TEXT: 'bar(${1:s}, ${2:_param1}, ${3:_param2})'
    TARGET     : '(Completion::dot::bar)'
    TYPE       : 'fun <T>(SomeStruct, u64, T): SomeStruct'
Method 'foo()'
    INSERT TEXT: 'foo(${1:_s})'
    TARGET     : '(Completion::dot::foo)'
    TYPE       : 'fun (SomeStruct)'
Method 'shadowed()'
    INSERT TEXT: 'shadowed()'
    TARGET     : '(Completion::dot::shadowed)'
    TYPE       : 'fun ()'

-- test 8 -------------------
use line: 24, use_col: 9
Unit '0x1'
Unit '0xA'
Unit '0xCAFE'
Unit 'Completion'
Unit 'std'

-- test 9 -------------------
use line: 24, use_col: 40
EnumMember 'SomeNamedVariant{}'
    INSERT TEXT: 'SomeNamedVariant{${1:name1}, ${2:name2}}'
EnumMember 'SomePositionalVariant()'
    INSERT TEXT: 'SomePositionalVariant(${1}, ${2})'
EnumMember 'SomeVariant'
    INSERT TEXT: 'SomeVariant{}'

-- test 10 -------------------
use line: 25, use_col: 9
Unit '0x1'
Unit '0xA'
Unit '0xCAFE'
Unit 'Completion'
Unit 'std'
Module 'CC'
Module 'Self'
Module 'option'
Module 'vector'
Method 'complete_chains()'
    INSERT TEXT: 'complete_chains(${1:s})'
    TARGET     : '(Completion::colon_colon::complete_chains)'
    TYPE       : 'fun (SomeStruct)'
Method 'multi_colon_colon()'
    INSERT TEXT: 'multi_colon_colon()'
    TARGET     : '(Completion::colon_colon::multi_colon_colon)'
    TYPE       : 'fun ()'
Method 'one_colon_colon()'
    INSERT TEXT: 'one_colon_colon()'
    TARGET     : '(Completion::colon_colon::one_colon_colon)'
    TYPE       : 'fun ()'
Method 'sbar()'
    INSERT TEXT: 'sbar(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::colon_colon::sbar)'
    TYPE       : 'fun (u64, SomeStruct)'
Method 'sbaz()'
    INSERT TEXT: 'sbaz()'
    TARGET     : '(Completion::colon_colon::sbaz)'
    TYPE       : 'fun ()'
Method 'single_ident()'
    INSERT TEXT: 'single_ident()'
    TARGET     : '(Completion::colon_colon::single_ident)'
    TYPE       : 'fun ()'
Method 'targ_chain()'
    INSERT TEXT: 'targ_chain()'
    TARGET     : '(Completion::colon_colon::targ_chain)'
    TYPE       : 'fun ()'
Method 'targ_type()'
    INSERT TEXT: 'targ_type(${1:p})'
    TARGET     : '(Completion::colon_colon::targ_type)'
    TYPE       : 'fun <SOME_TYPE>(SOME_TYPE)'

-- test 11 -------------------
use line: 25, use_col: 17
Method 'and!()'
    INSERT TEXT: 'and!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::and)'
    TYPE       : 'fun <$T, $U>(Option, |$T| -> Option): Option'
Method 'and_ref!()'
    INSERT TEXT: 'and_ref!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::and_ref)'
    TYPE       : 'fun <$T, $U>(&Option, |&$T| -> Option): Option'
Method 'borrow()'
    INSERT TEXT: 'borrow(${1:t})'
    TARGET     : '(std::option::borrow)'
    TYPE       : 'fun <Element>(&Option): &Element'
Method 'borrow_mut()'
    INSERT TEXT: 'borrow_mut(${1:t})'
    TARGET     : '(std::option::borrow_mut)'
    TYPE       : 'fun <Element>(&mut Option): &mut Element'
Method 'borrow_with_default()'
    INSERT TEXT: 'borrow_with_default(${1:t}, ${2:default_ref})'
    TARGET     : '(std::option::borrow_with_default)'
    TYPE       : 'fun <Element>(&Option, &Element): &Element'
Method 'contains()'
    INSERT TEXT: 'contains(${1:t}, ${2:e_ref})'
    TARGET     : '(std::option::contains)'
    TYPE       : 'fun <Element>(&Option, &Element): bool'
Method 'destroy!()'
    INSERT TEXT: 'destroy!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::destroy)'
    TYPE       : 'fun <$T>(Option, |$T| -> ())'
Method 'destroy_none()'
    INSERT TEXT: 'destroy_none(${1:t})'
    TARGET     : '(std::option::destroy_none)'
    TYPE       : 'fun <Element>(Option)'
Method 'destroy_or!()'
    INSERT TEXT: 'destroy_or!(${1:o}, ${2:default})'
    TARGET     : '(std::option::destroy_or)'
    TYPE       : 'fun <$T>(Option, $T): $T'
Method 'destroy_some()'
    INSERT TEXT: 'destroy_some(${1:t})'
    TARGET     : '(std::option::destroy_some)'
    TYPE       : 'fun <Element>(Option): Element'
Method 'destroy_with_default()'
    INSERT TEXT: 'destroy_with_default(${1:t}, ${2:default})'
    TARGET     : '(std::option::destroy_with_default)'
    TYPE       : 'fun <Element>(Option, Element): Element'
Method 'do!()'
    INSERT TEXT: 'do!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::do)'
    TYPE       : 'fun <$T>(Option, |$T| -> ())'
Method 'do_mut!()'
    INSERT TEXT: 'do_mut!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::do_mut)'
    TYPE       : 'fun <$T>(&mut Option, |&mut $T| -> ())'
Method 'do_ref!()'
    INSERT TEXT: 'do_ref!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::do_ref)'
    TYPE       : 'fun <$T>(&Option, |&$T| -> ())'
Method 'extract()'
    INSERT TEXT: 'extract(${1:t})'
    TARGET     : '(std::option::extract)'
    TYPE       : 'fun <Element>(&mut Option): Element'
Method 'fill()'
    INSERT TEXT: 'fill(${1:t}, ${2:e})'
    TARGET     : '(std::option::fill)'
    TYPE       : 'fun <Element>(&mut Option, Element)'
Method 'filter!()'
    INSERT TEXT: 'filter!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::filter)'
    TYPE       : 'fun <$T>(Option, |&$T| -> bool): Option'
Method 'get_with_default()'
    INSERT TEXT: 'get_with_default(${1:t}, ${2:default})'
    TARGET     : '(std::option::get_with_default)'
    TYPE       : 'fun <Element>(&Option, Element): Element'
Method 'is_none()'
    INSERT TEXT: 'is_none(${1:t})'
    TARGET     : '(std::option::is_none)'
    TYPE       : 'fun <Element>(&Option): bool'
Method 'is_some()'
    INSERT TEXT: 'is_some(${1:t})'
    TARGET     : '(std::option::is_some)'
    TYPE       : 'fun <Element>(&Option): bool'
Method 'is_some_and!()'
    INSERT TEXT: 'is_some_and!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::is_some_and)'
    TYPE       : 'fun <$T>(&Option, |&$T| -> bool): bool'
Method 'map!()'
    INSERT TEXT: 'map!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::map)'
    TYPE       : 'fun <$T, $U>(Option, |$T| -> $U): Option'
Method 'map_ref!()'
    INSERT TEXT: 'map_ref!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::map_ref)'
    TYPE       : 'fun <$T, $U>(&Option, |&$T| -> $U): Option'
Method 'none()'
    INSERT TEXT: 'none()'
    TARGET     : '(std::option::none)'
    TYPE       : 'fun <Element>(): Option'
Method 'or!()'
    INSERT TEXT: 'or!(${1:o}, ${2:default})'
    TARGET     : '(std::option::or)'
    TYPE       : 'fun <$T>(Option, Option): Option'
Method 'some()'
    INSERT TEXT: 'some(${1:e})'
    TARGET     : '(std::option::some)'
    TYPE       : 'fun <Element>(Element): Option'
Method 'swap()'
    INSERT TEXT: 'swap(${1:t}, ${2:e})'
    TARGET     : '(std::option::swap)'
    TYPE       : 'fun <Element>(&mut Option, Element): Element'
Method 'swap_or_fill()'
    INSERT TEXT: 'swap_or_fill(${1:t}, ${2:e})'
    TARGET     : '(std::option::swap_or_fill)'
    TYPE       : 'fun <Element>(&mut Option, Element): Option'
Method 'to_vec()'
    INSERT TEXT: 'to_vec(${1:t})'
    TARGET     : '(std::option::to_vec)'
    TYPE       : 'fun <Element>(Option): vector<Element>'

-- test 12 -------------------
use line: 26, use_col: 20
Method 'sha2_256()'
    INSERT TEXT: 'sha2_256(${1:data})'
    TARGET     : '(std::hash::sha2_256)'
    TYPE       : 'fun (vector<u8>): vector<u8>'
Method 'sha3_256()'
    INSERT TEXT: 'sha3_256(${1:data})'
    TARGET     : '(std::hash::sha3_256)'
    TYPE       : 'fun (vector<u8>): vector<u8>'

-- test 13 -------------------
use line: 27, use_col: 9
Unit '0x1'
Unit '0xA'
Unit '0xCAFE'
Unit 'Completion'
Unit 'std'
Module 'CC'
Module 'Self'
Module 'option'
Module 'vector'
Struct 'CompletionStruct'
Struct 'Option'
Enum 'SE'
Constant 'SOME_CONST'
Enum 'SomeEnum'
Struct 'SomeStruct'
Enum 'TargEnum'
Method 'complete_chains()'
    INSERT TEXT: 'complete_chains(${1:s})'
    TARGET     : '(Completion::colon_colon::complete_chains)'
    TYPE       : 'fun (SomeStruct)'
Method 'multi_colon_colon()'
    INSERT TEXT: 'multi_colon_colon()'
    TARGET     : '(Completion::colon_colon::multi_colon_colon)'
    TYPE       : 'fun ()'
Method 'one_colon_colon()'
    INSERT TEXT: 'one_colon_colon()'
    TARGET     : '(Completion::colon_colon::one_colon_colon)'
    TYPE       : 'fun ()'
Method 'sbar()'
    INSERT TEXT: 'sbar(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::colon_colon::sbar)'
    TYPE       : 'fun (u64, SomeStruct)'
Method 'sbaz()'
    INSERT TEXT: 'sbaz()'
    TARGET     : '(Completion::colon_colon::sbaz)'
    TYPE       : 'fun ()'
Method 'single_ident()'
    INSERT TEXT: 'single_ident()'
    TARGET     : '(Completion::colon_colon::single_ident)'
    TYPE       : 'fun ()'
Method 'targ_chain()'
    INSERT TEXT: 'targ_chain()'
    TARGET     : '(Completion::colon_colon::targ_chain)'
    TYPE       : 'fun ()'
Method 'targ_type()'
    INSERT TEXT: 'targ_type(${1:p})'
    TARGET     : '(Completion::colon_colon::targ_type)'
    TYPE       : 'fun <SOME_TYPE>(SOME_TYPE)'

-- test 14 -------------------
use line: 27, use_col: 23
EnumMember 'SomeNamedVariant{}'
    INSERT TEXT: 'SomeNamedVariant{${1:name1}, ${2:name2}}'
EnumMember 'SomePositionalVariant()'
    INSERT TEXT: 'SomePositionalVariant(${1}, ${2})'
EnumMember 'SomeVariant'
    INSERT TEXT: 'SomeVariant{}'

-- test 15 -------------------
use line: 28, use_col: 13
Method 'complete_chains()'
    INSERT TEXT: 'complete_chains(${1:s})'
    TARGET     : '(Completion::colon_colon::complete_chains)'
    TYPE       : 'fun (SomeStruct)'
Method 'multi_colon_colon()'
    INSERT TEXT: 'multi_colon_colon()'
    TARGET     : '(Completion::colon_colon::multi_colon_colon)'
    TYPE       : 'fun ()'
Method 'one_colon_colon()'
    INSERT TEXT: 'one_colon_colon()'
    TARGET     : '(Completion::colon_colon::one_colon_colon)'
    TYPE       : 'fun ()'
Method 'sbar()'
    INSERT TEXT: 'sbar(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::colon_colon::sbar)'
    TYPE       : 'fun (u64, SomeStruct)'
Method 'sbaz()'
    INSERT TEXT: 'sbaz()'
    TARGET     : '(Completion::colon_colon::sbaz)'
    TYPE       : 'fun ()'
Method 'single_ident()'
    INSERT TEXT: 'single_ident()'
    TARGET     : '(Completion::colon_colon::single_ident)'
    TYPE       : 'fun ()'
Method 'targ_chain()'
    INSERT TEXT: 'targ_chain()'
    TARGET     : '(Completion::colon_colon::targ_chain)'
    TYPE       : 'fun ()'
Method 'targ_type()'
    INSERT TEXT: 'targ_type(${1:p})'
    TARGET     : '(Completion::colon_colon::targ_type)'
    TYPE       : 'fun <SOME_TYPE>(SOME_TYPE)'

-- test 16 -------------------
use line: 29, use_col: 9
Unit '0x1'
Unit '0xA'
Unit '0xCAFE'
Unit 'Completion'
Unit 'std'
Module 'CC'
Module 'Self'
Module 'option'
Module 'vector'
Struct 'CompletionStruct'
Struct 'Option'
Enum 'SE'
Constant 'SOME_CONST'
Enum 'SomeEnum'
Struct 'SomeStruct'
Enum 'TargEnum'
Method 'complete_chains()'
    INSERT TEXT: 'complete_chains(${1:s})'
    TARGET     : '(Completion::colon_colon::complete_chains)'
    TYPE       : 'fun (SomeStruct)'
Method 'multi_colon_colon()'
    INSERT TEXT: 'multi_colon_colon()'
    TARGET     : '(Completion::colon_colon::multi_colon_colon)'
    TYPE       : 'fun ()'
Method 'one_colon_colon()'
    INSERT TEXT: 'one_colon_colon()'
    TARGET     : '(Completion::colon_colon::one_colon_colon)'
    TYPE       : 'fun ()'
Method 'sbar()'
    INSERT TEXT: 'sbar(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::colon_colon::sbar)'
    TYPE       : 'fun (u64, SomeStruct)'
Method 'sbaz()'
    INSERT TEXT: 'sbaz()'
    TARGET     : '(Completion::colon_colon::sbaz)'
    TYPE       : 'fun ()'
Method 'single_ident()'
    INSERT TEXT: 'single_ident()'
    TARGET     : '(Completion::colon_colon::single_ident)'
    TYPE       : 'fun ()'
Method 'targ_chain()'
    INSERT TEXT: 'targ_chain()'
    TARGET     : '(Completion::colon_colon::targ_chain)'
    TYPE       : 'fun ()'
Method 'targ_type()'
    INSERT TEXT: 'targ_type(${1:p})'
    TARGET     : '(Completion::colon_colon::targ_type)'
    TYPE       : 'fun <SOME_TYPE>(SOME_TYPE)'

-- test 17 -------------------
use line: 33, use_col: 33
Unit '0x1'
Unit '0xA'
Unit '0xCAFE'
Unit 'Completion'
Unit 'std'
Module 'CC'
Module 'Self'
Module 'option'
Module 'vector'
Struct 'CompletionStruct'
Struct 'Option'
Enum 'SE'
Enum 'SomeEnum'
Struct 'SomeStruct'
Enum 'TargEnum'
Keyword 'u8'
Keyword 'u16'
Keyword 'u32'
Keyword 'u64'
Keyword 'u128'
Keyword 'u256'
Keyword 'bool'
Keyword 'vector'
Keyword 'address'

-- test 18 -------------------
use line: 33, use_col: 37
Struct 'CompletionStruct'
Struct 'SomeStruct'
Enum 'SomeEnum'
Enum 'TargEnum'

-- test 19 -------------------
use line: 34, use_col: 31
Unit '0x1'
Unit '0xA'
Unit '0xCAFE'
Unit 'Completion'
Unit 'std'
Keyword 'u8'
Keyword 'u16'
Keyword 'u32'
Keyword 'u64'
Keyword 'u128'
Keyword 'u256'
Keyword 'bool'
Keyword 'vector'
Keyword 'address'

-- test 20 -------------------
use line: 38, use_col: 9
Unit '0x1'
Unit '0xA'
Unit '0xCAFE'
Unit 'Completion'
Unit 'std'
Module 'Self'
Module 'option'
Module 'vector'
Struct 'CompletionStruct'
Struct 'Option'
Constant 'SOME_CONST'
Enum 'SomeEnum'
Struct 'SomeStruct'
Enum 'TargEnum'
Method 'complete_chains()'
    INSERT TEXT: 'complete_chains(${1:s})'
    TARGET     : '(Completion::colon_colon::complete_chains)'
    TYPE       : 'fun (SomeStruct)'
Method 'multi_colon_colon()'
    INSERT TEXT: 'multi_colon_colon()'
    TARGET     : '(Completion::colon_colon::multi_colon_colon)'
    TYPE       : 'fun ()'
Method 'one_colon_colon()'
    INSERT TEXT: 'one_colon_colon()'
    TARGET     : '(Completion::colon_colon::one_colon_colon)'
    TYPE       : 'fun ()'
Method 'sbar()'
    INSERT TEXT: 'sbar(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::colon_colon::sbar)'
    TYPE       : 'fun (u64, SomeStruct)'
Method 'sbaz()'
    INSERT TEXT: 'sbaz()'
    TARGET     : '(Completion::colon_colon::sbaz)'
    TYPE       : 'fun ()'
Method 'single_ident()'
    INSERT TEXT: 'single_ident()'
    TARGET     : '(Completion::colon_colon::single_ident)'
    TYPE       : 'fun ()'
Method 'targ_chain()'
    INSERT TEXT: 'targ_chain()'
    TARGET     : '(Completion::colon_colon::targ_chain)'
    TYPE       : 'fun ()'
Method 'targ_type()'
    INSERT TEXT: 'targ_type(${1:p})'
    TARGET     : '(Completion::colon_colon::targ_type)'
    TYPE       : 'fun <SOME_TYPE>(SOME_TYPE)'

-- test 21 -------------------
use line: 55, use_col: 26
Struct 'CompletionStruct'
Struct 'SomeStruct'
Enum 'SomeEnum'
Enum 'TargEnum'

-- test 22 -------------------
use line: 55, use_col: 39
EnumMember 'Variant{}'
    INSERT TEXT: 'Variant{${1:field}}'

-- test 23 -------------------
use line: 59, use_col: 21
Unit '0x1'
Unit '0xA'
Unit '0xCAFE'
Unit 'Completion'
Unit 'std'
Module 'Self'
Module 'option'
Module 'vector'
Struct 'CompletionStruct'
Struct 'Option'
Enum 'SomeEnum'
Struct 'SomeStruct'
Enum 'TargEnum'
Keyword 'u8'
Keyword 'u16'
Keyword 'u32'
Keyword 'u64'
Keyword 'u128'
Keyword 'u256'
Keyword 'bool'
Keyword 'vector'
Keyword 'address'
TypeParameter 'SOME_TYPE'

-- test 24 -------------------
use line: 21, use_col: 33
Module 'colon_colon'
Module 'dot'
Module 'init'
Module 'init_otw'
Module 'macro_dot'
Module 'object'
Module 'other_mod_dot'

-- test 25 -------------------
use line: 21, use_col: 46
Method 'complete_chains()'
    INSERT TEXT: 'complete_chains(${1:s})'
    TARGET     : '(Completion::colon_colon::complete_chains)'
    TYPE       : 'fun (SomeStruct)'
Method 'multi_colon_colon()'
    INSERT TEXT: 'multi_colon_colon()'
    TARGET     : '(Completion::colon_colon::multi_colon_colon)'
    TYPE       : 'fun ()'
Method 'one_colon_colon()'
    INSERT TEXT: 'one_colon_colon()'
    TARGET     : '(Completion::colon_colon::one_colon_colon)'
    TYPE       : 'fun ()'
Method 'sbar()'
    INSERT TEXT: 'sbar(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::colon_colon::sbar)'
    TYPE       : 'fun (u64, SomeStruct)'
Method 'sbaz()'
    INSERT TEXT: 'sbaz()'
    TARGET     : '(Completion::colon_colon::sbaz)'
    TYPE       : 'fun ()'
Method 'single_ident()'
    INSERT TEXT: 'single_ident()'
    TARGET     : '(Completion::colon_colon::single_ident)'
    TYPE       : 'fun ()'
Method 'targ_chain()'
    INSERT TEXT: 'targ_chain()'
    TARGET     : '(Completion::colon_colon::targ_chain)'
    TYPE       : 'fun ()'
Method 'targ_type()'
    INSERT TEXT: 'targ_type(${1:p})'
    TARGET     : '(Completion::colon_colon::targ_type)'
    TYPE       : 'fun <SOME_TYPE>(SOME_TYPE)'
Struct 'CompletionStruct'
Struct 'SomeStruct'
Enum 'SomeEnum'
Enum 'TargEnum'
Constant 'SOME_CONST'

-- test 26 -------------------
use line: 21, use_col: 56
EnumMember 'SomeNamedVariant{}'
    INSERT TEXT: 'SomeNamedVariant{${1:name1}, ${2:name2}}'
EnumMember 'SomePositionalVariant()'
    INSERT TEXT: 'SomePositionalVariant(${1}, ${2})'
EnumMember 'SomeVariant'
    INSERT TEXT: 'SomeVariant{}'

-- test 27 -------------------
use line: 25, use_col: 16
Method 'and!()'
    INSERT TEXT: 'and!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::and)'
    TYPE       : 'fun <$T, $U>(Option, |$T| -> Option): Option'
Method 'and_ref!()'
    INSERT TEXT: 'and_ref!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::and_ref)'
    TYPE       : 'fun <$T, $U>(&Option, |&$T| -> Option): Option'
Method 'borrow()'
    INSERT TEXT: 'borrow(${1:t})'
    TARGET     : '(std::option::borrow)'
    TYPE       : 'fun <Element>(&Option): &Element'
Method 'borrow_mut()'
    INSERT TEXT: 'borrow_mut(${1:t})'
    TARGET     : '(std::option::borrow_mut)'
    TYPE       : 'fun <Element>(&mut Option): &mut Element'
Method 'borrow_with_default()'
    INSERT TEXT: 'borrow_with_default(${1:t}, ${2:default_ref})'
    TARGET     : '(std::option::borrow_with_default)'
    TYPE       : 'fun <Element>(&Option, &Element): &Element'
Method 'contains()'
    INSERT TEXT: 'contains(${1:t}, ${2:e_ref})'
    TARGET     : '(std::option::contains)'
    TYPE       : 'fun <Element>(&Option, &Element): bool'
Method 'destroy!()'
    INSERT TEXT: 'destroy!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::destroy)'
    TYPE       : 'fun <$T>(Option, |$T| -> ())'
Method 'destroy_none()'
    INSERT TEXT: 'destroy_none(${1:t})'
    TARGET     : '(std::option::destroy_none)'
    TYPE       : 'fun <Element>(Option)'
Method 'destroy_or!()'
    INSERT TEXT: 'destroy_or!(${1:o}, ${2:default})'
    TARGET     : '(std::option::destroy_or)'
    TYPE       : 'fun <$T>(Option, $T): $T'
Method 'destroy_some()'
    INSERT TEXT: 'destroy_some(${1:t})'
    TARGET     : '(std::option::destroy_some)'
    TYPE       : 'fun <Element>(Option): Element'
Method 'destroy_with_default()'
    INSERT TEXT: 'destroy_with_default(${1:t}, ${2:default})'
    TARGET     : '(std::option::destroy_with_default)'
    TYPE       : 'fun <Element>(Option, Element): Element'
Method 'do!()'
    INSERT TEXT: 'do!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::do)'
    TYPE       : 'fun <$T>(Option, |$T| -> ())'
Method 'do_mut!()'
    INSERT TEXT: 'do_mut!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::do_mut)'
    TYPE       : 'fun <$T>(&mut Option, |&mut $T| -> ())'
Method 'do_ref!()'
    INSERT TEXT: 'do_ref!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::do_ref)'
    TYPE       : 'fun <$T>(&Option, |&$T| -> ())'
Method 'extract()'
    INSERT TEXT: 'extract(${1:t})'
    TARGET     : '(std::option::extract)'
    TYPE       : 'fun <Element>(&mut Option): Element'
Method 'fill()'
    INSERT TEXT: 'fill(${1:t}, ${2:e})'
    TARGET     : '(std::option::fill)'
    TYPE       : 'fun <Element>(&mut Option, Element)'
Method 'filter!()'
    INSERT TEXT: 'filter!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::filter)'
    TYPE       : 'fun <$T>(Option, |&$T| -> bool): Option'
Method 'get_with_default()'
    INSERT TEXT: 'get_with_default(${1:t}, ${2:default})'
    TARGET     : '(std::option::get_with_default)'
    TYPE       : 'fun <Element>(&Option, Element): Element'
Method 'is_none()'
    INSERT TEXT: 'is_none(${1:t})'
    TARGET     : '(std::option::is_none)'
    TYPE       : 'fun <Element>(&Option): bool'
Method 'is_some()'
    INSERT TEXT: 'is_some(${1:t})'
    TARGET     : '(std::option::is_some)'
    TYPE       : 'fun <Element>(&Option): bool'
Method 'is_some_and!()'
    INSERT TEXT: 'is_some_and!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::is_some_and)'
    TYPE       : 'fun <$T>(&Option, |&$T| -> bool): bool'
Method 'map!()'
    INSERT TEXT: 'map!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::map)'
    TYPE       : 'fun <$T, $U>(Option, |$T| -> $U): Option'
Method 'map_ref!()'
    INSERT TEXT: 'map_ref!(${1:o}, |${2}| ${3})'
    TARGET     : '(std::option::map_ref)'
    TYPE       : 'fun <$T, $U>(&Option, |&$T| -> $U): Option'
Method 'none()'
    INSERT TEXT: 'none()'
    TARGET     : '(std::option::none)'
    TYPE       : 'fun <Element>(): Option'
Method 'or!()'
    INSERT TEXT: 'or!(${1:o}, ${2:default})'
    TARGET     : '(std::option::or)'
    TYPE       : 'fun <$T>(Option, Option): Option'
Method 'some()'
    INSERT TEXT: 'some(${1:e})'
    TARGET     : '(std::option::some)'
    TYPE       : 'fun <Element>(Element): Option'
Method 'swap()'
    INSERT TEXT: 'swap(${1:t}, ${2:e})'
    TARGET     : '(std::option::swap)'
    TYPE       : 'fun <Element>(&mut Option, Element): Element'
Method 'swap_or_fill()'
    INSERT TEXT: 'swap_or_fill(${1:t}, ${2:e})'
    TARGET     : '(std::option::swap_or_fill)'
    TYPE       : 'fun <Element>(&mut Option, Element): Option'
Method 'to_vec()'
    INSERT TEXT: 'to_vec(${1:t})'
    TARGET     : '(std::option::to_vec)'
    TYPE       : 'fun <Element>(Option): vector<Element>'

-- test 28 -------------------
use line: 26, use_col: 19
Method 'sha2_256()'
    INSERT TEXT: 'sha2_256(${1:data})'
    TARGET     : '(std::hash::sha2_256)'
    TYPE       : 'fun (vector<u8>): vector<u8>'
Method 'sha3_256()'
    INSERT TEXT: 'sha3_256(${1:data})'
    TARGET     : '(std::hash::sha3_256)'
    TYPE       : 'fun (vector<u8>): vector<u8>'

-- test 29 -------------------
use line: 27, use_col: 23
EnumMember 'SomeNamedVariant{}'
    INSERT TEXT: 'SomeNamedVariant{${1:name1}, ${2:name2}}'
EnumMember 'SomePositionalVariant()'
    INSERT TEXT: 'SomePositionalVariant(${1}, ${2})'
EnumMember 'SomeVariant'
    INSERT TEXT: 'SomeVariant{}'

-- test 30 -------------------
use line: 41, use_col: 20
Module 'colon_colon'
Module 'dot'
Module 'init'
Module 'init_otw'
Module 'macro_dot'
Module 'object'
Module 'other_mod_dot'

-- test 31 -------------------
use line: 44, use_col: 43
EnumMember 'SomeNamedVariant{}'
    INSERT TEXT: 'SomeNamedVariant{${1:name1}, ${2:name2}}'
EnumMember 'SomePositionalVariant()'
    INSERT TEXT: 'SomePositionalVariant(${1}, ${2})'
EnumMember 'SomeVariant'
    INSERT TEXT: 'SomeVariant{}'

-- test 32 -------------------
use line: 55, use_col: 38
EnumMember 'Variant{}'
    INSERT TEXT: 'Variant{${1:field}}'

