== dot.move ========================================================
-- test 0 -------------------
use line: 15, use_col: 10
Method 'bar()'
    INSERT TEXT: 'bar(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::dot::bar)'
    TYPE       : 'fun <T>(SomeStruct, u64, T): SomeStruct'
Method 'foo()'
    INSERT TEXT: 'foo()'
    TARGET     : '(Completion::dot::foo)'
    TYPE       : 'fun (SomeStruct)'
Field 'some_field'
    INSERT TEXT: 'some_field'
    TYPE       : 'u64'

-- test 1 -------------------
use line: 21, use_col: 10
Method 'bak()'
    INSERT TEXT: 'bak(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::dot::bar)'
    TYPE       : 'fun <T>(SomeStruct, u64, T): SomeStruct'
Method 'foo()'
    INSERT TEXT: 'foo()'
    TARGET     : '(Completion::dot::foo)'
    TYPE       : 'fun (SomeStruct)'
Field 'some_field'
    INSERT TEXT: 'some_field'
    TYPE       : 'u64'

-- test 2 -------------------
use line: 27, use_col: 10
Method 'foo()'
    INSERT TEXT: 'foo(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::dot::bar)'
    TYPE       : 'fun <T>(SomeStruct, u64, T): SomeStruct'
Field 'some_field'
    INSERT TEXT: 'some_field'
    TYPE       : 'u64'

== macro_dot.move ========================================================
-- test 0 -------------------
use line: 8, use_col: 10
Method 'foo!()'
    INSERT TEXT: 'foo!(${1:_param1}, |${2}, ${3}| ${4}, ${5:_param3})'
    TARGET     : '(Completion::macro_dot::foo)'
    TYPE       : 'fun (SomeStruct, u64, |u64, u64| -> u64, u64)'
Method 'test()'
    INSERT TEXT: 'test()'
    TARGET     : '(Completion::macro_dot::test)'
    TYPE       : 'fun (SomeStruct)'

== other_mod_dot.move ========================================================
-- test 0 -------------------
use line: 4, use_col: 10
Method 'append()'
    INSERT TEXT: 'append(${1:other})'
    TARGET     : '(std::vector::append)'
    TYPE       : 'fun <Element>(&mut vector<Element>, vector<Element>)'
Method 'borrow()'
    INSERT TEXT: 'borrow(${1:i})'
    TARGET     : '(std::vector::borrow)'
    TYPE       : 'fun <Element>(&vector<Element>, u64): &Element'
Method 'borrow_mut()'
    INSERT TEXT: 'borrow_mut(${1:i})'
    TARGET     : '(std::vector::borrow_mut)'
    TYPE       : 'fun <Element>(&mut vector<Element>, u64): &mut Element'
Method 'contains()'
    INSERT TEXT: 'contains(${1:e})'
    TARGET     : '(std::vector::contains)'
    TYPE       : 'fun <Element>(&vector<Element>, &Element): bool'
Method 'destroy_empty()'
    INSERT TEXT: 'destroy_empty()'
    TARGET     : '(std::vector::destroy_empty)'
    TYPE       : 'fun <Element>(vector<Element>)'
Method 'index_of()'
    INSERT TEXT: 'index_of(${1:e})'
    TARGET     : '(std::vector::index_of)'
    TYPE       : 'fun <Element>(&vector<Element>, &Element): (bool, u64)'
Method 'insert()'
    INSERT TEXT: 'insert(${1:e}, ${2:i})'
    TARGET     : '(std::vector::insert)'
    TYPE       : 'fun <Element>(&mut vector<Element>, Element, u64)'
Method 'is_empty()'
    INSERT TEXT: 'is_empty()'
    TARGET     : '(std::vector::is_empty)'
    TYPE       : 'fun <Element>(&vector<Element>): bool'
Method 'length()'
    INSERT TEXT: 'length()'
    TARGET     : '(std::vector::length)'
    TYPE       : 'fun <Element>(&vector<Element>): u64'
Method 'pop_back()'
    INSERT TEXT: 'pop_back()'
    TARGET     : '(std::vector::pop_back)'
    TYPE       : 'fun <Element>(&mut vector<Element>): Element'
Method 'push_back()'
    INSERT TEXT: 'push_back(${1:e})'
    TARGET     : '(std::vector::push_back)'
    TYPE       : 'fun <Element>(&mut vector<Element>, Element)'
Method 'remove()'
    INSERT TEXT: 'remove(${1:i})'
    TARGET     : '(std::vector::remove)'
    TYPE       : 'fun <Element>(&mut vector<Element>, u64): Element'
Method 'reverse()'
    INSERT TEXT: 'reverse()'
    TARGET     : '(std::vector::reverse)'
    TYPE       : 'fun <Element>(&mut vector<Element>)'
Method 'swap()'
    INSERT TEXT: 'swap(${1:i}, ${2:j})'
    TARGET     : '(std::vector::swap)'
    TYPE       : 'fun <Element>(&mut vector<Element>, u64, u64)'
Method 'swap_remove()'
    INSERT TEXT: 'swap_remove(${1:i})'
    TARGET     : '(std::vector::swap_remove)'
    TYPE       : 'fun <Element>(&mut vector<Element>, u64): Element'

