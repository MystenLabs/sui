== dot.move ========================================================
-- test 0 -------------------
use line: 15, use_col: 10
Method 'bar()'
    INSERT TEXT: 'bar(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::dot::bar)'
    TYPE       : 'fun <T>(SomeStruct, u64, T): SomeStruct'
Method 'foo()'
    INSERT TEXT: 'foo()'
    TARGET     : '(Completion::dot::foo)'
    TYPE       : 'fun (SomeStruct)'
Field 'some_field'
    INSERT TEXT: 'some_field'
    TYPE       : 'u64'

-- test 1 -------------------
use line: 21, use_col: 10
Method 'bak()'
    INSERT TEXT: 'bak(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::dot::bar)'
    TYPE       : 'fun <T>(SomeStruct, u64, T): SomeStruct'
Method 'foo()'
    INSERT TEXT: 'foo()'
    TARGET     : '(Completion::dot::foo)'
    TYPE       : 'fun (SomeStruct)'
Field 'some_field'
    INSERT TEXT: 'some_field'
    TYPE       : 'u64'

-- test 2 -------------------
use line: 27, use_col: 10
Method 'foo()'
    INSERT TEXT: 'foo(${1:_param1}, ${2:_param2})'
    TARGET     : '(Completion::dot::bar)'
    TYPE       : 'fun <T>(SomeStruct, u64, T): SomeStruct'
Field 'some_field'
    INSERT TEXT: 'some_field'
    TYPE       : 'u64'

== macro_dot.move ========================================================
-- test 0 -------------------
use line: 8, use_col: 10
Method 'foo!()'
    INSERT TEXT: 'foo!(${1:_param1}, |${2}, ${3}| ${4}, ${5:_param3})'
    TARGET     : '(Completion::macro_dot::foo)'
    TYPE       : 'fun (SomeStruct, u64, |u64, u64| -> u64, u64)'
Method 'test()'
    INSERT TEXT: 'test()'
    TARGET     : '(Completion::macro_dot::test)'
    TYPE       : 'fun (SomeStruct)'

== other_mod_dot.move ========================================================
-- test 0 -------------------
use line: 4, use_col: 10
Method 'all!()'
    INSERT TEXT: 'all!(|${1}| ${2})'
    TARGET     : '(std::vector::all)'
    TYPE       : 'fun <$T>(&vector<$T>, |&$T| -> bool): bool'
Method 'any!()'
    INSERT TEXT: 'any!(|${1}| ${2})'
    TARGET     : '(std::vector::any)'
    TYPE       : 'fun <$T>(&vector<$T>, |&$T| -> bool): bool'
Method 'append()'
    INSERT TEXT: 'append(${1:other})'
    TARGET     : '(std::vector::append)'
    TYPE       : 'fun <Element>(&mut vector<Element>, vector<Element>)'
Method 'borrow()'
    INSERT TEXT: 'borrow(${1:i})'
    TARGET     : '(std::vector::borrow)'
    TYPE       : 'fun <Element>(&vector<Element>, u64): &Element'
Method 'borrow_mut()'
    INSERT TEXT: 'borrow_mut(${1:i})'
    TARGET     : '(std::vector::borrow_mut)'
    TYPE       : 'fun <Element>(&mut vector<Element>, u64): &mut Element'
Method 'contains()'
    INSERT TEXT: 'contains(${1:e})'
    TARGET     : '(std::vector::contains)'
    TYPE       : 'fun <Element>(&vector<Element>, &Element): bool'
Method 'count!()'
    INSERT TEXT: 'count!(|${1}| ${2})'
    TARGET     : '(std::vector::count)'
    TYPE       : 'fun <$T>(&vector<$T>, |&$T| -> bool): u64'
Method 'destroy!()'
    INSERT TEXT: 'destroy!(|${1}| ${2})'
    TARGET     : '(std::vector::destroy)'
    TYPE       : 'fun <$T>(vector<$T>, |$T| -> ())'
Method 'destroy_empty()'
    INSERT TEXT: 'destroy_empty()'
    TARGET     : '(std::vector::destroy_empty)'
    TYPE       : 'fun <Element>(vector<Element>)'
Method 'do!()'
    INSERT TEXT: 'do!(|${1}| ${2})'
    TARGET     : '(std::vector::do)'
    TYPE       : 'fun <$T>(vector<$T>, |$T| -> ())'
Method 'do_mut!()'
    INSERT TEXT: 'do_mut!(|${1}| ${2})'
    TARGET     : '(std::vector::do_mut)'
    TYPE       : 'fun <$T>(&mut vector<$T>, |&mut $T| -> ())'
Method 'do_ref!()'
    INSERT TEXT: 'do_ref!(|${1}| ${2})'
    TARGET     : '(std::vector::do_ref)'
    TYPE       : 'fun <$T>(&vector<$T>, |&$T| -> ())'
Method 'filter!()'
    INSERT TEXT: 'filter!(|${1}| ${2})'
    TARGET     : '(std::vector::filter)'
    TYPE       : 'fun <$T>(vector<$T>, |&$T| -> bool): vector<$T>'
Method 'find_index!()'
    INSERT TEXT: 'find_index!(|${1}| ${2})'
    TARGET     : '(std::vector::find_index)'
    TYPE       : 'fun <$T>(&vector<$T>, |&$T| -> bool): Option'
Method 'fold!()'
    INSERT TEXT: 'fold!(${1:init}, |${2}, ${3}| ${4})'
    TARGET     : '(std::vector::fold)'
    TYPE       : 'fun <$T, $Acc>(vector<$T>, $Acc, |$Acc, $T| -> $Acc): $Acc'
Method 'index_of()'
    INSERT TEXT: 'index_of(${1:e})'
    TARGET     : '(std::vector::index_of)'
    TYPE       : 'fun <Element>(&vector<Element>, &Element): (bool, u64)'
Method 'insert()'
    INSERT TEXT: 'insert(${1:e}, ${2:i})'
    TARGET     : '(std::vector::insert)'
    TYPE       : 'fun <Element>(&mut vector<Element>, Element, u64)'
Method 'is_empty()'
    INSERT TEXT: 'is_empty()'
    TARGET     : '(std::vector::is_empty)'
    TYPE       : 'fun <Element>(&vector<Element>): bool'
Method 'length()'
    INSERT TEXT: 'length()'
    TARGET     : '(std::vector::length)'
    TYPE       : 'fun <Element>(&vector<Element>): u64'
Method 'map!()'
    INSERT TEXT: 'map!(|${1}| ${2})'
    TARGET     : '(std::vector::map)'
    TYPE       : 'fun <$T, $U>(vector<$T>, |$T| -> $U): vector<$U>'
Method 'map_ref!()'
    INSERT TEXT: 'map_ref!(|${1}| ${2})'
    TARGET     : '(std::vector::map_ref)'
    TYPE       : 'fun <$T, $U>(&vector<$T>, |&$T| -> $U): vector<$U>'
Method 'partition!()'
    INSERT TEXT: 'partition!(|${1}| ${2})'
    TARGET     : '(std::vector::partition)'
    TYPE       : 'fun <$T>(vector<$T>, |&$T| -> bool): (vector<$T>, vector<$T>)'
Method 'pop_back()'
    INSERT TEXT: 'pop_back()'
    TARGET     : '(std::vector::pop_back)'
    TYPE       : 'fun <Element>(&mut vector<Element>): Element'
Method 'push_back()'
    INSERT TEXT: 'push_back(${1:e})'
    TARGET     : '(std::vector::push_back)'
    TYPE       : 'fun <Element>(&mut vector<Element>, Element)'
Method 'remove()'
    INSERT TEXT: 'remove(${1:i})'
    TARGET     : '(std::vector::remove)'
    TYPE       : 'fun <Element>(&mut vector<Element>, u64): Element'
Method 'reverse()'
    INSERT TEXT: 'reverse()'
    TARGET     : '(std::vector::reverse)'
    TYPE       : 'fun <Element>(&mut vector<Element>)'
Method 'swap()'
    INSERT TEXT: 'swap(${1:i}, ${2:j})'
    TARGET     : '(std::vector::swap)'
    TYPE       : 'fun <Element>(&mut vector<Element>, u64, u64)'
Method 'swap_remove()'
    INSERT TEXT: 'swap_remove(${1:i})'
    TARGET     : '(std::vector::swap_remove)'
    TYPE       : 'fun <Element>(&mut vector<Element>, u64): Element'
Method 'to_ascii_string()'
    INSERT TEXT: 'to_ascii_string()'
    TARGET     : '(std::ascii::string)'
    TYPE       : 'fun (vector<u8>): String'
Method 'to_string()'
    INSERT TEXT: 'to_string()'
    TARGET     : '(std::string::utf8)'
    TYPE       : 'fun (vector<u8>): String'
Method 'try_to_ascii_string()'
    INSERT TEXT: 'try_to_ascii_string()'
    TARGET     : '(std::ascii::try_string)'
    TYPE       : 'fun (vector<u8>): Option'
Method 'try_to_string()'
    INSERT TEXT: 'try_to_string()'
    TARGET     : '(std::string::try_utf8)'
    TYPE       : 'fun (vector<u8>): Option'
Method 'zip_do!()'
    INSERT TEXT: 'zip_do!(${1:v2}, |${2}, ${3}| ${4})'
    TARGET     : '(std::vector::zip_do)'
    TYPE       : 'fun <$T1, $T2>(vector<$T1>, vector<$T2>, |$T1, $T2| -> ())'
Method 'zip_do_mut!()'
    INSERT TEXT: 'zip_do_mut!(${1:v2}, |${2}, ${3}| ${4})'
    TARGET     : '(std::vector::zip_do_mut)'
    TYPE       : 'fun <$T1, $T2>(&mut vector<$T1>, &mut vector<$T2>, |&mut $T1, &mut $T2| -> ())'
Method 'zip_do_ref!()'
    INSERT TEXT: 'zip_do_ref!(${1:v2}, |${2}, ${3}| ${4})'
    TARGET     : '(std::vector::zip_do_ref)'
    TYPE       : 'fun <$T1, $T2>(&vector<$T1>, &vector<$T2>, |&$T1, &$T2| -> ())'
Method 'zip_do_reverse!()'
    INSERT TEXT: 'zip_do_reverse!(${1:v2}, |${2}, ${3}| ${4})'
    TARGET     : '(std::vector::zip_do_reverse)'
    TYPE       : 'fun <$T1, $T2>(vector<$T1>, vector<$T2>, |$T1, $T2| -> ())'
Method 'zip_map!()'
    INSERT TEXT: 'zip_map!(${1:v2}, |${2}, ${3}| ${4})'
    TARGET     : '(std::vector::zip_map)'
    TYPE       : 'fun <$T1, $T2, $U>(vector<$T1>, vector<$T2>, |$T1, $T2| -> $U): vector<$U>'
Method 'zip_map_ref!()'
    INSERT TEXT: 'zip_map_ref!(${1:v2}, |${2}, ${3}| ${4})'
    TARGET     : '(std::vector::zip_map_ref)'
    TYPE       : 'fun <$T1, $T2, $U>(&vector<$T1>, &vector<$T2>, |&$T1, &$T2| -> $U): vector<$U>'

