// Move bytecode v6
module 1.u16 {
use 0000000000000000000000000000000000000000000000000000000000000001::option;
use 0000000000000000000000000000000000000000000000000000000000000001::string;
use 0000000000000000000000000000000000000000000000000000000000000001::vector;

public bitwise_not(Arg0: u16): u16 {
B0:
	0: MoveLoc[0](Arg0: u16)
	1: LdU16(65535)
	2: Xor
	3: Ret
}

public max(Arg0: u16, Arg1: u16): u16 {
L2:	loc0: u16
L3:	loc1: u16
L4:	loc2: u16
B0:
	0: MoveLoc[0](Arg0: u16)
	1: StLoc[3](loc1: u16)
	2: MoveLoc[1](Arg1: u16)
	3: StLoc[4](loc2: u16)
	4: CopyLoc[3](loc1: u16)
	5: CopyLoc[4](loc2: u16)
	6: Gt
	7: BrFalse(11)
B1:
	8: MoveLoc[3](loc1: u16)
	9: StLoc[2](loc0: u16)
	10: Branch(13)
B2:
	11: MoveLoc[4](loc2: u16)
	12: StLoc[2](loc0: u16)
B3:
	13: MoveLoc[2](loc0: u16)
	14: Ret
}

public min(Arg0: u16, Arg1: u16): u16 {
L2:	loc0: u16
L3:	loc1: u16
L4:	loc2: u16
B0:
	0: MoveLoc[0](Arg0: u16)
	1: StLoc[3](loc1: u16)
	2: MoveLoc[1](Arg1: u16)
	3: StLoc[4](loc2: u16)
	4: CopyLoc[3](loc1: u16)
	5: CopyLoc[4](loc2: u16)
	6: Lt
	7: BrFalse(11)
B1:
	8: MoveLoc[3](loc1: u16)
	9: StLoc[2](loc0: u16)
	10: Branch(13)
B2:
	11: MoveLoc[4](loc2: u16)
	12: StLoc[2](loc0: u16)
B3:
	13: MoveLoc[2](loc0: u16)
	14: Ret
}

public diff(Arg0: u16, Arg1: u16): u16 {
L2:	loc0: u16
L3:	loc1: u16
L4:	loc2: u16
B0:
	0: MoveLoc[0](Arg0: u16)
	1: StLoc[3](loc1: u16)
	2: MoveLoc[1](Arg1: u16)
	3: StLoc[4](loc2: u16)
	4: CopyLoc[3](loc1: u16)
	5: CopyLoc[4](loc2: u16)
	6: Gt
	7: BrFalse(13)
B1:
	8: MoveLoc[3](loc1: u16)
	9: MoveLoc[4](loc2: u16)
	10: Sub
	11: StLoc[2](loc0: u16)
	12: Branch(17)
B2:
	13: MoveLoc[4](loc2: u16)
	14: MoveLoc[3](loc1: u16)
	15: Sub
	16: StLoc[2](loc0: u16)
B3:
	17: MoveLoc[2](loc0: u16)
	18: Ret
}

public divide_and_round_up(Arg0: u16, Arg1: u16): u16 {
L2:	loc0: u16
L3:	loc1: u16
L4:	loc2: u16
B0:
	0: MoveLoc[0](Arg0: u16)
	1: StLoc[3](loc1: u16)
	2: MoveLoc[1](Arg1: u16)
	3: StLoc[4](loc2: u16)
	4: CopyLoc[3](loc1: u16)
	5: CopyLoc[4](loc2: u16)
	6: Mod
	7: LdU16(0)
	8: Eq
	9: BrFalse(15)
B1:
	10: MoveLoc[3](loc1: u16)
	11: MoveLoc[4](loc2: u16)
	12: Div
	13: StLoc[2](loc0: u16)
	14: Branch(21)
B2:
	15: MoveLoc[3](loc1: u16)
	16: MoveLoc[4](loc2: u16)
	17: Div
	18: LdU16(1)
	19: Add
	20: StLoc[2](loc0: u16)
B3:
	21: MoveLoc[2](loc0: u16)
	22: Ret
}

public pow(Arg0: u16, Arg1: u8): u16 {
L2:	loc0: u16
L3:	loc1: u8
L4:	loc2: u16
B0:
	0: MoveLoc[0](Arg0: u16)
	1: StLoc[2](loc0: u16)
	2: MoveLoc[1](Arg1: u8)
	3: StLoc[3](loc1: u8)
	4: LdU16(1)
	5: StLoc[4](loc2: u16)
B1:
	6: CopyLoc[3](loc1: u8)
	7: LdU8(1)
	8: Ge
	9: BrFalse(35)
B2:
	10: Branch(11)
B3:
	11: CopyLoc[3](loc1: u8)
	12: LdU8(2)
	13: Mod
	14: LdU8(0)
	15: Eq
	16: BrFalse(26)
B4:
	17: CopyLoc[2](loc0: u16)
	18: MoveLoc[2](loc0: u16)
	19: Mul
	20: StLoc[2](loc0: u16)
	21: MoveLoc[3](loc1: u8)
	22: LdU8(2)
	23: Div
	24: StLoc[3](loc1: u8)
	25: Branch(6)
B5:
	26: MoveLoc[4](loc2: u16)
	27: CopyLoc[2](loc0: u16)
	28: Mul
	29: StLoc[4](loc2: u16)
	30: MoveLoc[3](loc1: u8)
	31: LdU8(1)
	32: Sub
	33: StLoc[3](loc1: u8)
	34: Branch(6)
B6:
	35: MoveLoc[4](loc2: u16)
	36: Ret
}

public sqrt(Arg0: u16): u16 {
L1:	loc0: u32
L2:	loc1: u32
L3:	loc2: u16
L4:	loc3: u32
B0:
	0: MoveLoc[0](Arg0: u16)
	1: StLoc[3](loc2: u16)
	2: LdU32(65536)
	3: StLoc[1](loc0: u32)
	4: LdU32(0)
	5: StLoc[2](loc1: u32)
	6: MoveLoc[3](loc2: u16)
	7: CastU32
	8: StLoc[4](loc3: u32)
B1:
	9: CopyLoc[1](loc0: u32)
	10: LdU32(0)
	11: Neq
	12: BrFalse(42)
B2:
	13: Branch(14)
B3:
	14: CopyLoc[4](loc3: u32)
	15: CopyLoc[2](loc1: u32)
	16: CopyLoc[1](loc0: u32)
	17: Add
	18: Ge
	19: BrFalse(33)
B4:
	20: MoveLoc[4](loc3: u32)
	21: CopyLoc[2](loc1: u32)
	22: CopyLoc[1](loc0: u32)
	23: Add
	24: Sub
	25: StLoc[4](loc3: u32)
	26: MoveLoc[2](loc1: u32)
	27: LdU8(1)
	28: Shr
	29: CopyLoc[1](loc0: u32)
	30: Add
	31: StLoc[2](loc1: u32)
	32: Branch(37)
B5:
	33: MoveLoc[2](loc1: u32)
	34: LdU8(1)
	35: Shr
	36: StLoc[2](loc1: u32)
B6:
	37: MoveLoc[1](loc0: u32)
	38: LdU8(2)
	39: Shr
	40: StLoc[1](loc0: u32)
	41: Branch(9)
B7:
	42: MoveLoc[2](loc1: u32)
	43: CastU16
	44: Ret
}

public try_as_u8(Arg0: u16): Option<u8> {
L1:	loc0: Option<u8>
L2:	loc1: u16
B0:
	0: MoveLoc[0](Arg0: u16)
	1: StLoc[2](loc1: u16)
	2: CopyLoc[2](loc1: u16)
	3: LdU16(255)
	4: Gt
	5: BrFalse(9)
B1:
	6: Call option::none<u8>(): Option<u8>
	7: StLoc[1](loc0: Option<u8>)
	8: Branch(13)
B2:
	9: MoveLoc[2](loc1: u16)
	10: CastU8
	11: Call option::some<u8>(u8): Option<u8>
	12: StLoc[1](loc0: Option<u8>)
B3:
	13: MoveLoc[1](loc0: Option<u8>)
	14: Ret
}

public to_string(Arg0: u16): String {
L1:	loc0: String
L2:	loc1: vector<u8>
L3:	loc2: u16
B0:
	0: MoveLoc[0](Arg0: u16)
	1: StLoc[3](loc2: u16)
	2: CopyLoc[3](loc2: u16)
	3: LdU16(0)
	4: Eq
	5: BrFalse(10)
B1:
	6: LdConst[0](vector<u8>: "0" ..)
	7: Call string::utf8(vector<u8>): String
	8: StLoc[1](loc0: String)
	9: Branch(34)
B2:
	10: LdConst[1](vector<u8>: "" /..)
	11: StLoc[2](loc1: vector<u8>)
B3:
	12: CopyLoc[3](loc2: u16)
	13: LdU16(0)
	14: Neq
	15: BrFalse(29)
B4:
	16: MutBorrowLoc[2](loc1: vector<u8>)
	17: LdU16(48)
	18: CopyLoc[3](loc2: u16)
	19: LdU16(10)
	20: Mod
	21: Add
	22: CastU8
	23: VecPushBack(10)
	24: MoveLoc[3](loc2: u16)
	25: LdU16(10)
	26: Div
	27: StLoc[3](loc2: u16)
	28: Branch(12)
B5:
	29: MutBorrowLoc[2](loc1: vector<u8>)
	30: Call vector::reverse<u8>(&mut vector<u8>)
	31: MoveLoc[2](loc1: vector<u8>)
	32: Call string::utf8(vector<u8>): String
	33: StLoc[1](loc0: String)
B6:
	34: MoveLoc[1](loc0: String)
	35: Ret
}

Constants [
	0 => vector<u8>: "0" // interpreted as UTF8 string
	1 => vector<u8>: "" // interpreted as UTF8 string
]
}
