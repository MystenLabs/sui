// Move bytecode v6
module 2.package {
use 0000000000000000000000000000000000000000000000000000000000000001::ascii;
use 0000000000000000000000000000000000000000000000000000000000000001::type_name;
use 0000000000000000000000000000000000000000000000000000000000000002::object;
use 0000000000000000000000000000000000000000000000000000000000000002::transfer;
use 0000000000000000000000000000000000000000000000000000000000000002::tx_context;
use 0000000000000000000000000000000000000000000000000000000000000002::types;

struct Publisher has store, key {
	id: UID,
	package: String,
	module_name: String
}

struct UpgradeCap has store, key {
	id: UID,
	package: ID,
	version: u64,
	policy: u8
}

struct UpgradeTicket {
	cap: ID,
	package: ID,
	policy: u8,
	digest: vector<u8>
}

struct UpgradeReceipt {
	cap: ID,
	package: ID
}

public claim<Ty0: drop>(Arg0: Ty0, Arg1: &mut TxContext): Publisher {
L2:	loc0: TypeName
B0:
	0: ImmBorrowLoc[0](Arg0: Ty0)
	1: Call types::is_one_time_witness<Ty0>(&Ty0): bool
	2: BrFalse(4)
B1:
	3: Branch(8)
B2:
	4: MoveLoc[1](Arg1: &mut TxContext)
	5: Pop
	6: LdConst[0](u64: 0)
	7: Abort
B3:
	8: Call type_name::get_with_original_ids<Ty0>(): TypeName
	9: StLoc[2](loc0: TypeName)
	10: MoveLoc[1](Arg1: &mut TxContext)
	11: Call object::new(&mut TxContext): UID
	12: ImmBorrowLoc[2](loc0: TypeName)
	13: Call type_name::get_address(&TypeName): String
	14: ImmBorrowLoc[2](loc0: TypeName)
	15: Call type_name::get_module(&TypeName): String
	16: Pack[0](Publisher)
	17: Ret
}

public claim_and_keep<Ty0: drop>(Arg0: Ty0, Arg1: &mut TxContext) {
B0:
	0: MoveLoc[0](Arg0: Ty0)
	1: CopyLoc[1](Arg1: &mut TxContext)
	2: Call claim<Ty0>(Ty0, &mut TxContext): Publisher
	3: MoveLoc[1](Arg1: &mut TxContext)
	4: FreezeRef
	5: Call tx_context::sender(&TxContext): address
	6: Call transfer::public_transfer<Publisher>(Publisher, address)
	7: Ret
}

public burn_publisher(Arg0: Publisher) {
B0:
	0: MoveLoc[0](Arg0: Publisher)
	1: Unpack[0](Publisher)
	2: Pop
	3: Pop
	4: Call object::delete(UID)
	5: Ret
}

public from_package<Ty0>(Arg0: &Publisher): bool {
L1:	loc0: TypeName
B0:
	0: Call type_name::get_with_original_ids<Ty0>(): TypeName
	1: StLoc[1](loc0: TypeName)
	2: ImmBorrowLoc[1](loc0: TypeName)
	3: Call type_name::get_address(&TypeName): String
	4: MoveLoc[0](Arg0: &Publisher)
	5: ImmBorrowField[0](Publisher.package: String)
	6: ReadRef
	7: Eq
	8: Ret
}

public from_module<Ty0>(Arg0: &Publisher): bool {
L1:	loc0: bool
L2:	loc1: TypeName
B0:
	0: Call type_name::get_with_original_ids<Ty0>(): TypeName
	1: StLoc[2](loc1: TypeName)
	2: ImmBorrowLoc[2](loc1: TypeName)
	3: Call type_name::get_address(&TypeName): String
	4: CopyLoc[0](Arg0: &Publisher)
	5: ImmBorrowField[0](Publisher.package: String)
	6: ReadRef
	7: Eq
	8: BrFalse(17)
B1:
	9: ImmBorrowLoc[2](loc1: TypeName)
	10: Call type_name::get_module(&TypeName): String
	11: MoveLoc[0](Arg0: &Publisher)
	12: ImmBorrowField[1](Publisher.module_name: String)
	13: ReadRef
	14: Eq
	15: StLoc[1](loc0: bool)
	16: Branch(21)
B2:
	17: MoveLoc[0](Arg0: &Publisher)
	18: Pop
	19: LdFalse
	20: StLoc[1](loc0: bool)
B3:
	21: MoveLoc[1](loc0: bool)
	22: Ret
}

public published_module(Arg0: &Publisher): &String {
B0:
	0: MoveLoc[0](Arg0: &Publisher)
	1: ImmBorrowField[1](Publisher.module_name: String)
	2: Ret
}

public published_package(Arg0: &Publisher): &String {
B0:
	0: MoveLoc[0](Arg0: &Publisher)
	1: ImmBorrowField[0](Publisher.package: String)
	2: Ret
}

public upgrade_package(Arg0: &UpgradeCap): ID {
B0:
	0: MoveLoc[0](Arg0: &UpgradeCap)
	1: ImmBorrowField[2](UpgradeCap.package: ID)
	2: ReadRef
	3: Ret
}

public version(Arg0: &UpgradeCap): u64 {
B0:
	0: MoveLoc[0](Arg0: &UpgradeCap)
	1: ImmBorrowField[3](UpgradeCap.version: u64)
	2: ReadRef
	3: Ret
}

public upgrade_policy(Arg0: &UpgradeCap): u8 {
B0:
	0: MoveLoc[0](Arg0: &UpgradeCap)
	1: ImmBorrowField[4](UpgradeCap.policy: u8)
	2: ReadRef
	3: Ret
}

public ticket_package(Arg0: &UpgradeTicket): ID {
B0:
	0: MoveLoc[0](Arg0: &UpgradeTicket)
	1: ImmBorrowField[5](UpgradeTicket.package: ID)
	2: ReadRef
	3: Ret
}

public ticket_policy(Arg0: &UpgradeTicket): u8 {
B0:
	0: MoveLoc[0](Arg0: &UpgradeTicket)
	1: ImmBorrowField[6](UpgradeTicket.policy: u8)
	2: ReadRef
	3: Ret
}

public receipt_cap(Arg0: &UpgradeReceipt): ID {
B0:
	0: MoveLoc[0](Arg0: &UpgradeReceipt)
	1: ImmBorrowField[7](UpgradeReceipt.cap: ID)
	2: ReadRef
	3: Ret
}

public receipt_package(Arg0: &UpgradeReceipt): ID {
B0:
	0: MoveLoc[0](Arg0: &UpgradeReceipt)
	1: ImmBorrowField[8](UpgradeReceipt.package: ID)
	2: ReadRef
	3: Ret
}

public ticket_digest(Arg0: &UpgradeTicket): &vector<u8> {
B0:
	0: MoveLoc[0](Arg0: &UpgradeTicket)
	1: ImmBorrowField[9](UpgradeTicket.digest: vector<u8>)
	2: Ret
}

public compatible_policy(): u8 {
B0:
	0: LdConst[5](u8: 0)
	1: Ret
}

public additive_policy(): u8 {
B0:
	0: LdConst[6](u8: 128)
	1: Ret
}

public dep_only_policy(): u8 {
B0:
	0: LdConst[7](u8: 192)
	1: Ret
}

entry public only_additive_upgrades(Arg0: &mut UpgradeCap) {
B0:
	0: MoveLoc[0](Arg0: &mut UpgradeCap)
	1: LdConst[6](u8: 128)
	2: Call restrict(&mut UpgradeCap, u8)
	3: Ret
}

entry public only_dep_upgrades(Arg0: &mut UpgradeCap) {
B0:
	0: MoveLoc[0](Arg0: &mut UpgradeCap)
	1: LdConst[7](u8: 192)
	2: Call restrict(&mut UpgradeCap, u8)
	3: Ret
}

entry public make_immutable(Arg0: UpgradeCap) {
B0:
	0: MoveLoc[0](Arg0: UpgradeCap)
	1: Unpack[1](UpgradeCap)
	2: Pop
	3: Pop
	4: Pop
	5: Call object::delete(UID)
	6: Ret
}

public authorize_upgrade(Arg0: &mut UpgradeCap, Arg1: u8, Arg2: vector<u8>): UpgradeTicket {
L3:	loc0: ID
L4:	loc1: ID
B0:
	0: LdConst[8](address: 0x00..)
	1: Call object::id_from_address(address): ID
	2: StLoc[3](loc0: ID)
	3: CopyLoc[0](Arg0: &mut UpgradeCap)
	4: ImmBorrowField[2](UpgradeCap.package: ID)
	5: ReadRef
	6: CopyLoc[3](loc0: ID)
	7: Neq
	8: BrFalse(10)
B1:
	9: Branch(14)
B2:
	10: MoveLoc[0](Arg0: &mut UpgradeCap)
	11: Pop
	12: LdConst[2](u64: 2)
	13: Abort
B3:
	14: CopyLoc[1](Arg1: u8)
	15: CopyLoc[0](Arg0: &mut UpgradeCap)
	16: ImmBorrowField[4](UpgradeCap.policy: u8)
	17: ReadRef
	18: Ge
	19: BrFalse(21)
B4:
	20: Branch(25)
B5:
	21: MoveLoc[0](Arg0: &mut UpgradeCap)
	22: Pop
	23: LdConst[1](u64: 1)
	24: Abort
B6:
	25: CopyLoc[0](Arg0: &mut UpgradeCap)
	26: ImmBorrowField[2](UpgradeCap.package: ID)
	27: ReadRef
	28: StLoc[4](loc1: ID)
	29: MoveLoc[3](loc0: ID)
	30: CopyLoc[0](Arg0: &mut UpgradeCap)
	31: MutBorrowField[2](UpgradeCap.package: ID)
	32: WriteRef
	33: MoveLoc[0](Arg0: &mut UpgradeCap)
	34: FreezeRef
	35: Call object::id<UpgradeCap>(&UpgradeCap): ID
	36: MoveLoc[4](loc1: ID)
	37: MoveLoc[1](Arg1: u8)
	38: MoveLoc[2](Arg2: vector<u8>)
	39: Pack[2](UpgradeTicket)
	40: Ret
}

public commit_upgrade(Arg0: &mut UpgradeCap, Arg1: UpgradeReceipt) {
L2:	loc0: ID
L3:	loc1: ID
B0:
	0: MoveLoc[1](Arg1: UpgradeReceipt)
	1: Unpack[3](UpgradeReceipt)
	2: StLoc[3](loc1: ID)
	3: StLoc[2](loc0: ID)
	4: CopyLoc[0](Arg0: &mut UpgradeCap)
	5: FreezeRef
	6: Call object::id<UpgradeCap>(&UpgradeCap): ID
	7: MoveLoc[2](loc0: ID)
	8: Eq
	9: BrFalse(11)
B1:
	10: Branch(15)
B2:
	11: MoveLoc[0](Arg0: &mut UpgradeCap)
	12: Pop
	13: LdConst[4](u64: 4)
	14: Abort
B3:
	15: CopyLoc[0](Arg0: &mut UpgradeCap)
	16: ImmBorrowField[2](UpgradeCap.package: ID)
	17: Call object::id_to_address(&ID): address
	18: LdConst[8](address: 0x00..)
	19: Eq
	20: BrFalse(22)
B4:
	21: Branch(26)
B5:
	22: MoveLoc[0](Arg0: &mut UpgradeCap)
	23: Pop
	24: LdConst[3](u64: 3)
	25: Abort
B6:
	26: MoveLoc[3](loc1: ID)
	27: CopyLoc[0](Arg0: &mut UpgradeCap)
	28: MutBorrowField[2](UpgradeCap.package: ID)
	29: WriteRef
	30: CopyLoc[0](Arg0: &mut UpgradeCap)
	31: ImmBorrowField[3](UpgradeCap.version: u64)
	32: ReadRef
	33: LdU64(1)
	34: Add
	35: MoveLoc[0](Arg0: &mut UpgradeCap)
	36: MutBorrowField[3](UpgradeCap.version: u64)
	37: WriteRef
	38: Ret
}

restrict(Arg0: &mut UpgradeCap, Arg1: u8) {
B0:
	0: CopyLoc[0](Arg0: &mut UpgradeCap)
	1: ImmBorrowField[4](UpgradeCap.policy: u8)
	2: ReadRef
	3: CopyLoc[1](Arg1: u8)
	4: Le
	5: BrFalse(7)
B1:
	6: Branch(11)
B2:
	7: MoveLoc[0](Arg0: &mut UpgradeCap)
	8: Pop
	9: LdConst[1](u64: 1)
	10: Abort
B3:
	11: MoveLoc[1](Arg1: u8)
	12: MoveLoc[0](Arg0: &mut UpgradeCap)
	13: MutBorrowField[4](UpgradeCap.policy: u8)
	14: WriteRef
	15: Ret
}

Constants [
	0 => u64: 0
	1 => u64: 1
	2 => u64: 2
	3 => u64: 3
	4 => u64: 4
	5 => u8: 0
	6 => u8: 128
	7 => u8: 192
	8 => address: 0x0000000000000000000000000000000000000000000000000000000000000000
]
}
