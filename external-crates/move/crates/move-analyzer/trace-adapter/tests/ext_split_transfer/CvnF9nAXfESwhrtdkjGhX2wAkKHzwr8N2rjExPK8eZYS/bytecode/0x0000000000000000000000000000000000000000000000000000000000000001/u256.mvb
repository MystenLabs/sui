// Move bytecode v6
module 1.u256 {
use 0000000000000000000000000000000000000000000000000000000000000001::option;
use 0000000000000000000000000000000000000000000000000000000000000001::string;
use 0000000000000000000000000000000000000000000000000000000000000001::vector;

public bitwise_not(Arg0: u256): u256 {
B0:
	0: MoveLoc[0](Arg0: u256)
	1: LdU256(115792089237316195423570985008687907853269984665640564039457584007913129639935)
	2: Xor
	3: Ret
}

public max(Arg0: u256, Arg1: u256): u256 {
L2:	loc0: u256
L3:	loc1: u256
L4:	loc2: u256
B0:
	0: MoveLoc[0](Arg0: u256)
	1: StLoc[3](loc1: u256)
	2: MoveLoc[1](Arg1: u256)
	3: StLoc[4](loc2: u256)
	4: CopyLoc[3](loc1: u256)
	5: CopyLoc[4](loc2: u256)
	6: Gt
	7: BrFalse(11)
B1:
	8: MoveLoc[3](loc1: u256)
	9: StLoc[2](loc0: u256)
	10: Branch(13)
B2:
	11: MoveLoc[4](loc2: u256)
	12: StLoc[2](loc0: u256)
B3:
	13: MoveLoc[2](loc0: u256)
	14: Ret
}

public min(Arg0: u256, Arg1: u256): u256 {
L2:	loc0: u256
L3:	loc1: u256
L4:	loc2: u256
B0:
	0: MoveLoc[0](Arg0: u256)
	1: StLoc[3](loc1: u256)
	2: MoveLoc[1](Arg1: u256)
	3: StLoc[4](loc2: u256)
	4: CopyLoc[3](loc1: u256)
	5: CopyLoc[4](loc2: u256)
	6: Lt
	7: BrFalse(11)
B1:
	8: MoveLoc[3](loc1: u256)
	9: StLoc[2](loc0: u256)
	10: Branch(13)
B2:
	11: MoveLoc[4](loc2: u256)
	12: StLoc[2](loc0: u256)
B3:
	13: MoveLoc[2](loc0: u256)
	14: Ret
}

public diff(Arg0: u256, Arg1: u256): u256 {
L2:	loc0: u256
L3:	loc1: u256
L4:	loc2: u256
B0:
	0: MoveLoc[0](Arg0: u256)
	1: StLoc[3](loc1: u256)
	2: MoveLoc[1](Arg1: u256)
	3: StLoc[4](loc2: u256)
	4: CopyLoc[3](loc1: u256)
	5: CopyLoc[4](loc2: u256)
	6: Gt
	7: BrFalse(13)
B1:
	8: MoveLoc[3](loc1: u256)
	9: MoveLoc[4](loc2: u256)
	10: Sub
	11: StLoc[2](loc0: u256)
	12: Branch(17)
B2:
	13: MoveLoc[4](loc2: u256)
	14: MoveLoc[3](loc1: u256)
	15: Sub
	16: StLoc[2](loc0: u256)
B3:
	17: MoveLoc[2](loc0: u256)
	18: Ret
}

public divide_and_round_up(Arg0: u256, Arg1: u256): u256 {
L2:	loc0: u256
L3:	loc1: u256
L4:	loc2: u256
B0:
	0: MoveLoc[0](Arg0: u256)
	1: StLoc[3](loc1: u256)
	2: MoveLoc[1](Arg1: u256)
	3: StLoc[4](loc2: u256)
	4: CopyLoc[3](loc1: u256)
	5: CopyLoc[4](loc2: u256)
	6: Mod
	7: LdU256(0)
	8: Eq
	9: BrFalse(15)
B1:
	10: MoveLoc[3](loc1: u256)
	11: MoveLoc[4](loc2: u256)
	12: Div
	13: StLoc[2](loc0: u256)
	14: Branch(21)
B2:
	15: MoveLoc[3](loc1: u256)
	16: MoveLoc[4](loc2: u256)
	17: Div
	18: LdU256(1)
	19: Add
	20: StLoc[2](loc0: u256)
B3:
	21: MoveLoc[2](loc0: u256)
	22: Ret
}

public pow(Arg0: u256, Arg1: u8): u256 {
L2:	loc0: u256
L3:	loc1: u8
L4:	loc2: u256
B0:
	0: MoveLoc[0](Arg0: u256)
	1: StLoc[2](loc0: u256)
	2: MoveLoc[1](Arg1: u8)
	3: StLoc[3](loc1: u8)
	4: LdU256(1)
	5: StLoc[4](loc2: u256)
B1:
	6: CopyLoc[3](loc1: u8)
	7: LdU8(1)
	8: Ge
	9: BrFalse(35)
B2:
	10: Branch(11)
B3:
	11: CopyLoc[3](loc1: u8)
	12: LdU8(2)
	13: Mod
	14: LdU8(0)
	15: Eq
	16: BrFalse(26)
B4:
	17: CopyLoc[2](loc0: u256)
	18: MoveLoc[2](loc0: u256)
	19: Mul
	20: StLoc[2](loc0: u256)
	21: MoveLoc[3](loc1: u8)
	22: LdU8(2)
	23: Div
	24: StLoc[3](loc1: u8)
	25: Branch(6)
B5:
	26: MoveLoc[4](loc2: u256)
	27: CopyLoc[2](loc0: u256)
	28: Mul
	29: StLoc[4](loc2: u256)
	30: MoveLoc[3](loc1: u8)
	31: LdU8(1)
	32: Sub
	33: StLoc[3](loc1: u8)
	34: Branch(6)
B6:
	35: MoveLoc[4](loc2: u256)
	36: Ret
}

public try_as_u8(Arg0: u256): Option<u8> {
L1:	loc0: Option<u8>
L2:	loc1: u256
B0:
	0: MoveLoc[0](Arg0: u256)
	1: StLoc[2](loc1: u256)
	2: CopyLoc[2](loc1: u256)
	3: LdU256(255)
	4: Gt
	5: BrFalse(9)
B1:
	6: Call option::none<u8>(): Option<u8>
	7: StLoc[1](loc0: Option<u8>)
	8: Branch(13)
B2:
	9: MoveLoc[2](loc1: u256)
	10: CastU8
	11: Call option::some<u8>(u8): Option<u8>
	12: StLoc[1](loc0: Option<u8>)
B3:
	13: MoveLoc[1](loc0: Option<u8>)
	14: Ret
}

public try_as_u16(Arg0: u256): Option<u16> {
L1:	loc0: Option<u16>
L2:	loc1: u256
B0:
	0: MoveLoc[0](Arg0: u256)
	1: StLoc[2](loc1: u256)
	2: CopyLoc[2](loc1: u256)
	3: LdU256(65535)
	4: Gt
	5: BrFalse(9)
B1:
	6: Call option::none<u16>(): Option<u16>
	7: StLoc[1](loc0: Option<u16>)
	8: Branch(13)
B2:
	9: MoveLoc[2](loc1: u256)
	10: CastU16
	11: Call option::some<u16>(u16): Option<u16>
	12: StLoc[1](loc0: Option<u16>)
B3:
	13: MoveLoc[1](loc0: Option<u16>)
	14: Ret
}

public try_as_u32(Arg0: u256): Option<u32> {
L1:	loc0: Option<u32>
L2:	loc1: u256
B0:
	0: MoveLoc[0](Arg0: u256)
	1: StLoc[2](loc1: u256)
	2: CopyLoc[2](loc1: u256)
	3: LdU256(4294967295)
	4: Gt
	5: BrFalse(9)
B1:
	6: Call option::none<u32>(): Option<u32>
	7: StLoc[1](loc0: Option<u32>)
	8: Branch(13)
B2:
	9: MoveLoc[2](loc1: u256)
	10: CastU32
	11: Call option::some<u32>(u32): Option<u32>
	12: StLoc[1](loc0: Option<u32>)
B3:
	13: MoveLoc[1](loc0: Option<u32>)
	14: Ret
}

public try_as_u64(Arg0: u256): Option<u64> {
L1:	loc0: Option<u64>
L2:	loc1: u256
B0:
	0: MoveLoc[0](Arg0: u256)
	1: StLoc[2](loc1: u256)
	2: CopyLoc[2](loc1: u256)
	3: LdU256(18446744073709551615)
	4: Gt
	5: BrFalse(9)
B1:
	6: Call option::none<u64>(): Option<u64>
	7: StLoc[1](loc0: Option<u64>)
	8: Branch(13)
B2:
	9: MoveLoc[2](loc1: u256)
	10: CastU64
	11: Call option::some<u64>(u64): Option<u64>
	12: StLoc[1](loc0: Option<u64>)
B3:
	13: MoveLoc[1](loc0: Option<u64>)
	14: Ret
}

public try_as_u128(Arg0: u256): Option<u128> {
L1:	loc0: Option<u128>
L2:	loc1: u256
B0:
	0: MoveLoc[0](Arg0: u256)
	1: StLoc[2](loc1: u256)
	2: CopyLoc[2](loc1: u256)
	3: LdU256(340282366920938463463374607431768211455)
	4: Gt
	5: BrFalse(9)
B1:
	6: Call option::none<u128>(): Option<u128>
	7: StLoc[1](loc0: Option<u128>)
	8: Branch(13)
B2:
	9: MoveLoc[2](loc1: u256)
	10: CastU128
	11: Call option::some<u128>(u128): Option<u128>
	12: StLoc[1](loc0: Option<u128>)
B3:
	13: MoveLoc[1](loc0: Option<u128>)
	14: Ret
}

public to_string(Arg0: u256): String {
L1:	loc0: String
L2:	loc1: vector<u8>
L3:	loc2: u256
B0:
	0: MoveLoc[0](Arg0: u256)
	1: StLoc[3](loc2: u256)
	2: CopyLoc[3](loc2: u256)
	3: LdU256(0)
	4: Eq
	5: BrFalse(10)
B1:
	6: LdConst[0](vector<u8>: "0" ..)
	7: Call string::utf8(vector<u8>): String
	8: StLoc[1](loc0: String)
	9: Branch(34)
B2:
	10: LdConst[1](vector<u8>: "" /..)
	11: StLoc[2](loc1: vector<u8>)
B3:
	12: CopyLoc[3](loc2: u256)
	13: LdU256(0)
	14: Neq
	15: BrFalse(29)
B4:
	16: MutBorrowLoc[2](loc1: vector<u8>)
	17: LdU256(48)
	18: CopyLoc[3](loc2: u256)
	19: LdU256(10)
	20: Mod
	21: Add
	22: CastU8
	23: VecPushBack(13)
	24: MoveLoc[3](loc2: u256)
	25: LdU256(10)
	26: Div
	27: StLoc[3](loc2: u256)
	28: Branch(12)
B5:
	29: MutBorrowLoc[2](loc1: vector<u8>)
	30: Call vector::reverse<u8>(&mut vector<u8>)
	31: MoveLoc[2](loc1: vector<u8>)
	32: Call string::utf8(vector<u8>): String
	33: StLoc[1](loc0: String)
B6:
	34: MoveLoc[1](loc0: String)
	35: Ret
}

Constants [
	0 => vector<u8>: "0" // interpreted as UTF8 string
	1 => vector<u8>: "" // interpreted as UTF8 string
]
}
