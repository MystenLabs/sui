// Move bytecode v6
module 0.m {
use 0000000000000000000000000000000000000000000000000000000000000001::unit_test;

public foo(): u64 {
L0:	%#3: u64
L1:	%#4: u64
L2:	%#7: u64
L3:	%#8: u64
L4:	ret#1#1: u64
L5:	ret#1#8: u64
L6:	v#1#0: u64
L7:	x#1#4: u64
L8:	x#2#11: u64
B0:
	0: LdU64(4)
	1: StLoc[4](ret#1#1: u64)
	2: CopyLoc[4](ret#1#1: u64)
	3: StLoc[1](%#4: u64)
	4: MoveLoc[4](ret#1#1: u64)
	5: StLoc[7](x#1#4: u64)
	6: CopyLoc[7](x#1#4: u64)
	7: MoveLoc[7](x#1#4: u64)
	8: Add
	9: StLoc[0](%#3: u64)
	10: MoveLoc[1](%#4: u64)
	11: MoveLoc[0](%#3: u64)
	12: Add
	13: StLoc[6](v#1#0: u64)
	14: CopyLoc[6](v#1#0: u64)
	15: CopyLoc[6](v#1#0: u64)
	16: Add
	17: CopyLoc[6](v#1#0: u64)
	18: MoveLoc[6](v#1#0: u64)
	19: Add
	20: Add
	21: StLoc[5](ret#1#8: u64)
	22: CopyLoc[5](ret#1#8: u64)
	23: StLoc[3](%#8: u64)
	24: MoveLoc[5](ret#1#8: u64)
	25: StLoc[8](x#2#11: u64)
	26: CopyLoc[8](x#2#11: u64)
	27: MoveLoc[8](x#2#11: u64)
	28: Add
	29: StLoc[2](%#7: u64)
	30: MoveLoc[3](%#8: u64)
	31: MoveLoc[2](%#7: u64)
	32: Add
	33: Ret
}

public test() {
B0:
	0: Call foo(): u64
	1: Pop
	2: Ret
}

entry public unit_test_poison() {
B0:
	0: Call unit_test::poison()
	1: Ret
}

}
