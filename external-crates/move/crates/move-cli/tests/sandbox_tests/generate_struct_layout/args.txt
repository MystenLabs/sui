sandbox publish

# basics
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M2.mv --struct C --type-args u64
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M2.mv --struct C --type-args address
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M2.mv --struct C --type-args vector<u8>

# across modules deep
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct B --type-args bool
# across modules shallow
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct B --type-args bool --shallow

# with fancy type parameters
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct A --type-args 0x6::M1::S<u64>
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct A --type-args vector<0x6::M1::S<u64>>
# same thing, but shallow
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct A --type-args 0x6::M1::S<u64> --shallow
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct A --type-args vector<0x6::M1::S<u64>> --shallow

# recursive type definition
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M2.mv --struct C --type-args 0x6::M2::C<u64>

# without --type-args
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct G

# phantom type arguments should not appear in struct keys when --ignore-phantom-types is set
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct A --type-args bool --ignore-phantom-types
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct A --type-args u64 --ignore-phantom-types
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct B --type-args bool u8 --ignore-phantom-types
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct C --type-args u8 u64 u128 --ignore-phantom-types
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct D --type-args bool u64 --ignore-phantom-types
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct E --type-args bool u64 u128 --ignore-phantom-types

# test config options: address omission + separators
sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct E --type-args bool u64 u128 --omit-addresses

sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct E --type-args bool u64 u128 --separator __

sandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct E --type-args bool u64 u128 --omit-addresses --separator __
