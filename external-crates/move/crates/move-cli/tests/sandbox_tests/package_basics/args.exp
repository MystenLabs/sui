Command `build`:
INCLUDING DEPENDENCY MoveStdlib
BUILDING PackageBasics
Command `test --coverage --threads 1`:
INCLUDING DEPENDENCY MoveStdlib
BUILDING PackageBasics
Running Move unit tests
[ PASS    ] std::AModule::double_three
[ PASS    ] std::AModule::double_two
[ PASS    ] std::AModuleTests::double_one_one
[ PASS    ] std::AModuleTests::double_three
[ PASS    ] std::AModuleTests::double_zero_zero
[ PASS    ] std::AModuleTests::double_zero_zero_wrong
Test result: OK. Total tests: 6; passed: 6; failed: 0
Command `coverage summary --summarize-functions`:
+-------------------------+
| Move Coverage Summary   |
+-------------------------+
Module 0000000000000000000000000000000000000000000000000000000000000001::AModule
	fun double_except_three
		total: 11
		covered: 11
		% coverage: 100.00
>>> % Module coverage: 100.00
+-------------------------+
| % Move Coverage: 100.00  |
+-------------------------+
Command `coverage source --module AModule`:
module std::AModule {

    /// x was three
    const E_IS_THREE: u64 = 0;

    public fun double_except_three(x: u64): u64 {
        assert!(x != 3, E_IS_THREE);
        x * x
    }

    #[test]
    fun double_two() {
        assert!(double_except_three(4) == 16, 0)
    }

    #[test]
    #[expected_failure]
    fun double_three() {
        double_except_three(3);
    }
}
Command `coverage bytecode --module AModule`:
// Move bytecode v6
module 1.AModule {




public double_except_three(x#0#0: u64): u64 {
B0:
[6]	0: CopyLoc[0](x#0#0: u64)
[6]	1: LdU64(3)
[6]	2: Neq
[6]	3: BrFalse(5)
B1:
[4]	4: Branch(7)
B2:
[2]	5: LdConst[0](u64: 0)
[2]	6: Abort
B3:
[4]	7: CopyLoc[0](x#0#0: u64)
[4]	8: MoveLoc[0](x#0#0: u64)
[4]	9: Mul
[4]	10: Ret

}

Constants [
	0 => u64: 0
]
}
Command `disassemble --package MoveStdlib --name signer`:
// Move bytecode v6
module 1.signer {




native public borrow_address(s#0#0: &signer): &address
public address_of(s#0#0: &signer): address {
B0:
	0: MoveLoc[0](s#0#0: &signer)
	1: Call borrow_address(&signer): &address
	2: ReadRef
	3: Ret

}
}
Command `info`:
PackageBasics
├── std:0x1
└── MoveStdlib
    └── std:0x1

Command `test double_two`:
INCLUDING DEPENDENCY MoveStdlib
BUILDING PackageBasics
Running Move unit tests
[ PASS    ] std::AModule::double_two
Test result: OK. Total tests: 1; passed: 1; failed: 0
Command `test one_one`:
INCLUDING DEPENDENCY MoveStdlib
BUILDING PackageBasics
Running Move unit tests
[ PASS    ] std::AModuleTests::double_one_one
Test result: OK. Total tests: 1; passed: 1; failed: 0
