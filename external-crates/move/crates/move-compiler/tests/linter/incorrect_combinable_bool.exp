warning[Lint W01011]: boolean condition can be simplified
  ┌─ tests/linter/incorrect_combinable_bool.move:6:13
  │
6 │         if (x < y || x == y) {}; // should be x <= y
  │             ^^^^^^^^^^^^^^^ Consider simplifying to `<=` or `>=` respectively.
  │
  = This warning can be suppressed with '#[allow(lint(combinable_bool_conditions))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W04010]: unit `()` expression can be removed or simplified
  ┌─ tests/linter/incorrect_combinable_bool.move:6:30
  │
6 │         if (x < y || x == y) {}; // should be x <= y
  │             ---------------  ^^ Unnecessary unit '()'
  │             │                 
  │             Consider negating the 'if' condition and simplifying
  │
  = For example 'if (cond) () else e' can be simplified to 'if (!cond) e'
  = This warning can be suppressed with '#[allow(lint(unnecessary_unit))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W01011]: boolean condition can be simplified
  ┌─ tests/linter/incorrect_combinable_bool.move:7:13
  │
7 │         if (x == y || x > y) {}; // should be x >= y
  │             ^^^^^^^^^^^^^^^ Consider simplifying to `<=` or `>=` respectively.
  │
  = This warning can be suppressed with '#[allow(lint(combinable_bool_conditions))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W04010]: unit `()` expression can be removed or simplified
  ┌─ tests/linter/incorrect_combinable_bool.move:7:30
  │
7 │         if (x == y || x > y) {}; // should be x >= y
  │             ---------------  ^^ Unnecessary unit '()'
  │             │                 
  │             Consider negating the 'if' condition and simplifying
  │
  = For example 'if (cond) () else e' can be simplified to 'if (!cond) e'
  = This warning can be suppressed with '#[allow(lint(unnecessary_unit))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W01011]: boolean condition can be simplified
  ┌─ tests/linter/incorrect_combinable_bool.move:8:13
  │
8 │         if (x > y || x == y) {}; // should be x >= y
  │             ^^^^^^^^^^^^^^^ Consider simplifying to `<=` or `>=` respectively.
  │
  = This warning can be suppressed with '#[allow(lint(combinable_bool_conditions))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W04010]: unit `()` expression can be removed or simplified
  ┌─ tests/linter/incorrect_combinable_bool.move:8:30
  │
8 │         if (x > y || x == y) {}; // should be x >= y
  │             ---------------  ^^ Unnecessary unit '()'
  │             │                 
  │             Consider negating the 'if' condition and simplifying
  │
  = For example 'if (cond) () else e' can be simplified to 'if (!cond) e'
  = This warning can be suppressed with '#[allow(lint(unnecessary_unit))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W01011]: boolean condition can be simplified
  ┌─ tests/linter/incorrect_combinable_bool.move:9:13
  │
9 │         if (m == n || m < n) {}; // should be m <= n
  │             ^^^^^^^^^^^^^^^ Consider simplifying to `<=` or `>=` respectively.
  │
  = This warning can be suppressed with '#[allow(lint(combinable_bool_conditions))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W04010]: unit `()` expression can be removed or simplified
  ┌─ tests/linter/incorrect_combinable_bool.move:9:30
  │
9 │         if (m == n || m < n) {}; // should be m <= n
  │             ---------------  ^^ Unnecessary unit '()'
  │             │                 
  │             Consider negating the 'if' condition and simplifying
  │
  = For example 'if (cond) () else e' can be simplified to 'if (!cond) e'
  = This warning can be suppressed with '#[allow(lint(unnecessary_unit))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W01011]: boolean condition can be simplified
   ┌─ tests/linter/incorrect_combinable_bool.move:10:13
   │
10 │         if (x == 11 || x < 11) {};
   │             ^^^^^^^^^^^^^^^^^ Consider simplifying to `<=` or `>=` respectively.
   │
   = This warning can be suppressed with '#[allow(lint(combinable_bool_conditions))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W04010]: unit `()` expression can be removed or simplified
   ┌─ tests/linter/incorrect_combinable_bool.move:10:32
   │
10 │         if (x == 11 || x < 11) {};
   │             -----------------  ^^ Unnecessary unit '()'
   │             │                   
   │             Consider negating the 'if' condition and simplifying
   │
   = For example 'if (cond) () else e' can be simplified to 'if (!cond) e'
   = This warning can be suppressed with '#[allow(lint(unnecessary_unit))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

