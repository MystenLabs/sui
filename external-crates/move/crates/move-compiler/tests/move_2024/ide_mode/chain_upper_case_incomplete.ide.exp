note[I15006]: IDE path autocomplete
  ┌─ tests/move_2024/ide_mode/chain_upper_case_incomplete.move:1:1
  │  
1 │ ╭ module 0x42::m1 {
2 │ │     fun bar() {}
3 │ │ 
4 │ │     fun foo() {
5 │ │         B
6 │ │     }
7 │ │ }
  │ ╰─^ Possible in-scope names
  │  
  = members: 'Option -> std::option::Option', 'bar -> 0x42::m1::bar', or 'foo -> 0x42::m1::foo'
  = modules: 'Self -> 0x42::m1', 'option -> std::option', or 'vector -> std::vector'
  = addresses: 'A -> 0x41', 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'
  = type params: 

warning[W09008]: unused function
  ┌─ tests/move_2024/ide_mode/chain_upper_case_incomplete.move:2:9
  │
2 │     fun bar() {}
  │         ^^^ The non-'public', non-'entry' function 'bar' is never called. Consider removing it.
  │
  = This warning can be suppressed with '#[allow(unused_function)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[W09008]: unused function
  ┌─ tests/move_2024/ide_mode/chain_upper_case_incomplete.move:4:9
  │
4 │     fun foo() {
  │         ^^^ The non-'public', non-'entry' function 'foo' is never called. Consider removing it.
  │
  = This warning can be suppressed with '#[allow(unused_function)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

note[I15006]: IDE path autocomplete
  ┌─ tests/move_2024/ide_mode/chain_upper_case_incomplete.move:5:9
  │
5 │         B
  │         ^ Possible in-scope names
  │
  = members: 'Option -> std::option::Option', 'bar -> 0x42::m1::bar', or 'foo -> 0x42::m1::foo'
  = modules: 'Self -> 0x42::m1', 'option -> std::option', or 'vector -> std::vector'
  = addresses: 'A -> 0x41', 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'
  = type params: 

error[E03006]: unexpected name in this position
  ┌─ tests/move_2024/ide_mode/chain_upper_case_incomplete.move:5:9
  │
5 │         B
  │         ^ Expected a type, function, or constant in this position, not an address

