note[I15006]: IDE path autocomplete
  ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:1:1
  │  
1 │ ╭ module a::m {
2 │ │     public struct S<T> { x: T }
3 │ │     public struct A {}
4 │ │ }
  │ ╰─^ Possible in-scope names
  │  
  = members: 'A -> a::m::A', 'Option -> std::option::Option', or 'S -> a::m::S'
  = modules: 'Self -> a::m', 'option -> std::option', or 'vector -> std::vector'
  = addresses: 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'
  = type params: 

warning[W09009]: unused struct field
  ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:2:26
  │
2 │     public struct S<T> { x: T }
  │                          ^ The 'x' field of the 'S' type is unused
  │
  = This warning can be suppressed with '#[allow(unused_field)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

note[I15006]: IDE path autocomplete
  ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:2:29
  │
2 │     public struct S<T> { x: T }
  │                             ^ Possible in-scope names
  │
  = members: 'A -> a::m::A', 'Option -> std::option::Option', or 'S -> a::m::S'
  = modules: 'Self -> a::m', 'option -> std::option', or 'vector -> std::vector'
  = addresses: 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'
  = type params: 'T'

note[I15006]: IDE path autocomplete
   ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:6:1
   │  
 6 │ ╭ module a::test {
 7 │ │     use a::m::{Self, S, A};
 8 │ │ 
 9 │ │     public fun p(a:
10 │ │ 
11 │ │     public fun q():
12 │ │ }
   │ ╰─^ Possible in-scope names
   │  
   = members: 'A -> a::m::A', 'Option -> std::option::Option', 'S -> a::m::S', 'p -> a::test::p', or 'q -> a::test::q'
   = modules: 'Self -> a::test', 'm -> a::m', 'option -> std::option', or 'vector -> std::vector'
   = addresses: 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'
   = type params: 

warning[W09001]: unused alias
  ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:7:16
  │
7 │     use a::m::{Self, S, A};
  │                ^^^^ Unused 'use' of alias 'm'. Consider removing it
  │
  = This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[W09001]: unused alias
  ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:7:22
  │
7 │     use a::m::{Self, S, A};
  │                      ^ Unused 'use' of alias 'S'. Consider removing it
  │
  = This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[W09001]: unused alias
  ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:7:25
  │
7 │     use a::m::{Self, S, A};
  │                         ^ Unused 'use' of alias 'A'. Consider removing it
  │
  = This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[W09002]: unused variable
  ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:9:18
  │
9 │     public fun p(a:
  │                  ^ Unused parameter 'a'. Consider removing or prefixing with an underscore: '_a'
  │
  = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

note[I15006]: IDE path autocomplete
   ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:11:5
   │  
 9 │ │     public fun p(a:
   │ ╰───────────────────^ Possible in-scope names
10 │   
11 │ ╭     public fun q():
   │  
   = members: 'A -> a::m::A', 'Option -> std::option::Option', 'S -> a::m::S', 'p -> a::test::p', or 'q -> a::test::q'
   = modules: 'Self -> a::test', 'm -> a::m', 'option -> std::option', or 'vector -> std::vector'
   = addresses: 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'
   = type params: 

error[E01002]: unexpected token
   ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:11:5
   │
 9 │     public fun p(a:
   │                 - To match this '('
10 │ 
11 │     public fun q():
   │     ^ Expected ')'

error[E01002]: unexpected token
   ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:11:5
   │
11 │     public fun q():
   │     ^^^^^^
   │     │
   │     Unexpected 'public'
   │     Expected a type name

note[I15006]: IDE path autocomplete
   ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:11:16
   │
11 │     public fun q():
   │                ^ Possible in-scope names
   │
   = members: 'A -> a::m::A', 'Option -> std::option::Option', 'S -> a::m::S', 'p -> a::test::p', or 'q -> a::test::q'
   = modules: 'Self -> a::test', 'm -> a::m', 'option -> std::option', or 'vector -> std::vector'
   = addresses: 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'
   = type params: 

error[E01002]: unexpected token
   ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:12:1
   │
12 │ }
   │ ^
   │ │
   │ Unexpected '}'
   │ Expected a type name

error[E01002]: unexpected token
   ┌─ tests/move_2024/ide_mode/missing_type_suggestions.move:14:1
   │
14 │ 
   │ ^
   │ 
   │ Unexpected end-of-file
   │ Expected '{'

