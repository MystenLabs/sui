note[I15001]: IDE autocomplete
   ┌─ tests/move_2024/ide_mode/use_fun_autocomplete.move:1:1
   │  
 1 │ ╭ module 0x42::m1 {
 2 │ │     public struct S {} has drop;
 3 │ │ 
 4 │ │     public fun foo(_s: S) {}
   · │
18 │ │ 
19 │ │ }
   │ ╰─^ Possible in-scope names: 'Option -> std::option::Option', 'S -> 0x42::m1::S', 'Self -> 0x42::m1', 'option -> std::option', 'vector -> std::vector', 'A -> 0x41', 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'

note[I15001]: IDE autocomplete
  ┌─ tests/move_2024/ide_mode/use_fun_autocomplete.move:4:24
  │
4 │     public fun foo(_s: S) {}
  │                        ^ Possible in-scope names: 'Option -> std::option::Option', 'S -> 0x42::m1::S', 'bar -> 0x42::m1::bar', 'foo -> 0x42::m1::foo', 'test1 -> 0x42::m1::test1', or 'test2 -> 0x42::m1::test2'

note[I15001]: IDE autocomplete
  ┌─ tests/move_2024/ide_mode/use_fun_autocomplete.move:6:24
  │
6 │     public fun bar(_s: S) {}
  │                        ^ Possible in-scope names: 'Option -> std::option::Option', 'S -> 0x42::m1::S', 'bar -> 0x42::m1::bar', 'foo -> 0x42::m1::foo', 'test1 -> 0x42::m1::test1', or 'test2 -> 0x42::m1::test2'

note[I15001]: IDE autocomplete
  ┌─ tests/move_2024/ide_mode/use_fun_autocomplete.move:9:25
  │
9 │     public fun test1(s: S) {
  │                         ^ Possible in-scope names: 'Option -> std::option::Option', 'S -> 0x42::m1::S', 'bar -> 0x42::m1::bar', 'foo -> 0x42::m1::foo', 'test1 -> 0x42::m1::test1', or 'test2 -> 0x42::m1::test2'

note[I15001]: IDE autocomplete
   ┌─ tests/move_2024/ide_mode/use_fun_autocomplete.move:10:17
   │
10 │         use fun bar as S.bak;
   │                 ^^^ Possible in-scope names: 'Option -> std::option::Option', 'S -> 0x42::m1::S', 'bar -> 0x42::m1::bar', 'foo -> 0x42::m1::foo', 'test1 -> 0x42::m1::test1', or 'test2 -> 0x42::m1::test2'

note[I15001]: IDE autocomplete
   ┌─ tests/move_2024/ide_mode/use_fun_autocomplete.move:10:24
   │
10 │         use fun bar as S.bak;
   │                        ^ Possible in-scope names: 'Option -> std::option::Option', 'S -> 0x42::m1::S', 'bar -> 0x42::m1::bar', 'foo -> 0x42::m1::foo', 'test1 -> 0x42::m1::test1', or 'test2 -> 0x42::m1::test2'

note[I15001]: IDE autocomplete
   ┌─ tests/move_2024/ide_mode/use_fun_autocomplete.move:11:11
   │
11 │         s.bak(); // autocompletion to `bak` and `foo`
   │           ^^^ Possible dot names: '0x42::m1::bak', '0x42::m1::foo', '0x42::m1::test1', or '0x42::m1::test2'

note[I15001]: IDE autocomplete
   ┌─ tests/move_2024/ide_mode/use_fun_autocomplete.move:14:25
   │
14 │     public fun test2(s: S) {
   │                         ^ Possible in-scope names: 'Option -> std::option::Option', 'S -> 0x42::m1::S', 'bar -> 0x42::m1::bar', 'foo -> 0x42::m1::foo', 'test1 -> 0x42::m1::test1', or 'test2 -> 0x42::m1::test2'

note[I15001]: IDE autocomplete
   ┌─ tests/move_2024/ide_mode/use_fun_autocomplete.move:15:17
   │
15 │         use fun foo as S.bar;
   │                 ^^^ Possible in-scope names: 'Option -> std::option::Option', 'S -> 0x42::m1::S', 'bar -> 0x42::m1::bar', 'foo -> 0x42::m1::foo', 'test1 -> 0x42::m1::test1', or 'test2 -> 0x42::m1::test2'

note[I15001]: IDE autocomplete
   ┌─ tests/move_2024/ide_mode/use_fun_autocomplete.move:15:24
   │
15 │         use fun foo as S.bar;
   │                        ^ Possible in-scope names: 'Option -> std::option::Option', 'S -> 0x42::m1::S', 'bar -> 0x42::m1::bar', 'foo -> 0x42::m1::foo', 'test1 -> 0x42::m1::test1', or 'test2 -> 0x42::m1::test2'

note[I15001]: IDE autocomplete
   ┌─ tests/move_2024/ide_mode/use_fun_autocomplete.move:16:11
   │
16 │         s.bar(); // auto-completion to only one (shadowed) `bar`
   │           ^^^ Possible dot names: '0x42::m1::bar', '0x42::m1::test1', or '0x42::m1::test2'

