error[E05001]: ability constraint not satisfied
  ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:6:9
  │
3 │     public struct S has copy {}
  │                   - To satisfy the constraint, the 'drop' ability would need to be added here
4 │ 
5 │     public fun test_0(a: S, b: S): bool {
  │                          - The type '0x42::a::S' does not have the ability 'drop'
6 │         a == b
  │         ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E05001]: ability constraint not satisfied
  ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:6:14
  │
3 │     public struct S has copy {}
  │                   - To satisfy the constraint, the 'drop' ability would need to be added here
4 │ 
5 │     public fun test_0(a: S, b: S): bool {
  │                                - The type '0x42::a::S' does not have the ability 'drop'
6 │         a == b
  │              ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:10:9
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
 9 │     public fun test_1(a: S, b: &S): bool {
   │                       -  - The type '0x42::a::S' does not have the ability 'drop'
   │                       │   
   │                       The parameter 'a' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
10 │         a == b
   │         ^^^^^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:14:9
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
13 │     public fun test_2(a: S, b: &mut S): bool {
   │                       -  - The type '0x42::a::S' does not have the ability 'drop'
   │                       │   
   │                       The parameter 'a' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
14 │         a == b
   │         ^^^^^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:18:9
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
17 │     public fun test_3(a: &S, b: S): bool {
   │                              -  - The type '0x42::a::S' does not have the ability 'drop'
   │                              │   
   │                              The parameter 'b' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
18 │         a == b
   │         ^^^^^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:22:9
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
21 │     public fun test_6(a: &mut S, b: S): bool {
   │                                  -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                  │   
   │                                  The parameter 'b' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
22 │         a == b
   │         ^^^^^^ Invalid return

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:26:9
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
25 │     public fun test_9(a: S, b: S, c: S): bool {
   │                          - The type '0x42::a::S' does not have the ability 'drop'
26 │         a == b && b == c && a == c
   │         ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:26:14
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
25 │     public fun test_9(a: S, b: S, c: S): bool {
   │                                - The type '0x42::a::S' does not have the ability 'drop'
26 │         a == b && b == c && a == c
   │              ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:26:19
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
25 │     public fun test_9(a: S, b: S, c: S): bool {
   │                                - The type '0x42::a::S' does not have the ability 'drop'
26 │         a == b && b == c && a == c
   │                   ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:26:24
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
25 │     public fun test_9(a: S, b: S, c: S): bool {
   │                                      - The type '0x42::a::S' does not have the ability 'drop'
26 │         a == b && b == c && a == c
   │                        ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:26:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
25 │     public fun test_9(a: S, b: S, c: S): bool {
   │                       -  - The type '0x42::a::S' does not have the ability 'drop'
   │                       │   
   │                       The parameter 'a' might still contain a value. The value does not have the 'drop' ability and must be consumed before the function returns
26 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:26:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
25 │     public fun test_9(a: S, b: S, c: S): bool {
   │                             -  - The type '0x42::a::S' does not have the ability 'drop'
   │                             │   
   │                             The parameter 'b' might still contain a value. The value does not have the 'drop' ability and must be consumed before the function returns
26 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:26:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
25 │     public fun test_9(a: S, b: S, c: S): bool {
   │                                   -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                   │   
   │                                   The parameter 'c' might still contain a value. The value does not have the 'drop' ability and must be consumed before the function returns
26 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:26:29
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
25 │     public fun test_9(a: S, b: S, c: S): bool {
   │                          - The type '0x42::a::S' does not have the ability 'drop'
26 │         a == b && b == c && a == c
   │                             ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:26:34
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
25 │     public fun test_9(a: S, b: S, c: S): bool {
   │                                      - The type '0x42::a::S' does not have the ability 'drop'
26 │         a == b && b == c && a == c
   │                                  ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:30:9
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
29 │     public fun test_10(a: S, b: S, c: &S): bool {
   │                           - The type '0x42::a::S' does not have the ability 'drop'
30 │         a == b && b == c && a == c
   │         ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:30:14
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
29 │     public fun test_10(a: S, b: S, c: &S): bool {
   │                                 - The type '0x42::a::S' does not have the ability 'drop'
30 │         a == b && b == c && a == c
   │              ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:30:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
29 │     public fun test_10(a: S, b: S, c: &S): bool {
   │                        -  - The type '0x42::a::S' does not have the ability 'drop'
   │                        │   
   │                        The parameter 'a' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
30 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:30:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
29 │     public fun test_10(a: S, b: S, c: &S): bool {
   │                              -  - The type '0x42::a::S' does not have the ability 'drop'
   │                              │   
   │                              The parameter 'b' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
30 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:34:9
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
33 │     public fun test_11(a: S, b: S, c: &mut S): bool {
   │                           - The type '0x42::a::S' does not have the ability 'drop'
34 │         a == b && b == c && a == c
   │         ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:34:14
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
33 │     public fun test_11(a: S, b: S, c: &mut S): bool {
   │                                 - The type '0x42::a::S' does not have the ability 'drop'
34 │         a == b && b == c && a == c
   │              ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:34:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
33 │     public fun test_11(a: S, b: S, c: &mut S): bool {
   │                        -  - The type '0x42::a::S' does not have the ability 'drop'
   │                        │   
   │                        The parameter 'a' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
34 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:34:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
33 │     public fun test_11(a: S, b: S, c: &mut S): bool {
   │                              -  - The type '0x42::a::S' does not have the ability 'drop'
   │                              │   
   │                              The parameter 'b' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
34 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:38:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
37 │     public fun test_12(a: S, b: &S, c: S): bool {
   │                        -  - The type '0x42::a::S' does not have the ability 'drop'
   │                        │   
   │                        The parameter 'a' might still contain a value. The value does not have the 'drop' ability and must be consumed before the function returns
38 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:38:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
37 │     public fun test_12(a: S, b: &S, c: S): bool {
   │                                     -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                     │   
   │                                     The parameter 'c' might still contain a value. The value does not have the 'drop' ability and must be consumed before the function returns
38 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:38:29
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
37 │     public fun test_12(a: S, b: &S, c: S): bool {
   │                           - The type '0x42::a::S' does not have the ability 'drop'
38 │         a == b && b == c && a == c
   │                             ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:38:34
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
37 │     public fun test_12(a: S, b: &S, c: S): bool {
   │                                        - The type '0x42::a::S' does not have the ability 'drop'
38 │         a == b && b == c && a == c
   │                                  ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:42:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
41 │     public fun test_13(a: S, b: &S, c: &S): bool {
   │                        -  - The type '0x42::a::S' does not have the ability 'drop'
   │                        │   
   │                        The parameter 'a' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
42 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:46:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
45 │     public fun test_14(a: S, b: &S, c: &mut S): bool {
   │                        -  - The type '0x42::a::S' does not have the ability 'drop'
   │                        │   
   │                        The parameter 'a' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
46 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:50:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
49 │     public fun test_15(a: S, b: &mut S, c: S): bool {
   │                        -  - The type '0x42::a::S' does not have the ability 'drop'
   │                        │   
   │                        The parameter 'a' might still contain a value. The value does not have the 'drop' ability and must be consumed before the function returns
50 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:50:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
49 │     public fun test_15(a: S, b: &mut S, c: S): bool {
   │                                         -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                         │   
   │                                         The parameter 'c' might still contain a value. The value does not have the 'drop' ability and must be consumed before the function returns
50 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:50:29
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
49 │     public fun test_15(a: S, b: &mut S, c: S): bool {
   │                           - The type '0x42::a::S' does not have the ability 'drop'
50 │         a == b && b == c && a == c
   │                             ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:50:34
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
49 │     public fun test_15(a: S, b: &mut S, c: S): bool {
   │                                            - The type '0x42::a::S' does not have the ability 'drop'
50 │         a == b && b == c && a == c
   │                                  ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:54:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
53 │     public fun test_16(a: S, b: &mut S, c: &S): bool {
   │                        -  - The type '0x42::a::S' does not have the ability 'drop'
   │                        │   
   │                        The parameter 'a' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
54 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:58:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
57 │     public fun test_17(a: S, b: &mut S, c: &mut S): bool {
   │                        -  - The type '0x42::a::S' does not have the ability 'drop'
   │                        │   
   │                        The parameter 'a' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
58 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:62:19
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
61 │     public fun test_18(a: &S, b: S, c: S): bool {
   │                                  - The type '0x42::a::S' does not have the ability 'drop'
62 │         a == b && b == c && a == c
   │                   ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:62:24
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
61 │     public fun test_18(a: &S, b: S, c: S): bool {
   │                                        - The type '0x42::a::S' does not have the ability 'drop'
62 │         a == b && b == c && a == c
   │                        ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:62:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
61 │     public fun test_18(a: &S, b: S, c: S): bool {
   │                               -  - The type '0x42::a::S' does not have the ability 'drop'
   │                               │   
   │                               The parameter 'b' might still contain a value. The value does not have the 'drop' ability and must be consumed before the function returns
62 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:62:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
61 │     public fun test_18(a: &S, b: S, c: S): bool {
   │                                     -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                     │   
   │                                     The parameter 'c' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
62 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:66:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
65 │     public fun test_19(a: &S, b: S, c: &S): bool {
   │                               -  - The type '0x42::a::S' does not have the ability 'drop'
   │                               │   
   │                               The parameter 'b' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
66 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:70:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
69 │     public fun test_20(a: &S, b: S, c: &mut S): bool {
   │                               -  - The type '0x42::a::S' does not have the ability 'drop'
   │                               │   
   │                               The parameter 'b' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
70 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:74:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
73 │     public fun test_21(a: &S, b: &S, c: S): bool {
   │                                      -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                      │   
   │                                      The parameter 'c' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
74 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:78:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
77 │     public fun test_24(a: &S, b: &mut S, c: S): bool {
   │                                          -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                          │   
   │                                          The parameter 'c' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
78 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:82:19
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
81 │     public fun test_27(a: &mut S, b: S, c: S): bool {
   │                                      - The type '0x42::a::S' does not have the ability 'drop'
82 │         a == b && b == c && a == c
   │                   ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:82:24
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
81 │     public fun test_27(a: &mut S, b: S, c: S): bool {
   │                                            - The type '0x42::a::S' does not have the ability 'drop'
82 │         a == b && b == c && a == c
   │                        ^ '==' requires the 'drop' ability as the value is consumed. Try borrowing the values with '&' first.'

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:82:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
81 │     public fun test_27(a: &mut S, b: S, c: S): bool {
   │                                   -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                   │   
   │                                   The parameter 'b' might still contain a value. The value does not have the 'drop' ability and must be consumed before the function returns
82 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:82:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
81 │     public fun test_27(a: &mut S, b: S, c: S): bool {
   │                                         -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                         │   
   │                                         The parameter 'c' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
82 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:86:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
85 │     public fun test_28(a: &mut S, b: S, c: &S): bool {
   │                                   -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                   │   
   │                                   The parameter 'b' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
86 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:90:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
89 │     public fun test_29(a: &mut S, b: S, c: &mut S): bool {
   │                                   -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                   │   
   │                                   The parameter 'b' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
90 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:94:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
93 │     public fun test_30(a: &mut S, b: &S, c: S): bool {
   │                                          -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                          │   
   │                                          The parameter 'c' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
94 │         a == b && b == c && a == c
   │                          ^^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_2024/typing/eq_refs_struct_invalid_no_drop.move:98:26
   │
 3 │     public struct S has copy {}
   │                   - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
97 │     public fun test_33(a: &mut S, b: &mut S, c: S): bool {
   │                                              -  - The type '0x42::a::S' does not have the ability 'drop'
   │                                              │   
   │                                              The parameter 'c' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
98 │         a == b && b == c && a == c
   │                          ^^ Invalid return

