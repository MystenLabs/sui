---
source: crates/move-compiler/tests/move_check_testsuite.rs
info:
  flavor: core
  edition: 2024.alpha
  lint: false
---
error[E04007]: incompatible types
  ┌─ tests/move_2024/typing/lambda_return_mismatched.move:9:23
  │
8 │             if (cond) return 0;
  │                       -------- Found: integer. It is not compatible with the other type.
9 │             if (cond) return false;
  │                       ^^^^^^^^^^^^
  │                       │      │
  │                       │      Found: 'bool'. It is not compatible with the other type.
  │                       Invalid return

error[E04007]: incompatible types
   ┌─ tests/move_2024/typing/lambda_return_mismatched.move:15:13
   │
13 │             if (cond) return &0;
   │                              -- Found: '&{integer}'. It is not compatible with the other type.
14 │             if (cond) return &mut 0;
15 │             return 0
   │             ^^^^^^^^
   │             │      │
   │             │      Found: integer. It is not compatible with the other type.
   │             Invalid return

error[E04007]: incompatible types
   ┌─ tests/move_2024/typing/lambda_return_mismatched.move:19:23
   │
18 │             if (cond) return (&0, vector[0]);
   │                                          - Found: integer. It is not compatible with the other type.
19 │             if (cond) return (&mut 0, vector[false]);
   │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │                       │                      │
   │                       │                      Found: 'bool'. It is not compatible with the other type.
   │                       Invalid return

error[E04010]: cannot infer type
   ┌─ tests/move_2024/typing/lambda_return_mismatched.move:20:25
   │
20 │             return (&0, vector[])
   │                         ^^^^^^^^ Could not infer this type. Try adding an annotation

error[E04007]: incompatible types
   ┌─ tests/move_2024/typing/lambda_return_mismatched.move:24:23
   │
23 │             if (cond) return (&0, vector[0]);
   │                              --------------- Found expression list of length 2: '(&{integer}, vector<{integer}>)'. It is not compatible with the other type of length 3.
24 │             if (cond) return (&0, vector[0], 1);
   │                       ^^^^^^^^^^^^^^^^^^^^^^^^^
   │                       │      │
   │                       │      Found expression list of length 3: '(&{integer}, vector<{integer}>, {integer})'. It is not compatible with the other type of length 2.
   │                       Invalid return
