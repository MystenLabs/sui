note[I15006]: IDE path autocomplete
   ┌─ tests/move_check/ide_mode/named_struct_autocomplete.move:1:1
   │  
 1 │ ╭ module a::m {
 2 │ │ 
 3 │ │     struct A has copy, drop {
 4 │ │         x: u64
   · │
15 │ │     }
16 │ │ }
   │ ╰─^ Possible in-scope names
   │  
   = members: 'A -> a::m::A', 'B -> a::m::B', 'foo -> a::m::foo', or 'unit_test_poison -> a::m::unit_test_poison'
   = modules: 'Self -> a::m'
   = addresses: 'A -> 0x41', 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'
   = type params: 

note[I15006]: IDE path autocomplete
  ┌─ tests/move_check/ide_mode/named_struct_autocomplete.move:4:12
  │
4 │         x: u64
  │            ^^^ Possible in-scope names
  │
  = members: 'A -> a::m::A', 'B -> a::m::B', 'foo -> a::m::foo', or 'unit_test_poison -> a::m::unit_test_poison'
  = modules: 'Self -> a::m'
  = addresses: 'A -> 0x41', 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'
  = type params: 

note[I15006]: IDE path autocomplete
  ┌─ tests/move_check/ide_mode/named_struct_autocomplete.move:8:12
  │
8 │         a: A
  │            ^ Possible in-scope names
  │
  = members: 'A -> a::m::A', 'B -> a::m::B', 'foo -> a::m::foo', or 'unit_test_poison -> a::m::unit_test_poison'
  = modules: 'Self -> a::m'
  = addresses: 'A -> 0x41', 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'
  = type params: 

note[I15006]: IDE path autocomplete
   ┌─ tests/move_check/ide_mode/named_struct_autocomplete.move:12:18
   │
12 │         let _s = B { a: A { x: 0 } };
   │                  ^ Possible in-scope names
   │
   = members: 'A -> a::m::A', 'B -> a::m::B', 'foo -> a::m::foo', or 'unit_test_poison -> a::m::unit_test_poison'
   = modules: 'Self -> a::m'
   = addresses: 'A -> 0x41', 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'
   = type params: 

note[I15006]: IDE path autocomplete
   ┌─ tests/move_check/ide_mode/named_struct_autocomplete.move:12:25
   │
12 │         let _s = B { a: A { x: 0 } };
   │                         ^ Possible in-scope names
   │
   = members: 'A -> a::m::A', 'B -> a::m::B', 'foo -> a::m::foo', or 'unit_test_poison -> a::m::unit_test_poison'
   = modules: 'Self -> a::m'
   = addresses: 'A -> 0x41', 'B -> 0x42', 'K -> 0x19', 'M -> 0x40', 'a -> 0x44', 'b -> 0x45', 'k -> 0x19', 'std -> 0x1', or 'sui -> 0x2'
   = type params: 

note[I15001]: IDE dot autocomplete
   ┌─ tests/move_check/ide_mode/named_struct_autocomplete.move:13:23
   │
13 │         let _tmp1 = _s.;
   │                       ^ Possible dot names: 'a'

error[E01002]: unexpected token
   ┌─ tests/move_check/ide_mode/named_struct_autocomplete.move:13:24
   │
13 │         let _tmp1 = _s.;
   │                        ^
   │                        │
   │                        Unexpected ';'
   │                        Expected an identifier or a decimal number

note[I15001]: IDE dot autocomplete
   ┌─ tests/move_check/ide_mode/named_struct_autocomplete.move:14:24
   │
14 │         let _tmp2 = _s.a.;
   │                        ^ Possible dot names: 'a'

note[I15001]: IDE dot autocomplete
   ┌─ tests/move_check/ide_mode/named_struct_autocomplete.move:14:25
   │
14 │         let _tmp2 = _s.a.;
   │                         ^ Possible dot names: 'x'

error[E01002]: unexpected token
   ┌─ tests/move_check/ide_mode/named_struct_autocomplete.move:14:26
   │
14 │         let _tmp2 = _s.a.;
   │                          ^
   │                          │
   │                          Unexpected ';'
   │                          Expected an identifier or a decimal number

