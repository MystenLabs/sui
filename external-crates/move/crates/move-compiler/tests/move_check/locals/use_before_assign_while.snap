error[E06002]: use of unassigned variable
  ┌─ tests/move_check/locals/use_before_assign_while.move:4:32
  │
3 │         let x: u64;
  │             - The variable 'x' might not have a value. The variable must be assigned a value before being used.
4 │         while (cond) { let y = move x + 1; x = 0; y; }
  │                                ^^^^^^ Invalid usage of unassigned variable 'x'

error[E06002]: use of unassigned variable
  ┌─ tests/move_check/locals/use_before_assign_while.move:9:32
  │
8 │         let x: u64;
  │             - The variable 'x' might not have a value. The variable must be assigned a value before being used.
9 │         while (cond) { let y = move x + 1; if (cond) { continue }; x = 0; y; }
  │                                ^^^^^^ Invalid usage of unassigned variable 'x'

error[E06002]: use of unassigned variable
   ┌─ tests/move_check/locals/use_before_assign_while.move:14:32
   │
13 │         let x: u64;
   │             - The variable 'x' might not have a value. The variable must be assigned a value before being used.
14 │         while (cond) { let y = &x; _ = move y; x = 0 }
   │                                ^^ Invalid usage of unassigned variable 'x'

error[E06002]: use of unassigned variable
   ┌─ tests/move_check/locals/use_before_assign_while.move:19:32
   │
18 │         let x: u64;
   │             - The variable 'x' does not have a value. The variable must be assigned a value before being used.
19 │         while (cond) { let y = &x; _ = move y; if (cond) { x = 0 }; break }
   │                                ^^ Invalid usage of unassigned variable 'x'

warning[W09003]: unused assignment
   ┌─ tests/move_check/locals/use_before_assign_while.move:19:60
   │
19 │         while (cond) { let y = &x; _ = move y; if (cond) { x = 0 }; break }
   │                                                            ^ Unused assignment for variable 'x'. Consider removing, replacing with '_', or prefixing with '_' (e.g., '_x')
   │
   = This warning can be suppressed with '#[allow(unused_assignment)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

