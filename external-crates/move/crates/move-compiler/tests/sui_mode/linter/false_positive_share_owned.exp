warning[Lint W99000]: possible owned object share
   ┌─ tests/sui_mode/linter/false_positive_share_owned.move:12:9
   │
 6 │     struct Obj has key, store {
   │                         ----- Potentially an owned object because 'store' grants access to public transfers
   ·
10 │     public fun arg_object(o: Obj) {
   │                           - A potentially owned object coming from here
11 │         let arg = o;
12 │         transfer::public_share_object(arg);
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │         │                             │
   │         │                             Creating a fresh object and sharing it within the same function will ensure this does not abort.
   │         Potential abort from a (potentially) owned object created by a different transaction.
   │
   = This warning can be suppressed with '#[allow(lint(share_owned))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W99000]: possible owned object share
   ┌─ tests/sui_mode/linter/false_positive_share_owned.move:38:9
   │
27 │     fun make_obj(_: X, ctx: &mut sui::tx_context::TxContext): Obj {
   │                                                               --- A potentially owned object coming from here
   ·
33 │         transfer::transfer(o, sui::tx_context::sender(ctx));
   │         --------------------------------------------------- Transferred as an owned object here
   ·
38 │         transfer::share_object(o);
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^
   │         │                      │
   │         │                      Creating a fresh object and sharing it within the same function will ensure this does not abort.
   │         Potential abort from a (potentially) owned object created by a different transaction.
   │
   = This warning can be suppressed with '#[allow(lint(share_owned))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

