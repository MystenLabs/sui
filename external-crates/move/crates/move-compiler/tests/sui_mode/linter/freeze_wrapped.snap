warning[Lint W99004]: attempting to freeze wrapped objects
   ┌─ tests/sui_mode/linter/freeze_wrapped.move:43:40
   │
15 │         inner: Inner,
   │                ----- The field of this type is a wrapped object
   ·
43 │         transfer::public_freeze_object(w);
   │                                        ^ Freezing an object of type 'Wrapper' also freezes all objects wrapped in its field 'inner'.
   │
   = This warning can be suppressed with '#[allow(lint(freeze_wrapped))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W99004]: attempting to freeze wrapped objects
   ┌─ tests/sui_mode/linter/freeze_wrapped.move:47:40
   │
 9 │     struct Inner has key, store {
   │            ----- Indirectly wrapped object is of this type
   ·
24 │         s: S,
   │            - The field of this type indirectly contains a wrapped object
   ·
47 │         transfer::public_freeze_object(w);
   │                                        ^ Freezing an object of type 'IndirectWrapper' also freezes all objects wrapped in its field 's'.
   │
   = This warning can be suppressed with '#[allow(lint(freeze_wrapped))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W99004]: attempting to freeze wrapped objects
   ┌─ tests/sui_mode/linter/freeze_wrapped.move:52:40
   │
15 │         inner: Inner,
   │                ----- The field of this type is a wrapped object
   ·
52 │         transfer::public_freeze_object(v);
   │                                        ^ Freezing an object of type 'Wrapper' also freezes all objects wrapped in its field 'inner'.
   │
   = This warning can be suppressed with '#[allow(lint(freeze_wrapped))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W99004]: attempting to freeze wrapped objects
   ┌─ tests/sui_mode/linter/freeze_wrapped.move:56:40
   │
29 │         inner: T,
   │                - The field of this type is a wrapped object
   ·
56 │         transfer::public_freeze_object(w);
   │                                        ^ Freezing an object of type 'GenWrapper' also freezes all objects wrapped in its field 'inner'.
   │
   = This warning can be suppressed with '#[allow(lint(freeze_wrapped))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W99004]: attempting to freeze wrapped objects
   ┌─ tests/sui_mode/linter/freeze_wrapped.move:60:40
   │
32 │     struct S2<T: key + store> has store {
   │               - Indirectly wrapped object is of this type
   ·
38 │         inner: S2<T>,
   │                ----- The field of this type indirectly contains a wrapped object
   ·
60 │         transfer::public_freeze_object(w);
   │                                        ^ Freezing an object of type 'IndirectGenWrapper' also freezes all objects wrapped in its field 'inner'.
   │
   = This warning can be suppressed with '#[allow(lint(freeze_wrapped))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W99004]: attempting to freeze wrapped objects
   ┌─ tests/sui_mode/linter/freeze_wrapped.move:64:40
   │
15 │         inner: Inner,
   │                ----- The field of this type is a wrapped object
   ·
64 │         transfer::public_freeze_object({ transfer::public_freeze_object(w1) ; w2});
   │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Freezing an object of type 'Wrapper' also freezes all objects wrapped in its field 'inner'.
   │
   = This warning can be suppressed with '#[allow(lint(freeze_wrapped))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning[Lint W99004]: attempting to freeze wrapped objects
   ┌─ tests/sui_mode/linter/freeze_wrapped.move:64:73
   │
15 │         inner: Inner,
   │                ----- The field of this type is a wrapped object
   ·
64 │         transfer::public_freeze_object({ transfer::public_freeze_object(w1) ; w2});
   │                                                                         ^^ Freezing an object of type 'Wrapper' also freezes all objects wrapped in its field 'inner'.
   │
   = This warning can be suppressed with '#[allow(lint(freeze_wrapped))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

