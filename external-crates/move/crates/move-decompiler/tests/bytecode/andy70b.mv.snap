---
source: crates/move-decompiler/tests/tests.rs
---
// Auto-generated by Move decompiler

module e14edd90e55069be679479d7067ca9e3caf1542cf4ca5b3a827979856888dd07::andy70b;

// -- structs -- 

public struct ANDY70B has drop { dummy_field: bool }

// -- constants -- 

const C0: vector<u8> = vec![49u8, 49u8, 49u8, 49u8, 49u8, 49u8, 49u8, 49u8, 49u8, 32u8, 32u8, 32u8];

const C1: vector<u8> = vec![65u8, 78u8, 68u8, 89u8, 55u8, 48u8, 66u8, 32u8, 32u8, 32u8, 32u8, 32u8];

const C2: vector<u8> = vec![65u8, 78u8, 68u8, 89u8, 55u8, 48u8, 66u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8];

const C3: vector<u8> = vec![84u8, 104u8, 101u8, 32u8, 102u8, 105u8, 114u8, 115u8, 116u8, 32u8, 116u8, 114u8, 117u8, 116u8, 104u8, 32u8, 116u8, 101u8, 114u8, 109u8, 105u8, 110u8, 97u8, 108u8, 32u8, 99u8, 111u8, 105u8, 110u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8];

const C4: vector<u8> = vec![104u8, 116u8, 116u8, 112u8, 115u8, 58u8, 47u8, 47u8, 100u8, 100u8, 46u8, 100u8, 101u8, 120u8, 115u8, 99u8, 114u8, 101u8, 101u8, 110u8, 101u8, 114u8, 46u8, 99u8, 111u8, 109u8, 47u8, 100u8, 115u8, 45u8, 100u8, 97u8, 116u8, 97u8, 47u8, 116u8, 111u8, 107u8, 101u8, 110u8, 115u8, 47u8, 115u8, 111u8, 108u8, 97u8, 110u8, 97u8, 47u8, 54u8, 57u8, 80u8, 52u8, 99u8, 106u8, 86u8, 120u8, 83u8, 98u8, 114u8, 71u8, 102u8, 107u8, 115u8, 53u8, 98u8, 99u8, 65u8, 67u8, 53u8, 121u8, 74u8, 71u8, 119u8, 82u8, 66u8, 118u8, 121u8, 101u8, 90u8, 57u8, 101u8, 120u8, 68u8, 109u8, 104u8, 111u8, 86u8, 67u8, 105u8, 116u8, 86u8, 84u8, 46u8, 112u8, 110u8, 103u8, 63u8, 99u8, 108u8, 97u8, 105u8, 109u8, 73u8, 100u8, 61u8, 75u8, 112u8, 106u8, 88u8, 75u8, 54u8, 78u8, 72u8, 73u8, 102u8, 114u8, 66u8, 78u8, 118u8, 69u8, 90u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8, 32u8];

// -- functions -- 

fun init(l0: 0xe14edd90e55069be679479d7067ca9e3caf1542cf4ca5b3a827979856888dd07::andy70b::ANDY70B, l1: &mut 0x2::tx_context::TxContext) {
    {
        let l2 = 0xe14edd90e55069be679479d7067ca9e3caf1542cf4ca5b3a827979856888dd07::andy70b::trim_right(C0);
        let l4 = &l2.len();
        let l10 = 0x1::ascii::into_bytes(0x1::string::to_ascii(0x1::string::utf8(0xe14edd90e55069be679479d7067ca9e3caf1542cf4ca5b3a827979856888dd07::andy70b::trim_right(C1))));
        let l9 = 0xe14edd90e55069be679479d7067ca9e3caf1542cf4ca5b3a827979856888dd07::andy70b::trim_right(C2);
        let l5 = 0xe14edd90e55069be679479d7067ca9e3caf1542cf4ca5b3a827979856888dd07::andy70b::trim_right(C3);
        let l6 = 0xe14edd90e55069be679479d7067ca9e3caf1542cf4ca5b3a827979856888dd07::andy70b::trim_right(C4);
        if (&l6.len() == 0u64) {
            let l3 = 0x1::option::none();
        } else {
            l3 = 0x1::option::some(0x2::url::new_unsafe_from_bytes(l6));
        };
        let l7 = l3;
        (reg_32, reg_33) = 0x2::coin::create_currency(l0, l4as u8, l10, l9, l5, l7, l1);
        let l8 = reg_33;
        0x2::transfer::public_transfer(reg_32, 0x2::tx_context::sender(freeze(l1)));
        0x2::transfer::public_share_object(l8);
        return
    }
}

fun trim_right(l0: vector<u8>): vector<u8> {
    {
        let l2 = l0;
        let l1 = 32u8;
        let l3 = &l1;
        while (&l2.len() > 0u64) {
            if (&(&l2)[&l2.len() - 1u64] != l3) {
                
            } else {
                continue
            }
        };
        return l2
    }
}
