
running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 3 tests
Decompiling function unpack
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_0 = Move(lcl_0)
        reg_1 = Unpack(reg_0)
        Return(reg_1)

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 1,
    edge_count: 0,
}
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    None,
)
Decompiling function unpack_bar
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_0 = Move(lcl_0)
        reg_1, reg_2 = Unpack(reg_0)
        Return(reg_2, reg_1)

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 1,
    edge_count: 0,
}
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    None,
)
Unpack variant ref lhs: []
Unpack variant lhs: []
Unpack variant ref lhs: []
Unpack variant lhs: []
Unpack variant ref lhs: []
Unpack variant lhs: []
Unpack variant ref lhs: [4]
Unpack variant lhs: [6]
Unpack variant ref lhs: [11, 12]
Unpack variant lhs: [14, 15]
Unpack variant ref lhs: [7, 8]
Unpack variant mut ref lhs: [10, 11]
Unpack variant ref lhs: [7]
Unpack variant mut ref lhs: [9]
Unpack variant ref lhs: [7]
Unpack variant ref lhs: [9]
Unpack variant ref lhs: [7, 8]
Unpack variant ref lhs: [10, 11]
Decompiling function is_blue
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_0 = Move(lcl_0)
        lcl_3 = reg_0
        reg_1 = ImmBorrow(lcl_3)
        lcl_2 = reg_1
        reg_2 = Copy(lcl_2)
        Switch(reg_2) Case: Red (lbl 6), Case: Green (lbl 11), Case: Blue (lbl 16)

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        reg_3 = Move(lcl_2)
        Drop(3)
        lcl_1 = Immediate(false)
        Jump(LBL_22)

STACKLESS BYTECODE BLOCK:
      Label LBL_11:
        reg_5 = Move(lcl_2)
        Drop(5)
        lcl_1 = Immediate(false)
        Jump(LBL_22)

STACKLESS BYTECODE BLOCK:
      Label LBL_16:
        reg_7 = Move(lcl_2)
        UnpackVariantImmRef(reg_7)
        reg_8 = Move(lcl_3)
        UnpackVariant(reg_8)
        lcl_1 = Immediate(true)

STACKLESS BYTECODE BLOCK:
      Label LBL_22:
        reg_10 = Move(lcl_1)
        Return(reg_10)

Input: {NodeIndex(0): Variants(NodeIndex(0), (0, false), [NodeIndex(6), NodeIndex(11), NodeIndex(16)]), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(22))), NodeIndex(11): Code(NodeIndex(11), (11, false), Some(NodeIndex(22))), NodeIndex(16): Code(NodeIndex(16), (16, false), Some(NodeIndex(22))), NodeIndex(22): Code(NodeIndex(22), (22, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 23,
    edge_count: 6,
    edges: (0, 6), (0, 11), (0, 16), (6, 22), (11, 22), (16, 22),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(2) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(7) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(12) with no outs: None
Node NodeIndex(13) with no outs: None
Node NodeIndex(14) with no outs: None
Node NodeIndex(15) with no outs: None
Node NodeIndex(17) with no outs: None
Node NodeIndex(18) with no outs: None
Node NodeIndex(19) with no outs: None
Node NodeIndex(20) with no outs: None
Node NodeIndex(21) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(16),
                children: [],
            },
            Node {
                value: NodeIndex(6),
                children: [],
            },
            Node {
                value: NodeIndex(11),
                children: [],
            },
            Node {
                value: NodeIndex(22),
                children: [],
            },
        ],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(22),
    (
        22,
        false,
    ),
    None,
)
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(22),
    ),
)
Structuring Code Node: Code(
    NodeIndex(11),
    (
        11,
        false,
    ),
    Some(
        NodeIndex(22),
    ),
)
Structuring Code Node: Code(
    NodeIndex(16),
    (
        16,
        false,
    ),
    Some(
        NodeIndex(22),
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(11): Seq(
        [
            Block(
                (
                    11,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(16): Seq(
        [
            Block(
                (
                    16,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(22): Seq(
        [
            Block(
                (
                    22,
                    false,
                ),
            ),
        ],
    ),
}
Decompiling function is_green
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_0 = Move(lcl_0)
        lcl_3 = reg_0
        reg_1 = ImmBorrow(lcl_3)
        lcl_2 = reg_1
        reg_2 = Copy(lcl_2)
        Switch(reg_2) Case: Red (lbl 6), Case: Green (lbl 11), Case: Blue (lbl 18)

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        reg_3 = Move(lcl_2)
        Drop(3)
        lcl_1 = Immediate(false)
        Jump(LBL_22)

STACKLESS BYTECODE BLOCK:
      Label LBL_11:
        reg_5 = Move(lcl_2)
        UnpackVariantImmRef(reg_5)
        reg_6 = Move(lcl_3)
        UnpackVariant(reg_6)
        lcl_1 = Immediate(true)
        Jump(LBL_22)

STACKLESS BYTECODE BLOCK:
      Label LBL_18:
        reg_8 = Move(lcl_2)
        Drop(8)
        lcl_1 = Immediate(false)

STACKLESS BYTECODE BLOCK:
      Label LBL_22:
        reg_10 = Move(lcl_1)
        Return(reg_10)

Input: {NodeIndex(0): Variants(NodeIndex(0), (0, false), [NodeIndex(6), NodeIndex(11), NodeIndex(18)]), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(22))), NodeIndex(11): Code(NodeIndex(11), (11, false), Some(NodeIndex(22))), NodeIndex(18): Code(NodeIndex(18), (18, false), Some(NodeIndex(22))), NodeIndex(22): Code(NodeIndex(22), (22, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 23,
    edge_count: 6,
    edges: (0, 6), (0, 11), (0, 18), (6, 22), (11, 22), (18, 22),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(2) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(7) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(12) with no outs: None
Node NodeIndex(13) with no outs: None
Node NodeIndex(14) with no outs: None
Node NodeIndex(15) with no outs: None
Node NodeIndex(16) with no outs: None
Node NodeIndex(17) with no outs: None
Node NodeIndex(19) with no outs: None
Node NodeIndex(20) with no outs: None
Node NodeIndex(21) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(22),
                children: [],
            },
            Node {
                value: NodeIndex(6),
                children: [],
            },
            Node {
                value: NodeIndex(18),
                children: [],
            },
            Node {
                value: NodeIndex(11),
                children: [],
            },
        ],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(22),
    (
        22,
        false,
    ),
    None,
)
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(22),
    ),
)
Structuring Code Node: Code(
    NodeIndex(11),
    (
        11,
        false,
    ),
    Some(
        NodeIndex(22),
    ),
)
Structuring Code Node: Code(
    NodeIndex(18),
    (
        18,
        false,
    ),
    Some(
        NodeIndex(22),
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(11): Seq(
        [
            Block(
                (
                    11,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(18): Seq(
        [
            Block(
                (
                    18,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(22): Seq(
        [
            Block(
                (
                    22,
                    false,
                ),
            ),
        ],
    ),
}
Decompiling function is_red
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_0 = Move(lcl_0)
        lcl_3 = reg_0
        reg_1 = ImmBorrow(lcl_3)
        lcl_2 = reg_1
        reg_2 = Copy(lcl_2)
        Switch(reg_2) Case: Red (lbl 6), Case: Green (lbl 13), Case: Blue (lbl 18)

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        reg_3 = Move(lcl_2)
        UnpackVariantImmRef(reg_3)
        reg_4 = Move(lcl_3)
        UnpackVariant(reg_4)
        lcl_1 = Immediate(true)
        Jump(LBL_22)

STACKLESS BYTECODE BLOCK:
      Label LBL_13:
        reg_6 = Move(lcl_2)
        Drop(6)
        lcl_1 = Immediate(false)
        Jump(LBL_22)

STACKLESS BYTECODE BLOCK:
      Label LBL_18:
        reg_8 = Move(lcl_2)
        Drop(8)
        lcl_1 = Immediate(false)

STACKLESS BYTECODE BLOCK:
      Label LBL_22:
        reg_10 = Move(lcl_1)
        Return(reg_10)

Input: {NodeIndex(0): Variants(NodeIndex(0), (0, false), [NodeIndex(6), NodeIndex(13), NodeIndex(18)]), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(22))), NodeIndex(13): Code(NodeIndex(13), (13, false), Some(NodeIndex(22))), NodeIndex(18): Code(NodeIndex(18), (18, false), Some(NodeIndex(22))), NodeIndex(22): Code(NodeIndex(22), (22, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 23,
    edge_count: 6,
    edges: (0, 6), (0, 13), (0, 18), (6, 22), (13, 22), (18, 22),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(2) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(7) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(11) with no outs: None
Node NodeIndex(12) with no outs: None
Node NodeIndex(14) with no outs: None
Node NodeIndex(15) with no outs: None
Node NodeIndex(16) with no outs: None
Node NodeIndex(17) with no outs: None
Node NodeIndex(19) with no outs: None
Node NodeIndex(20) with no outs: None
Node NodeIndex(21) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(22),
                children: [],
            },
            Node {
                value: NodeIndex(13),
                children: [],
            },
            Node {
                value: NodeIndex(18),
                children: [],
            },
            Node {
                value: NodeIndex(6),
                children: [],
            },
        ],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(22),
    (
        22,
        false,
    ),
    None,
)
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(22),
    ),
)
Structuring Code Node: Code(
    NodeIndex(13),
    (
        13,
        false,
    ),
    Some(
        NodeIndex(22),
    ),
)
Structuring Code Node: Code(
    NodeIndex(18),
    (
        18,
        false,
    ),
    Some(
        NodeIndex(22),
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(13): Seq(
        [
            Block(
                (
                    13,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(18): Seq(
        [
            Block(
                (
                    18,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(22): Seq(
        [
            Block(
                (
                    22,
                    false,
                ),
            ),
        ],
    ),
}
Decompiling function inf_loop_0
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        Jump(LBL_0)

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(0)))}
CFG: Graph {
    Ty: "Directed",
    node_count: 1,
    edge_count: 1,
    edges: (0, 0),
}
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [],
    },
)
Loop heads: {
    NodeIndex(0),
}
Structuring loop at node NodeIndex(0)
Structuring Latch Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(0),
    ),
)
Loop nodes: {NodeIndex(0)}, Successor nodes: {}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    Block(
                        (
                            0,
                            false,
                        ),
                    ),
                    Continue,
                ],
            ),
        ],
    ),
)
Decompiling function inf_loop_1
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        Jump(LBL_0)

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(0)))}
CFG: Graph {
    Ty: "Directed",
    node_count: 1,
    edge_count: 1,
    edges: (0, 0),
}
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [],
    },
)
Loop heads: {
    NodeIndex(0),
}
Structuring loop at node NodeIndex(0)
Structuring Latch Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(0),
    ),
)
Loop nodes: {NodeIndex(0)}, Successor nodes: {}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    Block(
                        (
                            0,
                            false,
                        ),
                    ),
                    Continue,
                ],
            ),
        ],
    ),
)
Decompiling function loop_test
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        lcl_0 = Immediate(U64(0))

Decompiling function get_area
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_0 = Move(lcl_0)
        lcl_4 = reg_0
        reg_1 = ImmBorrow(lcl_4)
        lcl_3 = reg_1
        reg_2 = Copy(lcl_3)
        Switch(reg_2) Case: Square (lbl 6), Case: Triangle (lbl 17)

STACKLESS BYTECODE BLOCK:
      Label LBL_2:
        reg_1 = Move(lcl_0)
        reg_3 = Add(reg_1, Immediate(U64(1)))
        lcl_0 = reg_3
        reg_4 = Copy(lcl_0)
        reg_6 = GreaterThanOrEqual(reg_4, Immediate(U64(10)))
        JumpIf(reg_6, LBL_10, LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        reg_3 = Move(lcl_3)
        reg_4 = UnpackVariantImmRef(reg_3)
        Drop(4)
        reg_5 = Move(lcl_4)
        reg_6 = UnpackVariant(reg_5)
        lcl_7 = reg_6
        reg_7 = Copy(lcl_7)
        reg_8 = Move(lcl_7)
        reg_9 = Multiply(reg_7, reg_8)
        lcl_1 = reg_9
        Jump(LBL_33)

STACKLESS BYTECODE BLOCK:
      Label LBL_10:
        Jump(LBL_11)

STACKLESS BYTECODE BLOCK:
      Label LBL_17:
        reg_10 = Move(lcl_3)
        reg_11, reg_12 = UnpackVariantImmRef(reg_10)
        Drop(12)
        Drop(11)
        reg_13 = Move(lcl_4)
        reg_14, reg_15 = UnpackVariant(reg_13)
        lcl_2 = reg_15
        lcl_5 = reg_14
        reg_16 = Move(lcl_2)
        lcl_6 = reg_16
        reg_17 = Move(lcl_5)
        reg_18 = Move(lcl_6)
        reg_19 = Multiply(reg_17, reg_18)
        reg_21 = Divide(reg_19, Immediate(U64(2)))
        lcl_1 = reg_21

STACKLESS BYTECODE BLOCK:
      Label LBL_11:
        Return()

STACKLESS BYTECODE BLOCK:
      Label LBL_33:
        reg_22 = Move(lcl_1)
        Return(reg_22)

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(2))), NodeIndex(2): Condition(NodeIndex(2), (2, false), NodeIndex(10), NodeIndex(2)), NodeIndex(10): Code(NodeIndex(10), (10, false), Some(NodeIndex(11))), NodeIndex(11): Code(NodeIndex(11), (11, false), None)}
Input: {NodeIndex(0): Variants(NodeIndex(0), (0, false), [NodeIndex(6), NodeIndex(17)]), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(33))), NodeIndex(17): Code(NodeIndex(17), (17, false), Some(NodeIndex(33))), NodeIndex(33): Code(NodeIndex(33), (33, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 12,
    edge_count: 4,
    edges: (0, 2), (2, 10), (2, 2), (10, 11),
}
CFG: Graph {
    Ty: "Directed",
    node_count: 34,
    edge_count: 4,
    edges: (0, 6), (0, 17), (6, 33), (17, 33),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(1) with no outs: None
Node NodeIndex(2) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(7) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(11) with no outs: None
Node NodeIndex(12) with no outs: None
Node NodeIndex(13) with no outs: None
Node NodeIndex(14) with no outs: None
Node NodeIndex(15) with no outs: None
Node NodeIndex(16) with no outs: None
Node NodeIndex(18) with no outs: None
Node NodeIndex(19) with no outs: None
Node NodeIndex(20) with no outs: None
Node NodeIndex(21) with no outs: None
Node NodeIndex(22) with no outs: None
Node NodeIndex(23) with no outs: None
Node NodeIndex(24) with no outs: None
Node NodeIndex(25) with no outs: None
Node NodeIndex(26) with no outs: None
Node NodeIndex(27) with no outs: None
Node NodeIndex(28) with no outs: None
Node NodeIndex(29) with no outs: None
Node NodeIndex(30) with no outs: None
Node NodeIndex(31) with no outs: None
Node NodeIndex(32) with no outs: None
Node NodeIndex(6) with no outs: None
Node NodeIndex(7) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(2),
                children: [
                    Node {
                        value: NodeIndex(10),
                        children: [
                            Node {
                                value: NodeIndex(11),
                                children: [],
                            },
                        ],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(2),
}
Structuring Code Node: Code(
    NodeIndex(11),
    (
        11,
        false,
    ),
    None,
)
Structuring Node: NodeIndex(10)
Blocks: {
    NodeIndex(11): Seq(
        [
            Block(
                (
                    11,
                    false,
                ),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(10),
    (
        10,
        false,
    ),
    Some(
        NodeIndex(11),
    ),
)
Structuring loop at node NodeIndex(2)
Structuring Latch Node: Condition(
    NodeIndex(2),
    (
        2,
        false,
    ),
    NodeIndex(10),
    NodeIndex(2),
)
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(33),
                children: [],
            },
            Node {
                value: NodeIndex(6),
                children: [],
            },
            Node {
                value: NodeIndex(17),
                children: [],
            },
        ],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(33),
    (
        33,
        false,
    ),
    None,
)
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(33),
    ),
)
Structuring Code Node: Code(
    NodeIndex(17),
    (
        17,
        false,
    ),
    Some(
        NodeIndex(33),
    ),
)
Loop nodes: {NodeIndex(2)}, Successor nodes: {NodeIndex(10)}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            2,
                            false,
                        ),
                        Break,
                        None,
                    ),
                    Continue,
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(17): Seq(
        [
            Block(
                (
                    17,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(33): Seq(
        [
            Block(
                (
                    33,
                    false,
                ),
            ),
        ],
    ),
}
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(2): Seq(
        [
            While(
                (
                    2,
                    false,
                ),
                Seq(
                    [
                        Continue,
                    ],
                ),
            ),
            Seq(
                [
                    Block(
                        (
                            10,
                            false,
                        ),
                    ),
                    Block(
                        (
                            11,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Decompiling function get_square_side
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_0 = Move(lcl_0)
        lcl_2 = reg_0
        reg_1 = Copy(lcl_2)
        lcl_1 = reg_1
        reg_2 = Copy(lcl_1)
        Switch(reg_2) Case: Square (lbl 12), Case: Triangle (lbl 6)

Decompiling function loop_test_2
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        lcl_0 = Immediate(U64(0))

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        reg_3 = Move(lcl_2)
        Drop(3)
        reg_4 = Move(lcl_1)
        Drop(4)
        reg_5 = Constant(Constant { type_: U64, data: [1, 0, 0, 0, 0, 0, 0, 0] })
        Abort(reg_5)

STACKLESS BYTECODE BLOCK:
      Label LBL_12:
        reg_6 = Move(lcl_1)
        reg_7 = UnpackVariantImmRef(reg_6)
        Drop(7)
        reg_8 = Move(lcl_2)
        reg_9 = UnpackVariantImmRef(reg_8)
        reg_10 = ReadRef(reg_9)
        Return(reg_10)

STACKLESS BYTECODE BLOCK:
      Label LBL_2:
        reg_1 = Move(lcl_0)
        reg_3 = Add(reg_1, Immediate(U64(1)))
        lcl_0 = reg_3
        reg_4 = Copy(lcl_0)
        reg_6 = Modulo(reg_4, Immediate(U64(2)))
        reg_8 = Equal(reg_6, Immediate(U64(1)))
        JumpIf(reg_8, LBL_12, LBL_13)

STACKLESS BYTECODE BLOCK:
      Label LBL_12:
        Jump(LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_13:
        reg_9 = Copy(lcl_0)
        reg_11 = Equal(reg_9, Immediate(U64(10)))
        JumpIf(reg_11, LBL_17, LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_17:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(2))), NodeIndex(2): Condition(NodeIndex(2), (2, false), NodeIndex(12), NodeIndex(13)), NodeIndex(12): Code(NodeIndex(12), (12, false), Some(NodeIndex(2))), NodeIndex(13): Condition(NodeIndex(13), (13, false), NodeIndex(17), NodeIndex(2)), NodeIndex(17): Code(NodeIndex(17), (17, false), None)}
Input: {NodeIndex(0): Variants(NodeIndex(0), (0, false), [NodeIndex(12), NodeIndex(6)]), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(12))), NodeIndex(12): Code(NodeIndex(12), (12, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 13,
    edge_count: 3,
    edges: (0, 12), (0, 6), (6, 12),
}
CFG: Graph {
    Ty: "Directed",
    node_count: 18,
    edge_count: 6,
    edges: (0, 2), (2, 12), (2, 13), (12, 2), (13, 17), (13, 2),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(2) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(7) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(11) with no outs: None
Node NodeIndex(1) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(6) with no outs: None
Node NodeIndex(7) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(12),
                children: [],
            },
            Node {
                value: NodeIndex(6),
                children: [],
            },
        ],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(12),
    (
        12,
        false,
    ),
    None,
)
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(12),
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(12): Seq(
        [
            Block(
                (
                    12,
                    false,
                ),
            ),
        ],
    ),
}
Node NodeIndex(11) with no outs: None
Node NodeIndex(14) with no outs: None
Node NodeIndex(15) with no outs: None
Node NodeIndex(16) with no outs: None
Decompiling function get_triangle_size
test STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_0 = Move(lcl_0)
        lcl_3 = reg_0
        reg_1 = Copy(lcl_3)
        lcl_2 = reg_1
        reg_2 = Copy(lcl_2)
        Switch(reg_2) Case: Square (lbl 6), Case: Triangle (lbl 12)

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        reg_3 = Move(lcl_3)
        Drop(3)
        reg_4 = Move(lcl_2)
        Drop(4)
        reg_5 = Constant(Constant { type_: U64, data: [1, 0, 0, 0, 0, 0, 0, 0] })
        Abort(reg_5)

STACKLESS BYTECODE BLOCK:
      Label LBL_12:
        reg_6 = Move(lcl_2)
        reg_7, reg_8 = UnpackVariantImmRef(reg_6)
        Drop(8)
        Drop(7)
        reg_9 = Move(lcl_3)
        reg_10, reg_11 = UnpackVariantImmRef(reg_9)
        lcl_1 = reg_11
        lcl_4 = reg_10
        reg_12 = Move(lcl_1)
        lcl_5 = reg_12
        reg_13 = Move(lcl_4)
        reg_14 = ReadRef(reg_13)
        reg_15 = Move(lcl_5)
        reg_16 = ReadRef(reg_15)
        Return(reg_16, reg_14)

Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(2),
                children: [
                    Node {
                        value: NodeIndex(12),
                        children: [],
                    },
                    Node {
                        value: NodeIndex(13),
                        children: [
                            Node {
                                value: NodeIndex(17),
                                children: [],
                            },
                        ],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(2),
}
run_move_test::misc/modules.txt ... [0m[32mok[0m
Structuring Latch Node: Code(
    NodeIndex(12),
    (
        12,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Structuring Code Node: Code(
    NodeIndex(17),
    (
        17,
        false,
    ),
    None,
)
Structuring Latch Node: Condition(
    NodeIndex(13),
    (
        13,
        false,
    ),
    NodeIndex(17),
    NodeIndex(2),
)
Structuring loop at node NodeIndex(2)
Structuring Node: NodeIndex(2)
Blocks: {
    NodeIndex(12): Seq(
        [
            Block(
                (
                    12,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
    NodeIndex(13): JumpIf(
        (
            13,
            false,
        ),
        NodeIndex(17),
        NodeIndex(2),
    ),
    NodeIndex(17): Seq(
        [
            Block(
                (
                    17,
                    false,
                ),
            ),
        ],
    ),
}
Input: {NodeIndex(0): Variants(NodeIndex(0), (0, false), [NodeIndex(6), NodeIndex(12)]), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(12))), NodeIndex(12): Code(NodeIndex(12), (12, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 13,
    edge_count: 3,
    edges: (0, 6), (0, 12), (6, 12),
}
Loop nodes: {NodeIndex(2), NodeIndex(12), NodeIndex(13)}, Successor nodes: {NodeIndex(17)}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            2,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        12,
                                        false,
                                    ),
                                ),
                                Continue,
                            ],
                        ),
                        Some(
                            Seq(
                                [],
                            ),
                        ),
                    ),
                ],
            ),
            Seq(
                [
                    IfElse(
                        (
                            13,
                            false,
                        ),
                        Break,
                        None,
                    ),
                    Continue,
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(2): Seq(
        [
            Loop(
                Seq(
                    [
                        Seq(
                            [
                                IfElse(
                                    (
                                        2,
                                        false,
                                    ),
                                    Seq(
                                        [
                                            Block(
                                                (
                                                    12,
                                                    false,
                                                ),
                                            ),
                                            Continue,
                                        ],
                                    ),
                                    Some(
                                        Seq(
                                            [],
                                        ),
                                    ),
                                ),
                            ],
                        ),
                        Seq(
                            [
                                IfElse(
                                    (
                                        13,
                                        false,
                                    ),
                                    Break,
                                    None,
                                ),
                                Continue,
                            ],
                        ),
                    ],
                ),
            ),
            Seq(
                [
                    Block(
                        (
                            17,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Node NodeIndex(1) with no outs: None
Node NodeIndex(2) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(7) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(11) with no outs: None
Decompiling function loop_test_3
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        lcl_0 = Immediate(U64(0))

STACKLESS BYTECODE BLOCK:
      Label LBL_2:
        reg_1 = Copy(lcl_0)
        reg_3 = GreaterThanOrEqual(reg_1, Immediate(U64(10)))
        JumpIf(reg_3, LBL_6, LBL_7)

Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(6),
                children: [],
            },
            Node {
                value: NodeIndex(12),
                children: [],
            },
        ],
    },
)
Loop heads: {}
STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        Jump(LBL_12)

STACKLESS BYTECODE BLOCK:
      Label LBL_7:
        reg_4 = Move(lcl_0)
        reg_6 = Add(reg_4, Immediate(U64(1)))
        lcl_0 = reg_6
        Jump(LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_12:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(2))), NodeIndex(2): Condition(NodeIndex(2), (2, false), NodeIndex(6), NodeIndex(7)), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(12))), NodeIndex(7): Code(NodeIndex(7), (7, false), Some(NodeIndex(2))), NodeIndex(12): Code(NodeIndex(12), (12, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 13,
    edge_count: 5,
    edges: (0, 2), (2, 6), (2, 7), (6, 12), (7, 2),
}
Structuring Code Node: Code(
    NodeIndex(12),
    (
        12,
        false,
    ),
    None,
)
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(12),
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(12): Seq(
        [
            Block(
                (
                    12,
                    false,
                ),
            ),
        ],
    ),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(3) with no outs: None
Decompiling function set_square_side
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_0 = Move(lcl_0)
        lcl_3 = reg_0
        reg_1 = Copy(lcl_3)
        NoOperation
        lcl_2 = reg_1
        reg_2 = Copy(lcl_2)
        Switch(reg_2) Case: Square (lbl 13), Case: Triangle (lbl 7)

STACKLESS BYTECODE BLOCK:
      Label LBL_7:
        reg_3 = Move(lcl_3)
        Drop(3)
        reg_4 = Move(lcl_2)
        Drop(4)
        reg_5 = Constant(Constant { type_: U64, data: [1, 0, 0, 0, 0, 0, 0, 0] })
        Abort(reg_5)

STACKLESS BYTECODE BLOCK:
      Label LBL_13:
        reg_6 = Move(lcl_2)
        reg_7 = UnpackVariantImmRef(reg_6)
        Drop(7)
        reg_8 = Move(lcl_3)
        reg_9 = UnpackVariant(reg_8)
        lcl_4 = reg_9
        reg_10 = Move(lcl_1)
        reg_11 = Move(lcl_4)
        WriteRef(reg_11, reg_10)
        Return()

Node NodeIndex(10) with no outs: None
Node NodeIndex(11) with no outs: None
Input: {NodeIndex(0): Variants(NodeIndex(0), (0, false), [NodeIndex(13), NodeIndex(7)]), NodeIndex(7): Code(NodeIndex(7), (7, false), Some(NodeIndex(13))), NodeIndex(13): Code(NodeIndex(13), (13, false), None)}
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(2),
                children: [
                    Node {
                        value: NodeIndex(6),
                        children: [
                            Node {
                                value: NodeIndex(12),
                                children: [],
                            },
                        ],
                    },
                    Node {
                        value: NodeIndex(7),
                        children: [],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(2),
}
CFG: Graph {
    Ty: "Directed",
    node_count: 14,
    edge_count: 3,
    edges: (0, 13), (0, 7), (7, 13),
}
Structuring Code Node: Code(
    NodeIndex(12),
    (
        12,
        false,
    ),
    None,
)
Structuring Node: NodeIndex(6)
Blocks: {
    NodeIndex(12): Seq(
        [
            Block(
                (
                    12,
                    false,
                ),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(12),
    ),
)
Structuring Latch Node: Code(
    NodeIndex(7),
    (
        7,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Structuring loop at node NodeIndex(2)
Node NodeIndex(1) with no outs: None
Node NodeIndex(2) with no outs: None
Structuring Node: NodeIndex(2)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
            Block(
                (
                    12,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(7): Seq(
        [
            Block(
                (
                    7,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
}
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(6) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(11) with no outs: None
Node NodeIndex(12) with no outs: None
Loop nodes: {NodeIndex(7), NodeIndex(2)}, Successor nodes: {NodeIndex(6)}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            2,
                            false,
                        ),
                        Break,
                        Some(
                            Seq(
                                [
                                    Block(
                                        (
                                            7,
                                            false,
                                        ),
                                    ),
                                    Continue,
                                ],
                            ),
                        ),
                    ),
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(2): Seq(
        [
            While(
                (
                    2,
                    false,
                ),
                Seq(
                    [
                        Seq(
                            [
                                Block(
                                    (
                                        7,
                                        false,
                                    ),
                                ),
                                Continue,
                            ],
                        ),
                    ],
                ),
            ),
            Seq(
                [
                    Block(
                        (
                            6,
                            false,
                        ),
                    ),
                    Block(
                        (
                            12,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(13),
                children: [],
            },
            Node {
                value: NodeIndex(7),
                children: [],
            },
        ],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(13),
    (
        13,
        false,
    ),
    None,
)
Structuring Code Node: Code(
    NodeIndex(7),
    (
        7,
        false,
    ),
    Some(
        NodeIndex(13),
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(7): Seq(
        [
            Block(
                (
                    7,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(13): Seq(
        [
            Block(
                (
                    13,
                    false,
                ),
            ),
        ],
    ),
}
Decompiling function loop_test_4
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        Jump(LBL_0)

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(0)))}
CFG: Graph {
    Ty: "Directed",
    node_count: 1,
    edge_count: 1,
    edges: (0, 0),
}
Decompiling function set_triangle_dimensions
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_0 = Move(lcl_0)
        lcl_5 = reg_0
        reg_1 = Copy(lcl_5)
        NoOperation
        lcl_4 = reg_1
        reg_2 = Copy(lcl_4)
        Switch(reg_2) Case: Square (lbl 7), Case: Triangle (lbl 13)

STACKLESS BYTECODE BLOCK:
      Label LBL_7:
        reg_3 = Move(lcl_5)
        Drop(3)
        reg_4 = Move(lcl_4)
        Drop(4)
        reg_5 = Constant(Constant { type_: U64, data: [1, 0, 0, 0, 0, 0, 0, 0] })
        Abort(reg_5)

Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [],
    },
)
Loop heads: {
    NodeIndex(0),
}
Structuring loop at node NodeIndex(0)
Structuring Latch Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(0),
    ),
)
Loop nodes: {NodeIndex(0)}, Successor nodes: {}
STACKLESS BYTECODE BLOCK:
      Label LBL_13:
        reg_6 = Move(lcl_4)
        reg_7, reg_8 = UnpackVariantImmRef(reg_6)
        Drop(8)
        Drop(7)
        reg_9 = Move(lcl_5)
        reg_10, reg_11 = UnpackVariant(reg_9)
        lcl_3 = reg_11
        lcl_6 = reg_10
        reg_12 = Move(lcl_3)
        lcl_7 = reg_12
        reg_13 = Move(lcl_1)
        reg_14 = Move(lcl_6)
        WriteRef(reg_14, reg_13)
        reg_15 = Move(lcl_2)
        reg_16 = Move(lcl_7)
        WriteRef(reg_16, reg_15)
        Return()

Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    Block(
                        (
                            0,
                            false,
                        ),
                    ),
                    Continue,
                ],
            ),
        ],
    ),
)
Decompiling function loop_test_5
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        Jump(LBL_0)

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(0)))}
Input: {NodeIndex(0): Variants(NodeIndex(0), (0, false), [NodeIndex(7), NodeIndex(13)]), NodeIndex(7): Code(NodeIndex(7), (7, false), Some(NodeIndex(13))), NodeIndex(13): Code(NodeIndex(13), (13, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 14,
    edge_count: 3,
    edges: (0, 7), (0, 13), (7, 13),
}
CFG: Graph {
    Ty: "Directed",
    node_count: 1,
    edge_count: 1,
    edges: (0, 0),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(2) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(6) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(11) with no outs: None
Node NodeIndex(12) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [],
    },
)
Loop heads: {
    NodeIndex(0),
}
Structuring loop at node NodeIndex(0)
Structuring Latch Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(0),
    ),
)
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(13),
                children: [],
            },
            Node {
                value: NodeIndex(7),
                children: [],
            },
        ],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(13),
    (
        13,
        false,
    ),
    None,
)
Structuring Code Node: Code(
    NodeIndex(7),
    (
        7,
        false,
    ),
    Some(
        NodeIndex(13),
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(7): Seq(
        [
            Block(
                (
                    7,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(13): Seq(
        [
            Block(
                (
                    13,
                    false,
                ),
            ),
        ],
    ),
}
Loop nodes: {NodeIndex(0)}, Successor nodes: {}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    Block(
                        (
                            0,
                            false,
                        ),
                    ),
                    Continue,
                ],
            ),
        ],
    ),
)
Decompiling function loop_test_6
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        lcl_1 = Immediate(U64(0))

STACKLESS BYTECODE BLOCK:
      Label LBL_2:
        reg_1 = Copy(lcl_0)
        reg_3 = GreaterThan(reg_1, Immediate(U64(10)))
        JumpIf(reg_3, LBL_6, LBL_16)

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        Jump(LBL_7)

STACKLESS BYTECODE BLOCK:
      Label LBL_7:
        reg_4 = Move(lcl_1)
        reg_6 = Add(reg_4, Immediate(U64(1)))
        lcl_1 = reg_6
        reg_7 = Move(lcl_0)
        reg_9 = Subtract(reg_7, Immediate(U64(1)))
        lcl_0 = reg_9
        Jump(LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_16:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(2))), NodeIndex(2): Condition(NodeIndex(2), (2, false), NodeIndex(6), NodeIndex(16)), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(7))), NodeIndex(7): Code(NodeIndex(7), (7, false), Some(NodeIndex(2))), NodeIndex(16): Code(NodeIndex(16), (16, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 17,
    edge_count: 5,
    edges: (0, 2), (2, 6), (2, 16), (6, 7), (7, 2),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(11) with no outs: None
Node NodeIndex(12) with no outs: None
Node NodeIndex(13) with no outs: None
Node NodeIndex(14) with no outs: None
Node NodeIndex(15) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(2),
                children: [
                    Node {
                        value: NodeIndex(16),
                        children: [],
                    },
                    Node {
                        value: NodeIndex(6),
                        children: [
                            Node {
                                value: NodeIndex(7),
                                children: [],
                            },
                        ],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(2),
}
Structuring Latch Node: Code(
    NodeIndex(7),
    (
        7,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Structuring Node: NodeIndex(6)
Blocks: {
    NodeIndex(7): Seq(
        [
            Block(
                (
                    7,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(7),
    ),
)
Structuring Code Node: Code(
    NodeIndex(16),
    (
        16,
        false,
    ),
    None,
)
Structuring loop at node NodeIndex(2)
Structuring Node: NodeIndex(2)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
            Block(
                (
                    7,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
    NodeIndex(16): Seq(
        [
            Block(
                (
                    16,
                    false,
                ),
            ),
        ],
    ),
}
Loop nodes: {NodeIndex(6), NodeIndex(7), NodeIndex(2)}, Successor nodes: {NodeIndex(16)}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            2,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        6,
                                        false,
                                    ),
                                ),
                                Block(
                                    (
                                        7,
                                        false,
                                    ),
                                ),
                                Continue,
                            ],
                        ),
                        Some(
                            Break,
                        ),
                    ),
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(2): Seq(
        [
            While(
                (
                    2,
                    false,
                ),
                Seq(
                    [
                        Seq(
                            [
                                Block(
                                    (
                                        6,
                                        false,
                                    ),
                                ),
                                Block(
                                    (
                                        7,
                                        false,
                                    ),
                                ),
                                Continue,
                            ],
                        ),
                    ],
                ),
            ),
            Seq(
                [
                    Block(
                        (
                            16,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Decompiling function loop_test_7
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_1 = Move(lcl_0)
        reg_2 = Multiply(Immediate(U64(10)), reg_1)
        Return(reg_2)

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 1,
    edge_count: 0,
}
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    None,
)
Decompiling function loop_test_8
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        lcl_0 = Immediate(U64(0))
        lcl_1 = Immediate(U64(5))

STACKLESS BYTECODE BLOCK:
      Label LBL_4:
        reg_2 = Move(lcl_0)
        reg_4 = Add(reg_2, Immediate(U64(1)))
        lcl_0 = reg_4
        reg_5 = Move(lcl_1)
        reg_7 = Multiply(reg_5, Immediate(U64(2)))
        reg_8 = Copy(lcl_0)
        reg_9 = Add(reg_7, reg_8)
        lcl_1 = reg_9
        reg_10 = Copy(lcl_0)
        reg_12 = GreaterThanOrEqual(reg_10, Immediate(U64(10)))
        JumpIf(reg_12, LBL_18, LBL_4)

STACKLESS BYTECODE BLOCK:
      Label LBL_18:
        Jump(LBL_19)

STACKLESS BYTECODE BLOCK:
      Label LBL_19:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(4))), NodeIndex(4): Condition(NodeIndex(4), (4, false), NodeIndex(18), NodeIndex(4)), NodeIndex(18): Code(NodeIndex(18), (18, false), Some(NodeIndex(19))), NodeIndex(19): Code(NodeIndex(19), (19, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 20,
    edge_count: 4,
    edges: (0, 4), (4, 18), (4, 4), (18, 19),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(2) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(6) with no outs: None
Node NodeIndex(7) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(11) with no outs: None
Node NodeIndex(12) with no outs: None
Node NodeIndex(13) with no outs: None
Node NodeIndex(14) with no outs: None
Node NodeIndex(15) with no outs: None
Node NodeIndex(16) with no outs: None
Node NodeIndex(17) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(4),
                children: [
                    Node {
                        value: NodeIndex(18),
                        children: [
                            Node {
                                value: NodeIndex(19),
                                children: [],
                            },
                        ],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(4),
}
Structuring Code Node: Code(
    NodeIndex(19),
    (
        19,
        false,
    ),
    None,
)
Structuring Node: NodeIndex(18)
Blocks: {
    NodeIndex(19): Seq(
        [
            Block(
                (
                    19,
                    false,
                ),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(18),
    (
        18,
        false,
    ),
    Some(
        NodeIndex(19),
    ),
)
Structuring loop at node NodeIndex(4)
Structuring Latch Node: Condition(
    NodeIndex(4),
    (
        4,
        false,
    ),
    NodeIndex(18),
    NodeIndex(4),
)
Loop nodes: {NodeIndex(4)}, Successor nodes: {NodeIndex(18)}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            4,
                            false,
                        ),
                        Break,
                        None,
                    ),
                    Continue,
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(4): Seq(
        [
            While(
                (
                    4,
                    false,
                ),
                Seq(
                    [
                        Continue,
                    ],
                ),
            ),
            Seq(
                [
                    Block(
                        (
                            18,
                            false,
                        ),
                    ),
                    Block(
                        (
                            19,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(4),
    ),
)
Decompiling function loop_test_9
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        lcl_0 = Immediate(U64(0))
        lcl_1 = Immediate(U64(5))

STACKLESS BYTECODE BLOCK:
      Label LBL_4:
        reg_2 = Move(lcl_0)
        reg_4 = Add(reg_2, Immediate(U64(1)))
        lcl_0 = reg_4
        reg_5 = Move(lcl_1)
        reg_7 = Multiply(reg_5, Immediate(U64(2)))
        reg_8 = Copy(lcl_0)
        reg_9 = Add(reg_7, reg_8)
        lcl_1 = reg_9
        reg_10 = Copy(lcl_1)
        reg_11 = Copy(lcl_0)
        reg_13 = Modulo(reg_11, Immediate(U64(3)))
        reg_14 = Subtract(reg_10, reg_13)
        reg_16 = Equal(reg_14, Immediate(U64(0)))
        JumpIf(reg_16, LBL_22, LBL_25)

STACKLESS BYTECODE BLOCK:
      Label LBL_22:
        Jump(LBL_23)

STACKLESS BYTECODE BLOCK:
      Label LBL_23:
        lcl_1 = Immediate(U64(100))

STACKLESS BYTECODE BLOCK:
      Label LBL_25:
        reg_18 = Copy(lcl_0)
        reg_20 = GreaterThanOrEqual(reg_18, Immediate(U64(10)))
        JumpIf(reg_20, LBL_29, LBL_4)

STACKLESS BYTECODE BLOCK:
      Label LBL_29:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(4))), NodeIndex(4): Condition(NodeIndex(4), (4, false), NodeIndex(22), NodeIndex(25)), NodeIndex(22): Code(NodeIndex(22), (22, false), Some(NodeIndex(23))), NodeIndex(23): Code(NodeIndex(23), (23, false), Some(NodeIndex(25))), NodeIndex(25): Condition(NodeIndex(25), (25, false), NodeIndex(29), NodeIndex(4)), NodeIndex(29): Code(NodeIndex(29), (29, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 30,
    edge_count: 7,
    edges: (0, 4), (4, 22), (4, 25), (22, 23), (23, 25), (25, 29), (25, 4),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(2) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(6) with no outs: None
Node NodeIndex(7) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(11) with no outs: None
Node NodeIndex(12) with no outs: None
Node NodeIndex(13) with no outs: None
Node NodeIndex(14) with no outs: None
Node NodeIndex(15) with no outs: None
Node NodeIndex(16) with no outs: None
Node NodeIndex(17) with no outs: None
Node NodeIndex(18) with no outs: None
Node NodeIndex(19) with no outs: None
Node NodeIndex(20) with no outs: None
Node NodeIndex(21) with no outs: None
Node NodeIndex(24) with no outs: None
Node NodeIndex(26) with no outs: None
Node NodeIndex(27) with no outs: None
Node NodeIndex(28) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(4),
                children: [
                    Node {
                        value: NodeIndex(25),
                        children: [
                            Node {
                                value: NodeIndex(29),
                                children: [],
                            },
                        ],
                    },
                    Node {
                        value: NodeIndex(22),
                        children: [
                            Node {
                                value: NodeIndex(23),
                                children: [],
                            },
                        ],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(4),
}
Structuring Code Node: Code(
    NodeIndex(29),
    (
        29,
        false,
    ),
    None,
)
Structuring Latch Node: Condition(
    NodeIndex(25),
    (
        25,
        false,
    ),
    NodeIndex(29),
    NodeIndex(4),
)
Structuring Code Node: Code(
    NodeIndex(23),
    (
        23,
        false,
    ),
    Some(
        NodeIndex(25),
    ),
)
Structuring Node: NodeIndex(22)
Blocks: {
    NodeIndex(23): Seq(
        [
            Block(
                (
                    23,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(25): JumpIf(
        (
            25,
            false,
        ),
        NodeIndex(29),
        NodeIndex(4),
    ),
    NodeIndex(29): Seq(
        [
            Block(
                (
                    29,
                    false,
                ),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(22),
    (
        22,
        false,
    ),
    Some(
        NodeIndex(23),
    ),
)
Structuring loop at node NodeIndex(4)
Structuring Node: NodeIndex(4)
Blocks: {
    NodeIndex(22): Seq(
        [
            Block(
                (
                    22,
                    false,
                ),
            ),
            Block(
                (
                    23,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(25): JumpIf(
        (
            25,
            false,
        ),
        NodeIndex(29),
        NodeIndex(4),
    ),
    NodeIndex(29): Seq(
        [
            Block(
                (
                    29,
                    false,
                ),
            ),
        ],
    ),
}
Loop nodes: {NodeIndex(25), NodeIndex(4), NodeIndex(22), NodeIndex(23)}, Successor nodes: {NodeIndex(29)}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            4,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        22,
                                        false,
                                    ),
                                ),
                                Block(
                                    (
                                        23,
                                        false,
                                    ),
                                ),
                            ],
                        ),
                        Some(
                            Seq(
                                [],
                            ),
                        ),
                    ),
                    Seq(
                        [
                            IfElse(
                                (
                                    25,
                                    false,
                                ),
                                Break,
                                None,
                            ),
                            Continue,
                        ],
                    ),
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(4): Seq(
        [
            Loop(
                Seq(
                    [
                        IfElse(
                            (
                                4,
                                false,
                            ),
                            Seq(
                                [
                                    Block(
                                        (
                                            22,
                                            false,
                                        ),
                                    ),
                                    Block(
                                        (
                                            23,
                                            false,
                                        ),
                                    ),
                                ],
                            ),
                            Some(
                                Seq(
                                    [],
                                ),
                            ),
                        ),
                        Seq(
                            [
                                IfElse(
                                    (
                                        25,
                                        false,
                                    ),
                                    Break,
                                    None,
                                ),
                                Continue,
                            ],
                        ),
                    ],
                ),
            ),
            Seq(
                [
                    Block(
                        (
                            29,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(4),
    ),
)
Decompiling function do_0
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 1,
    edge_count: 0,
}
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    None,
)
Decompiling function do_1
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 1,
    edge_count: 0,
}
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    None,
)
Decompiling function do_2
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 1,
    edge_count: 0,
}
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    None,
)
Decompiling function do_3
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 1,
    edge_count: 0,
}
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    None,
)
test run_move_test::enum/modules.txt ... [0m[32mok[0m
Decompiling function do_4
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 1,
    edge_count: 0,
}
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [],
    },
)
Loop heads: {}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    None,
)
Decompiling function loop_0
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_0 = Copy(lcl_0)
        reg_1 = ReadRef(reg_0)
        JumpIf(reg_1, LBL_3, LBL_7)

STACKLESS BYTECODE BLOCK:
      Label LBL_3:
        Jump(LBL_4)

STACKLESS BYTECODE BLOCK:
      Label LBL_4:
        reg_2 = Copy(lcl_0)
        Call do_0(reg_2)
        Jump(LBL_0)

STACKLESS BYTECODE BLOCK:
      Label LBL_7:
        reg_3 = Move(lcl_0)
        Call do_1(reg_3)
        Return()

Input: {NodeIndex(0): Condition(NodeIndex(0), (0, false), NodeIndex(3), NodeIndex(7)), NodeIndex(3): Code(NodeIndex(3), (3, false), Some(NodeIndex(4))), NodeIndex(4): Code(NodeIndex(4), (4, false), Some(NodeIndex(0))), NodeIndex(7): Code(NodeIndex(7), (7, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 8,
    edge_count: 4,
    edges: (0, 3), (0, 7), (3, 4), (4, 0),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(2) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(6) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(7),
                children: [],
            },
            Node {
                value: NodeIndex(3),
                children: [
                    Node {
                        value: NodeIndex(4),
                        children: [],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(0),
}
Structuring Latch Node: Code(
    NodeIndex(4),
    (
        4,
        false,
    ),
    Some(
        NodeIndex(0),
    ),
)
Structuring Node: NodeIndex(3)
Blocks: {
    NodeIndex(4): Seq(
        [
            Block(
                (
                    4,
                    false,
                ),
            ),
            Jump(
                NodeIndex(0),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(3),
    (
        3,
        false,
    ),
    Some(
        NodeIndex(4),
    ),
)
Structuring Code Node: Code(
    NodeIndex(7),
    (
        7,
        false,
    ),
    None,
)
Structuring loop at node NodeIndex(0)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(3): Seq(
        [
            Block(
                (
                    3,
                    false,
                ),
            ),
            Block(
                (
                    4,
                    false,
                ),
            ),
            Jump(
                NodeIndex(0),
            ),
        ],
    ),
    NodeIndex(7): Seq(
        [
            Block(
                (
                    7,
                    false,
                ),
            ),
        ],
    ),
}
Loop nodes: {NodeIndex(0), NodeIndex(4), NodeIndex(3)}, Successor nodes: {NodeIndex(7)}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            0,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        3,
                                        false,
                                    ),
                                ),
                                Block(
                                    (
                                        4,
                                        false,
                                    ),
                                ),
                                Continue,
                            ],
                        ),
                        Some(
                            Break,
                        ),
                    ),
                ],
            ),
        ],
    ),
)
Decompiling function loop_1
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        reg_0 = Copy(lcl_0)
        Call do_0(reg_0)

STACKLESS BYTECODE BLOCK:
      Label LBL_2:
        reg_1 = Copy(lcl_0)
        reg_2 = ReadRef(reg_1)
        JumpIf(reg_2, LBL_5, LBL_9)

STACKLESS BYTECODE BLOCK:
      Label LBL_5:
        Jump(LBL_6)

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        reg_3 = Copy(lcl_0)
        Call do_1(reg_3)
        Jump(LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_9:
        reg_4 = Move(lcl_0)
        Call do_2(reg_4)
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(2))), NodeIndex(2): Condition(NodeIndex(2), (2, false), NodeIndex(5), NodeIndex(9)), NodeIndex(5): Code(NodeIndex(5), (5, false), Some(NodeIndex(6))), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(2))), NodeIndex(9): Code(NodeIndex(9), (9, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 10,
    edge_count: 5,
    edges: (0, 2), (2, 5), (2, 9), (5, 6), (6, 2),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(7) with no outs: None
Node NodeIndex(8) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(2),
                children: [
                    Node {
                        value: NodeIndex(5),
                        children: [
                            Node {
                                value: NodeIndex(6),
                                children: [],
                            },
                        ],
                    },
                    Node {
                        value: NodeIndex(9),
                        children: [],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(2),
}
Structuring Latch Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Structuring Node: NodeIndex(5)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(5),
    (
        5,
        false,
    ),
    Some(
        NodeIndex(6),
    ),
)
Structuring Code Node: Code(
    NodeIndex(9),
    (
        9,
        false,
    ),
    None,
)
Structuring loop at node NodeIndex(2)
Structuring Node: NodeIndex(2)
Blocks: {
    NodeIndex(5): Seq(
        [
            Block(
                (
                    5,
                    false,
                ),
            ),
            Block(
                (
                    6,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
    NodeIndex(9): Seq(
        [
            Block(
                (
                    9,
                    false,
                ),
            ),
        ],
    ),
}
Loop nodes: {NodeIndex(2), NodeIndex(5), NodeIndex(6)}, Successor nodes: {NodeIndex(9)}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            2,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        5,
                                        false,
                                    ),
                                ),
                                Block(
                                    (
                                        6,
                                        false,
                                    ),
                                ),
                                Continue,
                            ],
                        ),
                        Some(
                            Break,
                        ),
                    ),
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(2): Seq(
        [
            While(
                (
                    2,
                    false,
                ),
                Seq(
                    [
                        Seq(
                            [
                                Block(
                                    (
                                        5,
                                        false,
                                    ),
                                ),
                                Block(
                                    (
                                        6,
                                        false,
                                    ),
                                ),
                                Continue,
                            ],
                        ),
                    ],
                ),
            ),
            Seq(
                [
                    Block(
                        (
                            9,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Decompiling function while_test
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        lcl_0 = Immediate(U64(0))

STACKLESS BYTECODE BLOCK:
      Label LBL_2:
        reg_1 = Copy(lcl_0)
        reg_3 = LessThan(reg_1, Immediate(U64(10)))
        JumpIf(reg_3, LBL_6, LBL_12)

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        Jump(LBL_7)

STACKLESS BYTECODE BLOCK:
      Label LBL_7:
        reg_4 = Move(lcl_0)
        reg_6 = Add(reg_4, Immediate(U64(1)))
        lcl_0 = reg_6
        Jump(LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_12:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(2))), NodeIndex(2): Condition(NodeIndex(2), (2, false), NodeIndex(6), NodeIndex(12)), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(7))), NodeIndex(7): Code(NodeIndex(7), (7, false), Some(NodeIndex(2))), NodeIndex(12): Code(NodeIndex(12), (12, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 13,
    edge_count: 5,
    edges: (0, 2), (2, 6), (2, 12), (6, 7), (7, 2),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(11) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(2),
                children: [
                    Node {
                        value: NodeIndex(12),
                        children: [],
                    },
                    Node {
                        value: NodeIndex(6),
                        children: [
                            Node {
                                value: NodeIndex(7),
                                children: [],
                            },
                        ],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(2),
}
Structuring Latch Node: Code(
    NodeIndex(7),
    (
        7,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Structuring Node: NodeIndex(6)
Blocks: {
    NodeIndex(7): Seq(
        [
            Block(
                (
                    7,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(7),
    ),
)
Structuring Code Node: Code(
    NodeIndex(12),
    (
        12,
        false,
    ),
    None,
)
Structuring loop at node NodeIndex(2)
Structuring Node: NodeIndex(2)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
            Block(
                (
                    7,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
    NodeIndex(12): Seq(
        [
            Block(
                (
                    12,
                    false,
                ),
            ),
        ],
    ),
}
Loop nodes: {NodeIndex(2), NodeIndex(7), NodeIndex(6)}, Successor nodes: {NodeIndex(12)}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            2,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        6,
                                        false,
                                    ),
                                ),
                                Block(
                                    (
                                        7,
                                        false,
                                    ),
                                ),
                                Continue,
                            ],
                        ),
                        Some(
                            Break,
                        ),
                    ),
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(2): Seq(
        [
            While(
                (
                    2,
                    false,
                ),
                Seq(
                    [
                        Seq(
                            [
                                Block(
                                    (
                                        6,
                                        false,
                                    ),
                                ),
                                Block(
                                    (
                                        7,
                                        false,
                                    ),
                                ),
                                Continue,
                            ],
                        ),
                    ],
                ),
            ),
            Seq(
                [
                    Block(
                        (
                            12,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Decompiling function while_test_2
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        lcl_1 = Immediate(U64(0))

STACKLESS BYTECODE BLOCK:
      Label LBL_2:
        reg_1 = Copy(lcl_1)
        reg_3 = LessThan(reg_1, Immediate(U64(10)))
        JumpIf(reg_3, LBL_6, LBL_10)

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        Jump(LBL_7)

STACKLESS BYTECODE BLOCK:
      Label LBL_7:
        lcl_0 = Immediate(true)
        Jump(LBL_14)

STACKLESS BYTECODE BLOCK:
      Label LBL_10:
        reg_5 = Copy(lcl_1)
        reg_7 = Equal(reg_5, Immediate(U64(7)))
        lcl_0 = reg_7

STACKLESS BYTECODE BLOCK:
      Label LBL_14:
        reg_8 = Move(lcl_0)
        JumpIf(reg_8, LBL_16, LBL_21)

STACKLESS BYTECODE BLOCK:
      Label LBL_16:
        reg_9 = Move(lcl_1)
        reg_11 = Add(reg_9, Immediate(U64(1)))
        lcl_1 = reg_11
        Jump(LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_21:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(2))), NodeIndex(2): Condition(NodeIndex(2), (2, false), NodeIndex(6), NodeIndex(10)), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(7))), NodeIndex(7): Code(NodeIndex(7), (7, false), Some(NodeIndex(14))), NodeIndex(10): Code(NodeIndex(10), (10, false), Some(NodeIndex(14))), NodeIndex(14): Condition(NodeIndex(14), (14, false), NodeIndex(16), NodeIndex(21)), NodeIndex(16): Code(NodeIndex(16), (16, false), Some(NodeIndex(2))), NodeIndex(21): Code(NodeIndex(21), (21, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 22,
    edge_count: 9,
    edges: (0, 2), (2, 6), (2, 10), (6, 7), (7, 14), (10, 14), (14, 16), (14, 21), (16, 2),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(11) with no outs: None
Node NodeIndex(12) with no outs: None
Node NodeIndex(13) with no outs: None
Node NodeIndex(15) with no outs: None
Node NodeIndex(17) with no outs: None
Node NodeIndex(18) with no outs: None
Node NodeIndex(19) with no outs: None
Node NodeIndex(20) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(2),
                children: [
                    Node {
                        value: NodeIndex(14),
                        children: [
                            Node {
                                value: NodeIndex(16),
                                children: [],
                            },
                            Node {
                                value: NodeIndex(21),
                                children: [],
                            },
                        ],
                    },
                    Node {
                        value: NodeIndex(6),
                        children: [
                            Node {
                                value: NodeIndex(7),
                                children: [],
                            },
                        ],
                    },
                    Node {
                        value: NodeIndex(10),
                        children: [],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(2),
}
Structuring Latch Node: Code(
    NodeIndex(16),
    (
        16,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Structuring Code Node: Code(
    NodeIndex(21),
    (
        21,
        false,
    ),
    None,
)
Structuring Node: NodeIndex(14)
Blocks: {
    NodeIndex(16): Seq(
        [
            Block(
                (
                    16,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
    NodeIndex(21): Seq(
        [
            Block(
                (
                    21,
                    false,
                ),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(7),
    (
        7,
        false,
    ),
    Some(
        NodeIndex(14),
    ),
)
Structuring Node: NodeIndex(6)
Blocks: {
    NodeIndex(7): Seq(
        [
            Block(
                (
                    7,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(14): Seq(
        [
            IfElse(
                (
                    14,
                    false,
                ),
                Seq(
                    [
                        Block(
                            (
                                16,
                                false,
                            ),
                        ),
                        Jump(
                            NodeIndex(2),
                        ),
                    ],
                ),
                Some(
                    Jump(
                        NodeIndex(21),
                    ),
                ),
            ),
        ],
    ),
    NodeIndex(21): Seq(
        [
            Block(
                (
                    21,
                    false,
                ),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(7),
    ),
)
Structuring Code Node: Code(
    NodeIndex(10),
    (
        10,
        false,
    ),
    Some(
        NodeIndex(14),
    ),
)
Structuring loop at node NodeIndex(2)
Structuring Node: NodeIndex(2)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
            Block(
                (
                    7,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(10): Seq(
        [
            Block(
                (
                    10,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(14): Seq(
        [
            IfElse(
                (
                    14,
                    false,
                ),
                Seq(
                    [
                        Block(
                            (
                                16,
                                false,
                            ),
                        ),
                        Jump(
                            NodeIndex(2),
                        ),
                    ],
                ),
                Some(
                    Jump(
                        NodeIndex(21),
                    ),
                ),
            ),
        ],
    ),
    NodeIndex(21): Seq(
        [
            Block(
                (
                    21,
                    false,
                ),
            ),
        ],
    ),
}
Loop nodes: {NodeIndex(16), NodeIndex(2), NodeIndex(14), NodeIndex(6), NodeIndex(10), NodeIndex(7), NodeIndex(21)}, Successor nodes: {}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            2,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        6,
                                        false,
                                    ),
                                ),
                                Block(
                                    (
                                        7,
                                        false,
                                    ),
                                ),
                            ],
                        ),
                        Some(
                            Seq(
                                [
                                    Block(
                                        (
                                            10,
                                            false,
                                        ),
                                    ),
                                ],
                            ),
                        ),
                    ),
                    IfElse(
                        (
                            14,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        16,
                                        false,
                                    ),
                                ),
                                Continue,
                            ],
                        ),
                        Some(
                            Seq(
                                [],
                            ),
                        ),
                    ),
                ],
            ),
            Seq(
                [
                    Block(
                        (
                            21,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(2): Loop(
        Seq(
            [
                Seq(
                    [
                        IfElse(
                            (
                                2,
                                false,
                            ),
                            Seq(
                                [
                                    Block(
                                        (
                                            6,
                                            false,
                                        ),
                                    ),
                                    Block(
                                        (
                                            7,
                                            false,
                                        ),
                                    ),
                                ],
                            ),
                            Some(
                                Seq(
                                    [
                                        Block(
                                            (
                                                10,
                                                false,
                                            ),
                                        ),
                                    ],
                                ),
                            ),
                        ),
                        IfElse(
                            (
                                14,
                                false,
                            ),
                            Seq(
                                [
                                    Block(
                                        (
                                            16,
                                            false,
                                        ),
                                    ),
                                    Continue,
                                ],
                            ),
                            Some(
                                Seq(
                                    [],
                                ),
                            ),
                        ),
                    ],
                ),
                Seq(
                    [
                        Block(
                            (
                                21,
                                false,
                            ),
                        ),
                    ],
                ),
            ],
        ),
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Decompiling function while_test_3
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        lcl_0 = Immediate(U64(0))

STACKLESS BYTECODE BLOCK:
      Label LBL_2:
        reg_1 = Copy(lcl_0)
        reg_3 = LessThan(reg_1, Immediate(U64(10)))
        JumpIf(reg_3, LBL_6, LBL_23)

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        Jump(LBL_7)

STACKLESS BYTECODE BLOCK:
      Label LBL_7:
        reg_4 = Copy(lcl_0)
        reg_6 = Modulo(reg_4, Immediate(U64(2)))
        reg_8 = Equal(reg_6, Immediate(U64(0)))
        JumpIf(reg_8, LBL_13, LBL_18)

STACKLESS BYTECODE BLOCK:
      Label LBL_13:
        reg_9 = Move(lcl_0)
        reg_11 = Add(reg_9, Immediate(U64(1)))
        lcl_0 = reg_11
        Jump(LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_18:
        reg_12 = Move(lcl_0)
        reg_14 = Add(reg_12, Immediate(U64(2)))
        lcl_0 = reg_14
        Jump(LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_23:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(2))), NodeIndex(2): Condition(NodeIndex(2), (2, false), NodeIndex(6), NodeIndex(23)), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(7))), NodeIndex(7): Condition(NodeIndex(7), (7, false), NodeIndex(13), NodeIndex(18)), NodeIndex(13): Code(NodeIndex(13), (13, false), Some(NodeIndex(2))), NodeIndex(18): Code(NodeIndex(18), (18, false), Some(NodeIndex(2))), NodeIndex(23): Code(NodeIndex(23), (23, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 24,
    edge_count: 8,
    edges: (0, 2), (2, 6), (2, 23), (6, 7), (7, 13), (7, 18), (13, 2), (18, 2),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(10) with no outs: None
Node NodeIndex(11) with no outs: None
Node NodeIndex(12) with no outs: None
Node NodeIndex(14) with no outs: None
Node NodeIndex(15) with no outs: None
Node NodeIndex(16) with no outs: None
Node NodeIndex(17) with no outs: None
Node NodeIndex(19) with no outs: None
Node NodeIndex(20) with no outs: None
Node NodeIndex(21) with no outs: None
Node NodeIndex(22) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(2),
                children: [
                    Node {
                        value: NodeIndex(6),
                        children: [
                            Node {
                                value: NodeIndex(7),
                                children: [
                                    Node {
                                        value: NodeIndex(18),
                                        children: [],
                                    },
                                    Node {
                                        value: NodeIndex(13),
                                        children: [],
                                    },
                                ],
                            },
                        ],
                    },
                    Node {
                        value: NodeIndex(23),
                        children: [],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(2),
}
Structuring Latch Node: Code(
    NodeIndex(13),
    (
        13,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Structuring Latch Node: Code(
    NodeIndex(18),
    (
        18,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Structuring Node: NodeIndex(7)
Blocks: {
    NodeIndex(13): Seq(
        [
            Block(
                (
                    13,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
    NodeIndex(18): Seq(
        [
            Block(
                (
                    18,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
}
Structuring Node: NodeIndex(6)
Blocks: {
    NodeIndex(7): Seq(
        [
            IfElse(
                (
                    7,
                    false,
                ),
                Seq(
                    [
                        Block(
                            (
                                13,
                                false,
                            ),
                        ),
                        Jump(
                            NodeIndex(2),
                        ),
                    ],
                ),
                Some(
                    Seq(
                        [
                            Block(
                                (
                                    18,
                                    false,
                                ),
                            ),
                            Jump(
                                NodeIndex(2),
                            ),
                        ],
                    ),
                ),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(7),
    ),
)
Structuring Code Node: Code(
    NodeIndex(23),
    (
        23,
        false,
    ),
    None,
)
Structuring loop at node NodeIndex(2)
Structuring Node: NodeIndex(2)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
            IfElse(
                (
                    7,
                    false,
                ),
                Seq(
                    [
                        Block(
                            (
                                13,
                                false,
                            ),
                        ),
                        Jump(
                            NodeIndex(2),
                        ),
                    ],
                ),
                Some(
                    Seq(
                        [
                            Block(
                                (
                                    18,
                                    false,
                                ),
                            ),
                            Jump(
                                NodeIndex(2),
                            ),
                        ],
                    ),
                ),
            ),
        ],
    ),
    NodeIndex(23): Seq(
        [
            Block(
                (
                    23,
                    false,
                ),
            ),
        ],
    ),
}
Loop nodes: {NodeIndex(7), NodeIndex(18), NodeIndex(13), NodeIndex(6), NodeIndex(2)}, Successor nodes: {NodeIndex(23)}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            2,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        6,
                                        false,
                                    ),
                                ),
                                IfElse(
                                    (
                                        7,
                                        false,
                                    ),
                                    Seq(
                                        [
                                            Block(
                                                (
                                                    13,
                                                    false,
                                                ),
                                            ),
                                            Continue,
                                        ],
                                    ),
                                    Some(
                                        Seq(
                                            [
                                                Block(
                                                    (
                                                        18,
                                                        false,
                                                    ),
                                                ),
                                                Continue,
                                            ],
                                        ),
                                    ),
                                ),
                            ],
                        ),
                        Some(
                            Break,
                        ),
                    ),
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(2): Seq(
        [
            While(
                (
                    2,
                    false,
                ),
                Seq(
                    [
                        Seq(
                            [
                                Block(
                                    (
                                        6,
                                        false,
                                    ),
                                ),
                                IfElse(
                                    (
                                        7,
                                        false,
                                    ),
                                    Seq(
                                        [
                                            Block(
                                                (
                                                    13,
                                                    false,
                                                ),
                                            ),
                                            Continue,
                                        ],
                                    ),
                                    Some(
                                        Seq(
                                            [
                                                Block(
                                                    (
                                                        18,
                                                        false,
                                                    ),
                                                ),
                                                Continue,
                                            ],
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    ],
                ),
            ),
            Seq(
                [
                    Block(
                        (
                            23,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Decompiling function while_test_4
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        lcl_1 = Immediate(U64(0))

STACKLESS BYTECODE BLOCK:
      Label LBL_2:
        reg_1 = Copy(lcl_1)
        reg_3 = LessThan(reg_1, Immediate(U64(10)))
        JumpIf(reg_3, LBL_6, LBL_10)

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        Jump(LBL_7)

STACKLESS BYTECODE BLOCK:
      Label LBL_7:
        lcl_0 = Immediate(true)
        Jump(LBL_14)

STACKLESS BYTECODE BLOCK:
      Label LBL_10:
        reg_5 = Copy(lcl_1)
        reg_7 = Equal(reg_5, Immediate(U64(7)))
        lcl_0 = reg_7

STACKLESS BYTECODE BLOCK:
      Label LBL_14:
        reg_8 = Move(lcl_0)
        JumpIf(reg_8, LBL_16, LBL_32)

STACKLESS BYTECODE BLOCK:
      Label LBL_16:
        reg_9 = Copy(lcl_1)
        reg_11 = Modulo(reg_9, Immediate(U64(2)))
        reg_13 = Equal(reg_11, Immediate(U64(0)))
        JumpIf(reg_13, LBL_22, LBL_27)

STACKLESS BYTECODE BLOCK:
      Label LBL_22:
        reg_14 = Move(lcl_1)
        reg_16 = Add(reg_14, Immediate(U64(1)))
        lcl_1 = reg_16
        Jump(LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_27:
        reg_17 = Move(lcl_1)
        reg_19 = Add(reg_17, Immediate(U64(2)))
        lcl_1 = reg_19
        Jump(LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_32:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(2))), NodeIndex(2): Condition(NodeIndex(2), (2, false), NodeIndex(6), NodeIndex(10)), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(7))), NodeIndex(7): Code(NodeIndex(7), (7, false), Some(NodeIndex(14))), NodeIndex(10): Code(NodeIndex(10), (10, false), Some(NodeIndex(14))), NodeIndex(14): Condition(NodeIndex(14), (14, false), NodeIndex(16), NodeIndex(32)), NodeIndex(16): Condition(NodeIndex(16), (16, false), NodeIndex(22), NodeIndex(27)), NodeIndex(22): Code(NodeIndex(22), (22, false), Some(NodeIndex(2))), NodeIndex(27): Code(NodeIndex(27), (27, false), Some(NodeIndex(2))), NodeIndex(32): Code(NodeIndex(32), (32, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 33,
    edge_count: 12,
    edges: (0, 2), (2, 6), (2, 10), (6, 7), (7, 14), (10, 14), (14, 16), (14, 32), (16, 22), (16, 27), (22, 2), (27, 2),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(11) with no outs: None
Node NodeIndex(12) with no outs: None
Node NodeIndex(13) with no outs: None
Node NodeIndex(15) with no outs: None
Node NodeIndex(17) with no outs: None
Node NodeIndex(18) with no outs: None
Node NodeIndex(19) with no outs: None
Node NodeIndex(20) with no outs: None
Node NodeIndex(21) with no outs: None
Node NodeIndex(23) with no outs: None
Node NodeIndex(24) with no outs: None
Node NodeIndex(25) with no outs: None
Node NodeIndex(26) with no outs: None
Node NodeIndex(28) with no outs: None
Node NodeIndex(29) with no outs: None
Node NodeIndex(30) with no outs: None
Node NodeIndex(31) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(2),
                children: [
                    Node {
                        value: NodeIndex(6),
                        children: [
                            Node {
                                value: NodeIndex(7),
                                children: [],
                            },
                        ],
                    },
                    Node {
                        value: NodeIndex(10),
                        children: [],
                    },
                    Node {
                        value: NodeIndex(14),
                        children: [
                            Node {
                                value: NodeIndex(32),
                                children: [],
                            },
                            Node {
                                value: NodeIndex(16),
                                children: [
                                    Node {
                                        value: NodeIndex(22),
                                        children: [],
                                    },
                                    Node {
                                        value: NodeIndex(27),
                                        children: [],
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(2),
}
Structuring Latch Node: Code(
    NodeIndex(22),
    (
        22,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Structuring Latch Node: Code(
    NodeIndex(27),
    (
        27,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Structuring Node: NodeIndex(16)
Blocks: {
    NodeIndex(22): Seq(
        [
            Block(
                (
                    22,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
    NodeIndex(27): Seq(
        [
            Block(
                (
                    27,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(32),
    (
        32,
        false,
    ),
    None,
)
Structuring Node: NodeIndex(14)
Blocks: {
    NodeIndex(16): Seq(
        [
            IfElse(
                (
                    16,
                    false,
                ),
                Seq(
                    [
                        Block(
                            (
                                22,
                                false,
                            ),
                        ),
                        Jump(
                            NodeIndex(2),
                        ),
                    ],
                ),
                Some(
                    Seq(
                        [
                            Block(
                                (
                                    27,
                                    false,
                                ),
                            ),
                            Jump(
                                NodeIndex(2),
                            ),
                        ],
                    ),
                ),
            ),
        ],
    ),
    NodeIndex(32): Seq(
        [
            Block(
                (
                    32,
                    false,
                ),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(7),
    (
        7,
        false,
    ),
    Some(
        NodeIndex(14),
    ),
)
Structuring Node: NodeIndex(6)
Blocks: {
    NodeIndex(7): Seq(
        [
            Block(
                (
                    7,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(14): Seq(
        [
            IfElse(
                (
                    14,
                    false,
                ),
                Seq(
                    [
                        IfElse(
                            (
                                16,
                                false,
                            ),
                            Seq(
                                [
                                    Block(
                                        (
                                            22,
                                            false,
                                        ),
                                    ),
                                    Jump(
                                        NodeIndex(2),
                                    ),
                                ],
                            ),
                            Some(
                                Seq(
                                    [
                                        Block(
                                            (
                                                27,
                                                false,
                                            ),
                                        ),
                                        Jump(
                                            NodeIndex(2),
                                        ),
                                    ],
                                ),
                            ),
                        ),
                    ],
                ),
                Some(
                    Jump(
                        NodeIndex(32),
                    ),
                ),
            ),
        ],
    ),
    NodeIndex(32): Seq(
        [
            Block(
                (
                    32,
                    false,
                ),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(7),
    ),
)
Structuring Code Node: Code(
    NodeIndex(10),
    (
        10,
        false,
    ),
    Some(
        NodeIndex(14),
    ),
)
Structuring loop at node NodeIndex(2)
Structuring Node: NodeIndex(2)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
            Block(
                (
                    7,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(10): Seq(
        [
            Block(
                (
                    10,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(14): Seq(
        [
            IfElse(
                (
                    14,
                    false,
                ),
                Seq(
                    [
                        IfElse(
                            (
                                16,
                                false,
                            ),
                            Seq(
                                [
                                    Block(
                                        (
                                            22,
                                            false,
                                        ),
                                    ),
                                    Jump(
                                        NodeIndex(2),
                                    ),
                                ],
                            ),
                            Some(
                                Seq(
                                    [
                                        Block(
                                            (
                                                27,
                                                false,
                                            ),
                                        ),
                                        Jump(
                                            NodeIndex(2),
                                        ),
                                    ],
                                ),
                            ),
                        ),
                    ],
                ),
                Some(
                    Jump(
                        NodeIndex(32),
                    ),
                ),
            ),
        ],
    ),
    NodeIndex(32): Seq(
        [
            Block(
                (
                    32,
                    false,
                ),
            ),
        ],
    ),
}
Loop nodes: {NodeIndex(2), NodeIndex(32), NodeIndex(22), NodeIndex(7), NodeIndex(14), NodeIndex(6), NodeIndex(16), NodeIndex(10), NodeIndex(27)}, Successor nodes: {}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            2,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        6,
                                        false,
                                    ),
                                ),
                                Block(
                                    (
                                        7,
                                        false,
                                    ),
                                ),
                            ],
                        ),
                        Some(
                            Seq(
                                [
                                    Block(
                                        (
                                            10,
                                            false,
                                        ),
                                    ),
                                ],
                            ),
                        ),
                    ),
                    IfElse(
                        (
                            14,
                            false,
                        ),
                        Seq(
                            [
                                IfElse(
                                    (
                                        16,
                                        false,
                                    ),
                                    Seq(
                                        [
                                            Block(
                                                (
                                                    22,
                                                    false,
                                                ),
                                            ),
                                            Continue,
                                        ],
                                    ),
                                    Some(
                                        Seq(
                                            [
                                                Block(
                                                    (
                                                        27,
                                                        false,
                                                    ),
                                                ),
                                                Continue,
                                            ],
                                        ),
                                    ),
                                ),
                            ],
                        ),
                        Some(
                            Seq(
                                [],
                            ),
                        ),
                    ),
                ],
            ),
            Seq(
                [
                    Block(
                        (
                            32,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(2): Loop(
        Seq(
            [
                Seq(
                    [
                        IfElse(
                            (
                                2,
                                false,
                            ),
                            Seq(
                                [
                                    Block(
                                        (
                                            6,
                                            false,
                                        ),
                                    ),
                                    Block(
                                        (
                                            7,
                                            false,
                                        ),
                                    ),
                                ],
                            ),
                            Some(
                                Seq(
                                    [
                                        Block(
                                            (
                                                10,
                                                false,
                                            ),
                                        ),
                                    ],
                                ),
                            ),
                        ),
                        IfElse(
                            (
                                14,
                                false,
                            ),
                            Seq(
                                [
                                    IfElse(
                                        (
                                            16,
                                            false,
                                        ),
                                        Seq(
                                            [
                                                Block(
                                                    (
                                                        22,
                                                        false,
                                                    ),
                                                ),
                                                Continue,
                                            ],
                                        ),
                                        Some(
                                            Seq(
                                                [
                                                    Block(
                                                        (
                                                            27,
                                                            false,
                                                        ),
                                                    ),
                                                    Continue,
                                                ],
                                            ),
                                        ),
                                    ),
                                ],
                            ),
                            Some(
                                Seq(
                                    [],
                                ),
                            ),
                        ),
                    ],
                ),
                Seq(
                    [
                        Block(
                            (
                                32,
                                false,
                            ),
                        ),
                    ],
                ),
            ],
        ),
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Decompiling function while_test_5
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        lcl_0 = Immediate(U64(0))
        lcl_1 = Immediate(U64(0))
        lcl_2 = Immediate(U64(0))

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        reg_3 = Copy(lcl_0)
        reg_5 = LessThan(reg_3, Immediate(U64(10)))
        JumpIf(reg_5, LBL_10, LBL_33)

STACKLESS BYTECODE BLOCK:
      Label LBL_10:
        Jump(LBL_11)

STACKLESS BYTECODE BLOCK:
      Label LBL_11:
        reg_6 = Copy(lcl_1)
        reg_8 = LessThan(reg_6, Immediate(U64(10)))
        JumpIf(reg_8, LBL_15, LBL_28)

STACKLESS BYTECODE BLOCK:
      Label LBL_15:
        reg_9 = Move(lcl_2)
        reg_10 = Copy(lcl_0)
        reg_11 = Copy(lcl_1)
        reg_12 = Multiply(reg_10, reg_11)
        reg_13 = Copy(lcl_1)
        reg_14 = Add(reg_12, reg_13)
        reg_15 = Add(reg_9, reg_14)
        lcl_2 = reg_15
        reg_16 = Move(lcl_1)
        reg_18 = Add(reg_16, Immediate(U64(1)))
        lcl_1 = reg_18
        Jump(LBL_11)

STACKLESS BYTECODE BLOCK:
      Label LBL_28:
        reg_19 = Move(lcl_0)
        reg_21 = Add(reg_19, Immediate(U64(1)))
        lcl_0 = reg_21
        Jump(LBL_6)

STACKLESS BYTECODE BLOCK:
      Label LBL_33:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(6))), NodeIndex(6): Condition(NodeIndex(6), (6, false), NodeIndex(10), NodeIndex(33)), NodeIndex(10): Code(NodeIndex(10), (10, false), Some(NodeIndex(11))), NodeIndex(11): Condition(NodeIndex(11), (11, false), NodeIndex(15), NodeIndex(28)), NodeIndex(15): Code(NodeIndex(15), (15, false), Some(NodeIndex(11))), NodeIndex(28): Code(NodeIndex(28), (28, false), Some(NodeIndex(6))), NodeIndex(33): Code(NodeIndex(33), (33, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 34,
    edge_count: 8,
    edges: (0, 6), (6, 10), (6, 33), (10, 11), (11, 15), (11, 28), (15, 11), (28, 6),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(2) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(7) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(12) with no outs: None
Node NodeIndex(13) with no outs: None
Node NodeIndex(14) with no outs: None
Node NodeIndex(16) with no outs: None
Node NodeIndex(17) with no outs: None
Node NodeIndex(18) with no outs: None
Node NodeIndex(19) with no outs: None
Node NodeIndex(20) with no outs: None
Node NodeIndex(21) with no outs: None
Node NodeIndex(22) with no outs: None
Node NodeIndex(23) with no outs: None
Node NodeIndex(24) with no outs: None
Node NodeIndex(25) with no outs: None
Node NodeIndex(26) with no outs: None
Node NodeIndex(27) with no outs: None
Node NodeIndex(29) with no outs: None
Node NodeIndex(30) with no outs: None
Node NodeIndex(31) with no outs: None
Node NodeIndex(32) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(6),
                children: [
                    Node {
                        value: NodeIndex(33),
                        children: [],
                    },
                    Node {
                        value: NodeIndex(10),
                        children: [
                            Node {
                                value: NodeIndex(11),
                                children: [
                                    Node {
                                        value: NodeIndex(28),
                                        children: [],
                                    },
                                    Node {
                                        value: NodeIndex(15),
                                        children: [],
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(11),
    NodeIndex(6),
}
Structuring Latch Node: Code(
    NodeIndex(15),
    (
        15,
        false,
    ),
    Some(
        NodeIndex(11),
    ),
)
Structuring Latch Node: Code(
    NodeIndex(28),
    (
        28,
        false,
    ),
    Some(
        NodeIndex(6),
    ),
)
Structuring loop at node NodeIndex(11)
Structuring Node: NodeIndex(11)
Blocks: {
    NodeIndex(15): Seq(
        [
            Block(
                (
                    15,
                    false,
                ),
            ),
            Jump(
                NodeIndex(11),
            ),
        ],
    ),
    NodeIndex(28): Seq(
        [
            Block(
                (
                    28,
                    false,
                ),
            ),
            Jump(
                NodeIndex(6),
            ),
        ],
    ),
}
Loop nodes: {NodeIndex(10), NodeIndex(6), NodeIndex(11), NodeIndex(28), NodeIndex(15)}, Successor nodes: {NodeIndex(33)}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            11,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        15,
                                        false,
                                    ),
                                ),
                                Continue,
                            ],
                        ),
                        Some(
                            Seq(
                                [],
                            ),
                        ),
                    ),
                ],
            ),
            Seq(
                [
                    Block(
                        (
                            28,
                            false,
                        ),
                    ),
                    Jump(
                        NodeIndex(6),
                    ),
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(10)
Blocks: {
    NodeIndex(11): Loop(
        Seq(
            [
                Seq(
                    [
                        IfElse(
                            (
                                11,
                                false,
                            ),
                            Seq(
                                [
                                    Block(
                                        (
                                            15,
                                            false,
                                        ),
                                    ),
                                    Continue,
                                ],
                            ),
                            Some(
                                Seq(
                                    [],
                                ),
                            ),
                        ),
                    ],
                ),
                Seq(
                    [
                        Block(
                            (
                                28,
                                false,
                            ),
                        ),
                        Jump(
                            NodeIndex(6),
                        ),
                    ],
                ),
            ],
        ),
    ),
}
Structuring Code Node: Code(
    NodeIndex(10),
    (
        10,
        false,
    ),
    Some(
        NodeIndex(11),
    ),
)
Structuring Code Node: Code(
    NodeIndex(33),
    (
        33,
        false,
    ),
    None,
)
Structuring loop at node NodeIndex(6)
Structuring Node: NodeIndex(6)
Blocks: {
    NodeIndex(10): Seq(
        [
            Block(
                (
                    10,
                    false,
                ),
            ),
            Loop(
                Seq(
                    [
                        Seq(
                            [
                                IfElse(
                                    (
                                        11,
                                        false,
                                    ),
                                    Seq(
                                        [
                                            Block(
                                                (
                                                    15,
                                                    false,
                                                ),
                                            ),
                                            Continue,
                                        ],
                                    ),
                                    Some(
                                        Seq(
                                            [],
                                        ),
                                    ),
                                ),
                            ],
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        28,
                                        false,
                                    ),
                                ),
                                Jump(
                                    NodeIndex(6),
                                ),
                            ],
                        ),
                    ],
                ),
            ),
        ],
    ),
    NodeIndex(33): Seq(
        [
            Block(
                (
                    33,
                    false,
                ),
            ),
        ],
    ),
}
Loop nodes: {NodeIndex(28), NodeIndex(15), NodeIndex(6), NodeIndex(11), NodeIndex(33), NodeIndex(10)}, Successor nodes: {}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            6,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        10,
                                        false,
                                    ),
                                ),
                                Loop(
                                    Seq(
                                        [
                                            Seq(
                                                [
                                                    IfElse(
                                                        (
                                                            11,
                                                            false,
                                                        ),
                                                        Seq(
                                                            [
                                                                Block(
                                                                    (
                                                                        15,
                                                                        false,
                                                                    ),
                                                                ),
                                                                Continue,
                                                            ],
                                                        ),
                                                        Some(
                                                            Seq(
                                                                [],
                                                            ),
                                                        ),
                                                    ),
                                                ],
                                            ),
                                            Seq(
                                                [
                                                    Block(
                                                        (
                                                            28,
                                                            false,
                                                        ),
                                                    ),
                                                    Continue,
                                                ],
                                            ),
                                        ],
                                    ),
                                ),
                            ],
                        ),
                        Some(
                            Seq(
                                [],
                            ),
                        ),
                    ),
                    Block(
                        (
                            33,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(6): Loop(
        Seq(
            [
                IfElse(
                    (
                        6,
                        false,
                    ),
                    Seq(
                        [
                            Block(
                                (
                                    10,
                                    false,
                                ),
                            ),
                            Loop(
                                Seq(
                                    [
                                        Seq(
                                            [
                                                IfElse(
                                                    (
                                                        11,
                                                        false,
                                                    ),
                                                    Seq(
                                                        [
                                                            Block(
                                                                (
                                                                    15,
                                                                    false,
                                                                ),
                                                            ),
                                                            Continue,
                                                        ],
                                                    ),
                                                    Some(
                                                        Seq(
                                                            [],
                                                        ),
                                                    ),
                                                ),
                                            ],
                                        ),
                                        Seq(
                                            [
                                                Block(
                                                    (
                                                        28,
                                                        false,
                                                    ),
                                                ),
                                                Continue,
                                            ],
                                        ),
                                    ],
                                ),
                            ),
                        ],
                    ),
                    Some(
                        Seq(
                            [],
                        ),
                    ),
                ),
                Block(
                    (
                        33,
                        false,
                    ),
                ),
            ],
        ),
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(6),
    ),
)
Decompiling function while_test_6
STACKLESS BYTECODE BLOCK:
      Label LBL_0:
        lcl_1 = Immediate(U64(0))

STACKLESS BYTECODE BLOCK:
      Label LBL_2:
        reg_1 = Copy(lcl_1)
        reg_3 = LessThan(reg_1, Immediate(U64(10)))
        JumpIf(reg_3, LBL_6, LBL_10)

STACKLESS BYTECODE BLOCK:
      Label LBL_6:
        Jump(LBL_7)

STACKLESS BYTECODE BLOCK:
      Label LBL_7:
        lcl_0 = Immediate(true)
        Jump(LBL_14)

STACKLESS BYTECODE BLOCK:
      Label LBL_10:
        reg_5 = Copy(lcl_1)
        reg_7 = Equal(reg_5, Immediate(U64(7)))
        lcl_0 = reg_7

STACKLESS BYTECODE BLOCK:
      Label LBL_14:
        reg_8 = Move(lcl_0)
        JumpIf(reg_8, LBL_16, LBL_21)

STACKLESS BYTECODE BLOCK:
      Label LBL_16:
        reg_9 = Move(lcl_1)
        reg_11 = Add(reg_9, Immediate(U64(1)))
        lcl_1 = reg_11
        Jump(LBL_2)

STACKLESS BYTECODE BLOCK:
      Label LBL_21:
        Return()

Input: {NodeIndex(0): Code(NodeIndex(0), (0, false), Some(NodeIndex(2))), NodeIndex(2): Condition(NodeIndex(2), (2, false), NodeIndex(6), NodeIndex(10)), NodeIndex(6): Code(NodeIndex(6), (6, false), Some(NodeIndex(7))), NodeIndex(7): Code(NodeIndex(7), (7, false), Some(NodeIndex(14))), NodeIndex(10): Code(NodeIndex(10), (10, false), Some(NodeIndex(14))), NodeIndex(14): Condition(NodeIndex(14), (14, false), NodeIndex(16), NodeIndex(21)), NodeIndex(16): Code(NodeIndex(16), (16, false), Some(NodeIndex(2))), NodeIndex(21): Code(NodeIndex(21), (21, false), None)}
CFG: Graph {
    Ty: "Directed",
    node_count: 22,
    edge_count: 9,
    edges: (0, 2), (2, 6), (2, 10), (6, 7), (7, 14), (10, 14), (14, 16), (14, 21), (16, 2),
}
Node NodeIndex(1) with no outs: None
Node NodeIndex(3) with no outs: None
Node NodeIndex(4) with no outs: None
Node NodeIndex(5) with no outs: None
Node NodeIndex(8) with no outs: None
Node NodeIndex(9) with no outs: None
Node NodeIndex(11) with no outs: None
Node NodeIndex(12) with no outs: None
Node NodeIndex(13) with no outs: None
Node NodeIndex(15) with no outs: None
Node NodeIndex(17) with no outs: None
Node NodeIndex(18) with no outs: None
Node NodeIndex(19) with no outs: None
Node NodeIndex(20) with no outs: None
Dom tree: DominatorTree(
    Node {
        value: NodeIndex(0),
        children: [
            Node {
                value: NodeIndex(2),
                children: [
                    Node {
                        value: NodeIndex(14),
                        children: [
                            Node {
                                value: NodeIndex(16),
                                children: [],
                            },
                            Node {
                                value: NodeIndex(21),
                                children: [],
                            },
                        ],
                    },
                    Node {
                        value: NodeIndex(10),
                        children: [],
                    },
                    Node {
                        value: NodeIndex(6),
                        children: [
                            Node {
                                value: NodeIndex(7),
                                children: [],
                            },
                        ],
                    },
                ],
            },
        ],
    },
)
Loop heads: {
    NodeIndex(2),
}
Structuring Latch Node: Code(
    NodeIndex(16),
    (
        16,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
Structuring Code Node: Code(
    NodeIndex(21),
    (
        21,
        false,
    ),
    None,
)
Structuring Node: NodeIndex(14)
Blocks: {
    NodeIndex(16): Seq(
        [
            Block(
                (
                    16,
                    false,
                ),
            ),
            Jump(
                NodeIndex(2),
            ),
        ],
    ),
    NodeIndex(21): Seq(
        [
            Block(
                (
                    21,
                    false,
                ),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(7),
    (
        7,
        false,
    ),
    Some(
        NodeIndex(14),
    ),
)
Structuring Node: NodeIndex(6)
Blocks: {
    NodeIndex(7): Seq(
        [
            Block(
                (
                    7,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(14): Seq(
        [
            IfElse(
                (
                    14,
                    false,
                ),
                Seq(
                    [
                        Block(
                            (
                                16,
                                false,
                            ),
                        ),
                        Jump(
                            NodeIndex(2),
                        ),
                    ],
                ),
                Some(
                    Jump(
                        NodeIndex(21),
                    ),
                ),
            ),
        ],
    ),
    NodeIndex(21): Seq(
        [
            Block(
                (
                    21,
                    false,
                ),
            ),
        ],
    ),
}
Structuring Code Node: Code(
    NodeIndex(6),
    (
        6,
        false,
    ),
    Some(
        NodeIndex(7),
    ),
)
Structuring Code Node: Code(
    NodeIndex(10),
    (
        10,
        false,
    ),
    Some(
        NodeIndex(14),
    ),
)
Structuring loop at node NodeIndex(2)
Structuring Node: NodeIndex(2)
Blocks: {
    NodeIndex(6): Seq(
        [
            Block(
                (
                    6,
                    false,
                ),
            ),
            Block(
                (
                    7,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(10): Seq(
        [
            Block(
                (
                    10,
                    false,
                ),
            ),
        ],
    ),
    NodeIndex(14): Seq(
        [
            IfElse(
                (
                    14,
                    false,
                ),
                Seq(
                    [
                        Block(
                            (
                                16,
                                false,
                            ),
                        ),
                        Jump(
                            NodeIndex(2),
                        ),
                    ],
                ),
                Some(
                    Jump(
                        NodeIndex(21),
                    ),
                ),
            ),
        ],
    ),
    NodeIndex(21): Seq(
        [
            Block(
                (
                    21,
                    false,
                ),
            ),
        ],
    ),
}
Loop nodes: {NodeIndex(21), NodeIndex(14), NodeIndex(6), NodeIndex(16), NodeIndex(2), NodeIndex(10), NodeIndex(7)}, Successor nodes: {}
Loop head: Loop(
    Seq(
        [
            Seq(
                [
                    IfElse(
                        (
                            2,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        6,
                                        false,
                                    ),
                                ),
                                Block(
                                    (
                                        7,
                                        false,
                                    ),
                                ),
                            ],
                        ),
                        Some(
                            Seq(
                                [
                                    Block(
                                        (
                                            10,
                                            false,
                                        ),
                                    ),
                                ],
                            ),
                        ),
                    ),
                    IfElse(
                        (
                            14,
                            false,
                        ),
                        Seq(
                            [
                                Block(
                                    (
                                        16,
                                        false,
                                    ),
                                ),
                                Continue,
                            ],
                        ),
                        Some(
                            Seq(
                                [],
                            ),
                        ),
                    ),
                ],
            ),
            Seq(
                [
                    Block(
                        (
                            21,
                            false,
                        ),
                    ),
                ],
            ),
        ],
    ),
)
Structuring Node: NodeIndex(0)
Blocks: {
    NodeIndex(2): Loop(
        Seq(
            [
                Seq(
                    [
                        IfElse(
                            (
                                2,
                                false,
                            ),
                            Seq(
                                [
                                    Block(
                                        (
                                            6,
                                            false,
                                        ),
                                    ),
                                    Block(
                                        (
                                            7,
                                            false,
                                        ),
                                    ),
                                ],
                            ),
                            Some(
                                Seq(
                                    [
                                        Block(
                                            (
                                                10,
                                                false,
                                            ),
                                        ),
                                    ],
                                ),
                            ),
                        ),
                        IfElse(
                            (
                                14,
                                false,
                            ),
                            Seq(
                                [
                                    Block(
                                        (
                                            16,
                                            false,
                                        ),
                                    ),
                                    Continue,
                                ],
                            ),
                            Some(
                                Seq(
                                    [],
                                ),
                            ),
                        ),
                    ],
                ),
                Seq(
                    [
                        Block(
                            (
                                21,
                                false,
                            ),
                        ),
                    ],
                ),
            ],
        ),
    ),
}
Structuring Code Node: Code(
    NodeIndex(0),
    (
        0,
        false,
    ),
    Some(
        NodeIndex(2),
    ),
)
test run_move_test::loop/modules.txt ... [0m[32mok[0m

test result: [0m[32mok[0m. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.11s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

