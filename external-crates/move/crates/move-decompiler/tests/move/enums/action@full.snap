---
source: crates/move-decompiler/tests/tests.rs
---
// Auto-generated by Move decompiler

module enums::action;

// -- structs -- 

// -- enums -- 

public enum Action has copy {
    Stop {},
    MoveTo { x: u64, y: u64 },
    ChangeSpeed { pos0: u64 },
}

// -- functions -- 

public fun destroy_action(l0: enums::action::Action) {
    {
        let l2 = l0;
        let l1 = &l2;
        switch 0x0::action::Action (l1) {
            Stop => {
                0x0::action::Action::Stop {} = &l1;
                0x0::action::Action::Stop {} = l2
            },
            MoveTo => {
                0x0::action::Action::MoveTo { x: reg_6, y: reg_7 } = &l1;
                0x0::action::Action::MoveTo { x: reg_9, y: reg_10 } = l2
            },
            ChangeSpeed => {
                0x0::action::Action::ChangeSpeed { pos0: reg_12 } = &l1;
                0x0::action::Action::ChangeSpeed { pos0: reg_14 } = l2
            }
        };
        return
    }
}

public fun increase_speed(l0: &mut enums::action::Action, l1: u64) {
    {
        let l3 = l0;
        let l2 = freeze (l3);
        switch 0x0::action::Action (l2) {
            Stop => {
                0x0::action::Action::Stop {} = &l2;
                abort 0u64
            },
            MoveTo => {
                0x0::action::Action::MoveTo { x: reg_9, y: reg_10 } = &l2;
                abort 0u64
            },
            ChangeSpeed => {
                0x0::action::Action::ChangeSpeed { pos0: reg_13 } = &l2;
                0x0::action::Action::ChangeSpeed { pos0: reg_15 } = l3;
                let l4 = reg_15 : &mut 0x0::action::Action;
                *l4 = l1;
                return
            }
        }
    }
}

public fun speed(l0: &enums::action::Action): u64 {
    {
        let l3 = l0;
        let l2 = l3;
        switch 0x0::action::Action (l2) {
            Stop => {
                0x0::action::Action::Stop {} = &l2;
                abort 0u64
            },
            MoveTo => {
                0x0::action::Action::MoveTo { x: reg_7, y: reg_8 } = &l2;
                0x0::action::Action::MoveTo { x: reg_10, y: reg_11 } = &l3;
                let l1 = *reg_10 : &0x0::action::Action;
            },
            ChangeSpeed => {
                0x0::action::Action::ChangeSpeed { pos0: reg_14 } = &l2;
                0x0::action::Action::ChangeSpeed { pos0: reg_16 } = &l3;
                l1 = *reg_16 : &0x0::action::Action;
            }
        }
    }
}
