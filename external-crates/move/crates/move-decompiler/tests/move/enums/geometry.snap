---
source: crates/move-decompiler/tests/tests.rs
---
module geometry {
    public fun get_area () {
        let l4 = l0;
        let l3 = &l4;
        match(l3: 0x0::geometry::Shape) {
            0x0::geometry::Shape::Square => {
                let 0x0::geometry::Shape::Square { side: reg_4 } = &l3;
                let 0x0::geometry::Shape::Square { side: reg_6 } = l4;
                let l7 = reg_6 : 0x0::geometry::Shape;
                let l1 = l7 * l7;
            },
            0x0::geometry::Shape::Triangle => {
                let 0x0::geometry::Shape::Triangle { base: reg_11, height: reg_12 } = &l3;
                let 0x0::geometry::Shape::Triangle { base: reg_14, height: reg_15 } = l4;
                let l2 = reg_15 : 0x0::geometry::Shape;
                let l5 = reg_14 : 0x0::geometry::Shape;
                let l6 = l2;
                l1 = l5 * l6 / U64(2);
            },
        }
        return l1
    }

    public fun get_square_side () {
        let l2 = l0;
        let l1 = l2;
        match(l1: 0x0::geometry::Shape) {
            0x0::geometry::Shape::Square => {
                let 0x0::geometry::Shape::Square { side: reg_7 } = &l1;
                let 0x0::geometry::Shape::Square { side: reg_9 } = &l2;
                return                 *reg_9 : &0x0::geometry::Shape
            },
            0x0::geometry::Shape::Triangle => {
                abort!(Constant { type_: U64, data: [1, 0, 0, 0, 0, 0, 0, 0] });
            },
        }
    }

    public fun get_triangle_size () {
        let l3 = l0;
        let l2 = l3;
        match(l2: 0x0::geometry::Shape) {
            0x0::geometry::Shape::Square => {
                abort!(Constant { type_: U64, data: [1, 0, 0, 0, 0, 0, 0, 0] });
            },
            0x0::geometry::Shape::Triangle => {
                let 0x0::geometry::Shape::Triangle { base: reg_7, height: reg_8 } = &l2;
                let 0x0::geometry::Shape::Triangle { base: reg_10, height: reg_11 } = &l3;
                let l1 = reg_11 : &0x0::geometry::Shape;
                let l4 = reg_10 : &0x0::geometry::Shape;
                let l5 = l1;
                return                 *l5                *l4
            },
        }
    }

    public fun set_square_side () {
        let l3 = l0;
        let l2 =         freeze(l3);
        match(l2: 0x0::geometry::Shape) {
            0x0::geometry::Shape::Square => {
                let 0x0::geometry::Shape::Square { side: reg_8 } = &l2;
                let 0x0::geometry::Shape::Square { side: reg_10 } = l3;
                let l4 = reg_10 : &mut 0x0::geometry::Shape;
                *l4 = l1
                return 
            },
            0x0::geometry::Shape::Triangle => {
                abort!(Constant { type_: U64, data: [1, 0, 0, 0, 0, 0, 0, 0] });
            },
        }
    }

    public fun set_triangle_dimensions () {
        let l5 = l0;
        let l4 =         freeze(l5);
        match(l4: 0x0::geometry::Shape) {
            0x0::geometry::Shape::Square => {
                abort!(Constant { type_: U64, data: [1, 0, 0, 0, 0, 0, 0, 0] });
            },
            0x0::geometry::Shape::Triangle => {
                let 0x0::geometry::Shape::Triangle { base: reg_8, height: reg_9 } = &l4;
                let 0x0::geometry::Shape::Triangle { base: reg_11, height: reg_12 } = l5;
                let l3 = reg_12 : &mut 0x0::geometry::Shape;
                let l6 = reg_11 : &mut 0x0::geometry::Shape;
                let l7 = l3;
                *l6 = l1
                *l7 = l2
                return 
            },
        }
    }

}
