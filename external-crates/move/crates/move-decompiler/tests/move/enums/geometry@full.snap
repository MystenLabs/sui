---
source: crates/move-decompiler/tests/tests.rs
---
// Auto-generated by Move decompiler

module enums::geometry;

// -- enums -- 

public enum Shape has copy, drop {
    Square { side: u64 },
    Triangle { base: u64, height: u64 },
}

// -- constants -- 

const C0: u64 = 1u64;

// -- functions -- 

public fun get_area(l0: enums::geometry::Shape): u64 {
    {
        let l4 = l0;
        let l3 = &l4;
        switch 0x0::geometry::Shape (l3) {
            Square => {
                0x0::geometry::Shape::Square { side: reg_4 } = l3;
                0x0::geometry::Shape::Square { side: reg_6 } = l4;
                let l7 = reg_6 : u64;
                let l1 = l7 * l7;
            },
            Triangle => {
                0x0::geometry::Shape::Triangle { base: reg_11, height: reg_12 } = l3;
                0x0::geometry::Shape::Triangle { base: reg_14, height: reg_15 } = l4;
                let l2 = reg_15 : u64;
                let l5 = reg_14 : u64;
                let l6 = l2;
                l1 = l5 * l6 / 2u64;
            }
        };
        return l1
    }
}

public fun get_square_side(l0: &enums::geometry::Shape): u64 {
    {
        let l2 = l0;
        let l1 = l2;
        switch 0x0::geometry::Shape (l1) {
            Square => {
                0x0::geometry::Shape::Square { side: reg_7 } = l1;
                0x0::geometry::Shape::Square { side: reg_9 } = l2;
                return *reg_9 : &u64
            },
            Triangle => {
                abort C0
            }
        }
    }
}

public fun get_triangle_size(l0: &enums::geometry::Shape): ( u64, u64) {
    {
        let l3 = l0;
        let l2 = l3;
        switch 0x0::geometry::Shape (l2) {
            Square => {
                abort C0
            },
            Triangle => {
                0x0::geometry::Shape::Triangle { base: reg_7, height: reg_8 } = l2;
                0x0::geometry::Shape::Triangle { base: reg_10, height: reg_11 } = l3;
                let l1 = reg_11 : &u64;
                let l4 = reg_10 : &u64;
                let l5 = l1;
                return (*l4, *l5)
            }
        }
    }
}

public fun set_square_side(l0: &mut enums::geometry::Shape, l1: u64) {
    {
        let l3 = l0;
        let l2 = freeze(l3);
        switch 0x0::geometry::Shape (l2) {
            Square => {
                0x0::geometry::Shape::Square { side: reg_8 } = l2;
                0x0::geometry::Shape::Square { side: reg_10 } = l3;
                let l4 = reg_10 : &mut u64;
                *l4 = l1;
                return
            },
            Triangle => {
                abort C0
            }
        }
    }
}

public fun set_triangle_dimensions(l0: &mut enums::geometry::Shape, l1: u64, l2: u64) {
    {
        let l5 = l0;
        let l4 = freeze(l5);
        switch 0x0::geometry::Shape (l4) {
            Square => {
                abort C0
            },
            Triangle => {
                0x0::geometry::Shape::Triangle { base: reg_8, height: reg_9 } = l4;
                0x0::geometry::Shape::Triangle { base: reg_11, height: reg_12 } = l5;
                let l3 = reg_12 : &mut u64;
                let l6 = reg_11 : &mut u64;
                let l7 = l3;
                *l6 = l1;
                *l7 = l2;
                return
            }
        }
    }
}
