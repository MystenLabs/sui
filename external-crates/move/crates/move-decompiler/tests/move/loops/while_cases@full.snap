---
source: crates/move-decompiler/tests/tests.rs
---
// Auto-generated by Move decompiler

module loops::while_cases;

// -- structs -- 

// -- enums -- 

// -- functions -- 

public fun while_test() {
    {
        let l0 = 0u64;
        while (l0 < 10u64) {
            l0 = l0 + 1u64;
        };
        return
    }
}

public fun while_test_2() {
    {
        let l1 = 0u64;
        loop {
            if (l1 < 10u64) {
                let l0 = true;
            } else {
                l0 = l1 == 7u64;
            };
            if (l0) {
                l1 = l1 + 1u64;
                continue
            } else {
                
            };
            return
        }
    }
}

public fun while_test_3() {
    {
        let l0 = 0u64;
        while (l0 < 10u64) {
            if (l0 % 2u64 == 0u64) {
                l0 = l0 + 1u64;
                continue
            } else {
                l0 = l0 + 2u64;
                continue
            }
        };
        return
    }
}

public fun while_test_4() {
    {
        let l1 = 0u64;
        loop {
            if (l1 < 10u64) {
                let l0 = true;
            } else {
                l0 = l1 == 7u64;
            };
            if (l0) {
                if (l1 % 2u64 == 0u64) {
                    l1 = l1 + 1u64;
                    continue
                } else {
                    l1 = l1 + 2u64;
                    continue
                }
            } else {
                
            };
            return
        }
    }
}

public fun while_test_5() {
    {
        let l0 = 0u64;
        let l1 = 0u64;
        let l2 = 0u64;
        loop {
            if (l0 < 10u64) {
                loop {
                    if (l1 < 10u64) {
                        l2 = l2 + l0 * l1 + l1;
                        l1 = l1 + 1u64;
                        continue
                    } else {
                        
                    };
                    l0 = l0 + 1u64;
                }
            } else {
                
            };
            return
        }
    }
}

public fun while_test_6() {
    {
        let l1 = 0u64;
        loop {
            if (l1 < 10u64) {
                let l0 = true;
            } else {
                l0 = l1 == 7u64;
            };
            if (l0) {
                l1 = l1 + 1u64;
                continue
            } else {
                
            };
            return
        }
    }
}
