// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

use std::path::PathBuf;

use move_package_alt::schema::EnvironmentName;

use super::lint_flag::LintFlag;
use clap::Parser;
use move_compiler::editions::{Edition, Flavor};
use serde::{Deserialize, Serialize};

#[derive(Debug, Parser, Clone, Serialize, Deserialize, Eq, PartialEq, PartialOrd, Default)]
#[clap(about)]
pub struct BuildConfig {
    /// Generate documentation for packages
    #[clap(name = "generate-docs", long = "doc", global = true)]
    pub generate_docs: bool,

    /// Save disassembly for generated bytecode along with
    /// bytecode maps (source maps for disassembeld bytecode)
    #[clap(name = "save-disassembly", long = "disassemble", global = true)]
    pub save_disassembly: bool,

    /// Installation directory for compiled artifacts. Defaults to current directory.
    #[clap(long = "install-dir", global = true)]
    pub install_dir: Option<PathBuf>,

    /// Force recompilation of all packages
    #[clap(name = "force-recompilation", long = "force", global = true)]
    pub force_recompilation: bool,

    /// Default flavor for move compilation, if not specified in the package's config
    #[clap(long = "default-move-flavor", global = true)]
    pub default_flavor: Option<Flavor>,

    /// Default edition for move compilation, if not specified in the package's config
    #[clap(long = "default-move-edition", global = true)]
    pub default_edition: Option<Edition>,

    /// Optional location to save the lock file to, if package resolution succeeds.
    #[clap(skip)]
    pub lock_file: Option<PathBuf>,

    /// If set, ignore any compiler warnings
    #[clap(long = move_compiler::command_line::SILENCE_WARNINGS, global = true)]
    pub silence_warnings: bool,

    /// If set, warnings become errors
    #[clap(long = move_compiler::command_line::WARNINGS_ARE_ERRORS, global = true)]
    pub warnings_are_errors: bool,

    /// If set, reports errors at JSON
    #[clap(long = move_compiler::command_line::JSON_ERRORS, global = true)]
    pub json_errors: bool,

    #[clap(flatten)]
    pub lint_flag: LintFlag,

    // /// Additional dependencies to be automatically included in every package
    // #[clap(skip)]
    // pub implicit_dependencies: Dependencies,
    /// Forces use of lock file without checking if it needs to be updated
    /// (regenerates it only if it doesn't exist)
    #[clap(skip)]
    pub force_lock_file: bool,

    #[clap(
        long = "environment",
        short = 'e',
        global = true,
        help = "Environment to use for building packages"
    )]
    pub environment: Option<EnvironmentName>,

    /// Compile in 'test' mode. Code in the 'tests' directory will be used too.
    #[clap(name = "test-mode", long = "test", global = true)]
    pub test_mode: bool,
}
