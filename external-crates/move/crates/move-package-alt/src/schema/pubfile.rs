use std::collections::BTreeMap;

use derive_where::derive_where;
use indoc::indoc;
use serde::{Deserialize, Serialize};

use crate::flavor::MoveFlavor;

use super::{
    EnvironmentID, EnvironmentName, PublishAddresses, RenderToml,
    toml_format::{expand_toml, flatten_toml},
};

/// The schema for a `Move.published` file
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(bound = "")]
#[derive_where(Default)]
pub struct ParsedPubs<F: MoveFlavor> {
    #[serde(default)]
    pub published: BTreeMap<EnvironmentName, Publication<F>>,
}

/// The schema for a `Move.pub.local` file. Note that this is the same as `PublicationFile`, except
/// that it is rendered a little bit differently. It is also useful to have two different types
/// since they are handled differently in other parts of the system
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(bound = "")]
#[derive_where(Default)]
pub struct ParsedLocalPubs<F: MoveFlavor> {
    pub published: BTreeMap<EnvironmentName, Publication<F>>,
}

/// A `Publication` is a historical record describing the state of a package when it was published.
/// It contains
#[derive(Debug, Serialize, Deserialize)]
#[derive_where(Clone)]
#[serde(rename_all = "kebab-case")]
pub struct Publication<F: MoveFlavor> {
    #[serde(flatten)]
    pub addresses: PublishAddresses,
    pub chain_id: EnvironmentID,

    /// Additional flavor-specific fields, such as an upgrade capability or information for source
    /// verification
    #[serde(flatten)]
    pub metadata: F::PublishedMetadata,
}

impl<F: MoveFlavor> RenderToml for ParsedLocalPubs<F> {
    /// Pretty-print `self` as TOML
    fn render_as_toml(&self) -> String {
        let mut toml = toml_edit::ser::to_document(self).expect("toml serialization succeeds");
        expand_toml(&mut toml);

        toml.decor_mut().set_prefix(indoc!(
            r#"
            # Generated by Move
            # This file contains metadata for publications to local networks
            # This file shoud NOT be committed to source control
            "#
        ));

        toml.to_string()
    }
}

impl<F: MoveFlavor> RenderToml for ParsedPubs<F> {
    /// Pretty-print `self` as TOML
    fn render_as_toml(&self) -> String {
        let mut toml = toml_edit::ser::to_document(self).expect("toml serialization succeeds");
        expand_toml(&mut toml);
        flatten_toml(&mut toml["dependencies"]);

        toml.decor_mut().set_prefix(indoc!(
            r#"
            # Generated by Move
            # This file contains metadata about published versions of this package in different environments
            # This file SHOULD be committed to source control
            "#
        ));

        toml.to_string()
    }
}
