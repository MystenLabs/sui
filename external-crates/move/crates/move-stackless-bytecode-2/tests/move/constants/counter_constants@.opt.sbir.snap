---
source: crates/move-stackless-bytecode-2/tests/tests.rs
---
  Module: constants
    Function: compute (entry: LBL_0)
      Label LBL_0:
        lcl_4 = Immediate(U64(0))
        lcl_3 = Immediate(U64(0))
        reg_2 = Copy(lcl_0)
        reg_3 = Constant(Constant { type_: U64, data: [100, 0, 0, 0, 0, 0, 0, 0] })
        reg_4 = LessThan(reg_3, reg_2)
        JumpIf(reg_4, LBL_8, LBL_13)

      Label LBL_8:
        reg_5 = Copy(lcl_1)
        reg_7 = LessThan(Immediate(U64(10)), reg_5)
        lcl_2 = reg_7
        Jump(LBL_15)

      Label LBL_13:
        lcl_2 = Immediate(false)

      Label LBL_15:
        reg_9 = Move(lcl_2)
        JumpIf(reg_9, LBL_17, LBL_32)

      Label LBL_17:
        reg_10 = Copy(lcl_3)
        reg_11 = Copy(lcl_1)
        reg_12 = LessThan(reg_11, reg_10)
        JumpIf(reg_12, LBL_21, LBL_34)

      Label LBL_21:
        reg_13 = Move(lcl_4)
        reg_14 = Copy(lcl_0)
        reg_15 = Add(reg_14, reg_13)
        reg_16 = Constant(Constant { type_: U64, data: [1, 0, 0, 0, 0, 0, 0, 0] })
        reg_17 = Add(reg_16, reg_15)
        lcl_4 = reg_17
        reg_18 = Move(lcl_3)
        reg_20 = Add(Immediate(U64(1)), reg_18)
        lcl_3 = reg_20
        Jump(LBL_17)

      Label LBL_32:
        reg_21 = Constant(Constant { type_: U64, data: [100, 0, 0, 0, 0, 0, 0, 0] })
        lcl_4 = reg_21

      Label LBL_34:
        reg_22 = Move(lcl_4)
        reg_23 = Move(lcl_0)
        reg_24 = Multiply(reg_22, reg_23)
        reg_25 = Move(lcl_1)
        reg_26 = Add(reg_25, reg_24)
        reg_27 = Constant(Constant { type_: U64, data: [0, 0, 0, 0, 0, 0, 0, 0] })
        reg_28 = Add(reg_27, reg_26)
        Return(reg_28)
