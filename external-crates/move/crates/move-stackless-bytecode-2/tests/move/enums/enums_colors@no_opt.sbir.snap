---
source: crates/move-stackless-bytecode-2/tests/from_source.rs
---
  Module: colors
    Function: is_blue (entry: LBL_0)
      Label LBL_0:
        reg_0 : 0x42::colors::Color = Move(lcl_0)
        lcl_3 = reg_0 : 0x42::colors::Color
        reg_1 : &0x42::colors::Color = ImmBorrow(lcl_3)
        lcl_2 = reg_1 : &0x42::colors::Color
        reg_2 : &0x42::colors::Color = Copy(lcl_2)
        Switch(reg_2 : &0x42::colors::Color : 0x42::colors::Color) Case: Red (lbl 6), Case: Green (lbl 11), Case: Blue (lbl 16)

      Label LBL_6:
        reg_3 : &0x42::colors::Color = Move(lcl_2)
        Drop(reg_3 : &0x42::colors::Color)
        reg_4 : bool = Immediate(false)
        lcl_1 = reg_4 : bool
        Jump(LBL_22)

      Label LBL_11:
        reg_5 : &0x42::colors::Color = Move(lcl_2)
        Drop(reg_5 : &0x42::colors::Color)
        reg_6 : bool = Immediate(false)
        lcl_1 = reg_6 : bool
        Jump(LBL_22)

      Label LBL_16:
        reg_7 : &0x42::colors::Color = Move(lcl_2)
        UnpackVariantImmRef<Blue>(reg_7 : &0x42::colors::Color)
        reg_8 : 0x42::colors::Color = Move(lcl_3)
        UnpackVariant<Blue>(reg_8 : 0x42::colors::Color)
        reg_9 : bool = Immediate(true)
        lcl_1 = reg_9 : bool

      Label LBL_22:
        reg_10 : bool = Move(lcl_1)
        Return(reg_10 : bool)


    Function: is_green (entry: LBL_0)
      Label LBL_0:
        reg_0 : 0x42::colors::Color = Move(lcl_0)
        lcl_3 = reg_0 : 0x42::colors::Color
        reg_1 : &0x42::colors::Color = ImmBorrow(lcl_3)
        lcl_2 = reg_1 : &0x42::colors::Color
        reg_2 : &0x42::colors::Color = Copy(lcl_2)
        Switch(reg_2 : &0x42::colors::Color : 0x42::colors::Color) Case: Red (lbl 6), Case: Green (lbl 11), Case: Blue (lbl 18)

      Label LBL_6:
        reg_3 : &0x42::colors::Color = Move(lcl_2)
        Drop(reg_3 : &0x42::colors::Color)
        reg_4 : bool = Immediate(false)
        lcl_1 = reg_4 : bool
        Jump(LBL_22)

      Label LBL_11:
        reg_5 : &0x42::colors::Color = Move(lcl_2)
        UnpackVariantImmRef<Green>(reg_5 : &0x42::colors::Color)
        reg_6 : 0x42::colors::Color = Move(lcl_3)
        UnpackVariant<Green>(reg_6 : 0x42::colors::Color)
        reg_7 : bool = Immediate(true)
        lcl_1 = reg_7 : bool
        Jump(LBL_22)

      Label LBL_18:
        reg_8 : &0x42::colors::Color = Move(lcl_2)
        Drop(reg_8 : &0x42::colors::Color)
        reg_9 : bool = Immediate(false)
        lcl_1 = reg_9 : bool

      Label LBL_22:
        reg_10 : bool = Move(lcl_1)
        Return(reg_10 : bool)


    Function: is_red (entry: LBL_0)
      Label LBL_0:
        reg_0 : 0x42::colors::Color = Move(lcl_0)
        lcl_3 = reg_0 : 0x42::colors::Color
        reg_1 : &0x42::colors::Color = ImmBorrow(lcl_3)
        lcl_2 = reg_1 : &0x42::colors::Color
        reg_2 : &0x42::colors::Color = Copy(lcl_2)
        Switch(reg_2 : &0x42::colors::Color : 0x42::colors::Color) Case: Red (lbl 6), Case: Green (lbl 13), Case: Blue (lbl 18)

      Label LBL_6:
        reg_3 : &0x42::colors::Color = Move(lcl_2)
        UnpackVariantImmRef<Red>(reg_3 : &0x42::colors::Color)
        reg_4 : 0x42::colors::Color = Move(lcl_3)
        UnpackVariant<Red>(reg_4 : 0x42::colors::Color)
        reg_5 : bool = Immediate(true)
        lcl_1 = reg_5 : bool
        Jump(LBL_22)

      Label LBL_13:
        reg_6 : &0x42::colors::Color = Move(lcl_2)
        Drop(reg_6 : &0x42::colors::Color)
        reg_7 : bool = Immediate(false)
        lcl_1 = reg_7 : bool
        Jump(LBL_22)

      Label LBL_18:
        reg_8 : &0x42::colors::Color = Move(lcl_2)
        Drop(reg_8 : &0x42::colors::Color)
        reg_9 : bool = Immediate(false)
        lcl_1 = reg_9 : bool

      Label LBL_22:
        reg_10 : bool = Move(lcl_1)
        Return(reg_10 : bool)
