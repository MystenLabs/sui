============ initial translation from Move ================

[variant baseline]
public fun vector::append<#0>($t0|lhs: &mut vector<#0>, $t1|other: vector<#0>) {
     var $t2: &mut vector<#0>
     var $t3: &vector<#0>
     var $t4: bool
     var $t5: bool
     var $t6: &mut vector<#0>
     var $t7: &mut vector<#0>
     var $t8: #0
     var $t9: &mut vector<#0>
     var $t10: vector<#0>
  0: $t2 := borrow_local($t1)
  1: vector::reverse<#0>($t2)
  2: goto 3
  3: label L3
  4: $t3 := borrow_local($t1)
  5: $t4 := vector::is_empty<#0>($t3)
  6: $t5 := !($t4)
  7: if ($t5) goto 8 else goto 16
  8: label L1
  9: goto 10
 10: label L2
 11: $t6 := copy($t0)
 12: $t7 := borrow_local($t1)
 13: $t8 := vector::pop_back<#0>($t7)
 14: vector::push_back<#0>($t6, $t8)
 15: goto 3
 16: label L0
 17: $t9 := move($t0)
 18: destroy($t9)
 19: $t10 := move($t1)
 20: vector::destroy_empty<#0>($t10)
 21: return ()
}


[variant baseline]
public native fun vector::borrow<#0>($t0|v: &vector<#0>, $t1|i: u64): &#0;


[variant baseline]
public native fun vector::borrow_mut<#0>($t0|v: &mut vector<#0>, $t1|i: u64): &mut #0;


[variant baseline]
public fun vector::contains<#0>($t0|v: &vector<#0>, $t1|e: &#0): bool {
     var $t2|i#1#0: u64
     var $t3|len#1#0: u64
     var $t4: u64
     var $t5: &vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: &vector<#0>
     var $t11: u64
     var $t12: &#0
     var $t13: &#0
     var $t14: bool
     var $t15: &vector<#0>
     var $t16: &#0
     var $t17: bool
     var $t18: u64
     var $t19: u64
     var $t20: u64
     var $t21: &vector<#0>
     var $t22: &#0
     var $t23: bool
  0: $t4 := 0
  1: $t2 := $t4
  2: $t5 := copy($t0)
  3: $t6 := vector::length<#0>($t5)
  4: $t3 := $t6
  5: goto 6
  6: label L5
  7: $t7 := copy($t2)
  8: $t8 := copy($t3)
  9: $t9 := <($t7, $t8)
 10: if ($t9) goto 11 else goto 33
 11: label L1
 12: goto 13
 13: label L2
 14: $t10 := copy($t0)
 15: $t11 := copy($t2)
 16: $t12 := vector::borrow<#0>($t10, $t11)
 17: $t13 := copy($t1)
 18: $t14 := ==($t12, $t13)
 19: if ($t14) goto 20 else goto 27
 20: label L4
 21: $t15 := move($t0)
 22: destroy($t15)
 23: $t16 := move($t1)
 24: destroy($t16)
 25: $t17 := true
 26: return $t17
 27: label L3
 28: $t18 := move($t2)
 29: $t19 := 1
 30: $t20 := +($t18, $t19)
 31: $t2 := $t20
 32: goto 6
 33: label L0
 34: $t21 := move($t0)
 35: destroy($t21)
 36: $t22 := move($t1)
 37: destroy($t22)
 38: $t23 := false
 39: return $t23
}


[variant baseline]
public native fun vector::destroy_empty<#0>($t0|v: vector<#0>);


[variant baseline]
public native fun vector::empty<#0>(): vector<#0>;


[variant baseline]
public fun vector::index_of<#0>($t0|v: &vector<#0>, $t1|e: &#0): (bool, u64) {
     var $t2|i#1#0: u64
     var $t3|len#1#0: u64
     var $t4: u64
     var $t5: &vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: &vector<#0>
     var $t11: u64
     var $t12: &#0
     var $t13: &#0
     var $t14: bool
     var $t15: &vector<#0>
     var $t16: &#0
     var $t17: bool
     var $t18: u64
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: &vector<#0>
     var $t23: &#0
     var $t24: bool
     var $t25: u64
  0: $t4 := 0
  1: $t2 := $t4
  2: $t5 := copy($t0)
  3: $t6 := vector::length<#0>($t5)
  4: $t3 := $t6
  5: goto 6
  6: label L5
  7: $t7 := copy($t2)
  8: $t8 := copy($t3)
  9: $t9 := <($t7, $t8)
 10: if ($t9) goto 11 else goto 34
 11: label L1
 12: goto 13
 13: label L2
 14: $t10 := copy($t0)
 15: $t11 := copy($t2)
 16: $t12 := vector::borrow<#0>($t10, $t11)
 17: $t13 := copy($t1)
 18: $t14 := ==($t12, $t13)
 19: if ($t14) goto 20 else goto 28
 20: label L4
 21: $t15 := move($t0)
 22: destroy($t15)
 23: $t16 := move($t1)
 24: destroy($t16)
 25: $t17 := true
 26: $t18 := move($t2)
 27: return ($t17, $t18)
 28: label L3
 29: $t19 := move($t2)
 30: $t20 := 1
 31: $t21 := +($t19, $t20)
 32: $t2 := $t21
 33: goto 6
 34: label L0
 35: $t22 := move($t0)
 36: destroy($t22)
 37: $t23 := move($t1)
 38: destroy($t23)
 39: $t24 := false
 40: $t25 := 0
 41: return ($t24, $t25)
}


[variant baseline]
public fun vector::insert<#0>($t0|v: &mut vector<#0>, $t1|e: #0, $t2|i: u64) {
     var $t3|len#1#0: u64
     var $t4: &mut vector<#0>
     var $t5: &vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: &mut vector<#0>
     var $t11: u64
     var $t12: &mut vector<#0>
     var $t13: #0
     var $t14: u64
     var $t15: u64
     var $t16: bool
     var $t17: &mut vector<#0>
     var $t18: u64
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: &mut vector<#0>
  0: $t4 := copy($t0)
  1: $t5 := freeze_ref($t4)
  2: $t6 := vector::length<#0>($t5)
  3: $t3 := $t6
  4: $t7 := copy($t2)
  5: $t8 := copy($t3)
  6: $t9 := >($t7, $t8)
  7: if ($t9) goto 8 else goto 13
  8: label L1
  9: $t10 := move($t0)
 10: destroy($t10)
 11: $t11 := 131072
 12: abort($t11)
 13: label L0
 14: $t12 := copy($t0)
 15: $t13 := move($t1)
 16: vector::push_back<#0>($t12, $t13)
 17: goto 18
 18: label L5
 19: $t14 := copy($t2)
 20: $t15 := copy($t3)
 21: $t16 := <($t14, $t15)
 22: if ($t16) goto 23 else goto 35
 23: label L3
 24: goto 25
 25: label L4
 26: $t17 := copy($t0)
 27: $t18 := copy($t2)
 28: $t19 := copy($t3)
 29: vector::swap<#0>($t17, $t18, $t19)
 30: $t20 := move($t2)
 31: $t21 := 1
 32: $t22 := +($t20, $t21)
 33: $t2 := $t22
 34: goto 18
 35: label L2
 36: $t23 := move($t0)
 37: destroy($t23)
 38: return ()
}


[variant baseline]
public fun vector::is_empty<#0>($t0|v: &vector<#0>): bool {
     var $t1: &vector<#0>
     var $t2: u64
     var $t3: u64
     var $t4: bool
  0: $t1 := move($t0)
  1: $t2 := vector::length<#0>($t1)
  2: $t3 := 0
  3: $t4 := ==($t2, $t3)
  4: return $t4
}


[variant baseline]
public native fun vector::length<#0>($t0|v: &vector<#0>): u64;


[variant baseline]
public native fun vector::pop_back<#0>($t0|v: &mut vector<#0>): #0;


[variant baseline]
public native fun vector::push_back<#0>($t0|v: &mut vector<#0>, $t1|e: #0);


[variant baseline]
public fun vector::remove<#0>($t0|v: &mut vector<#0>, $t1|i: u64): #0 {
     var $t2|tmp#$2: u64
     var $t3|tmp#$3: &mut vector<#0>
     var $t4|len#1#0: u64
     var $t5: &mut vector<#0>
     var $t6: &vector<#0>
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: bool
     var $t11: &mut vector<#0>
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: u64
     var $t18: bool
     var $t19: &mut vector<#0>
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: u64
     var $t24: &mut vector<#0>
     var $t25: u64
     var $t26: u64
     var $t27: &mut vector<#0>
     var $t28: #0
  0: $t5 := copy($t0)
  1: $t6 := freeze_ref($t5)
  2: $t7 := vector::length<#0>($t6)
  3: $t4 := $t7
  4: $t8 := copy($t1)
  5: $t9 := copy($t4)
  6: $t10 := >=($t8, $t9)
  7: if ($t10) goto 8 else goto 13
  8: label L1
  9: $t11 := move($t0)
 10: destroy($t11)
 11: $t12 := 131072
 12: abort($t12)
 13: label L0
 14: $t13 := move($t4)
 15: $t14 := 1
 16: $t15 := -($t13, $t14)
 17: $t4 := $t15
 18: goto 19
 19: label L5
 20: $t16 := copy($t1)
 21: $t17 := copy($t4)
 22: $t18 := <($t16, $t17)
 23: if ($t18) goto 24 else goto 40
 24: label L3
 25: goto 26
 26: label L4
 27: $t19 := copy($t0)
 28: $t3 := $t19
 29: $t20 := copy($t1)
 30: $t2 := $t20
 31: $t21 := move($t1)
 32: $t22 := 1
 33: $t23 := +($t21, $t22)
 34: $t1 := $t23
 35: $t24 := move($t3)
 36: $t25 := move($t2)
 37: $t26 := copy($t1)
 38: vector::swap<#0>($t24, $t25, $t26)
 39: goto 19
 40: label L2
 41: $t27 := move($t0)
 42: $t28 := vector::pop_back<#0>($t27)
 43: return $t28
}


[variant baseline]
public fun vector::reverse<#0>($t0|v: &mut vector<#0>) {
     var $t1|back_index#1#0: u64
     var $t2|front_index#1#0: u64
     var $t3|len#1#0: u64
     var $t4: &mut vector<#0>
     var $t5: &vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: &mut vector<#0>
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: bool
     var $t18: &mut vector<#0>
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: u64
     var $t24: u64
     var $t25: u64
     var $t26: u64
     var $t27: &mut vector<#0>
  0: $t4 := copy($t0)
  1: $t5 := freeze_ref($t4)
  2: $t6 := vector::length<#0>($t5)
  3: $t3 := $t6
  4: $t7 := copy($t3)
  5: $t8 := 0
  6: $t9 := ==($t7, $t8)
  7: if ($t9) goto 8 else goto 12
  8: label L1
  9: $t10 := move($t0)
 10: destroy($t10)
 11: return ()
 12: label L0
 13: $t11 := 0
 14: $t2 := $t11
 15: $t12 := move($t3)
 16: $t13 := 1
 17: $t14 := -($t12, $t13)
 18: $t1 := $t14
 19: goto 20
 20: label L5
 21: $t15 := copy($t2)
 22: $t16 := copy($t1)
 23: $t17 := <($t15, $t16)
 24: if ($t17) goto 25 else goto 41
 25: label L3
 26: goto 27
 27: label L4
 28: $t18 := copy($t0)
 29: $t19 := copy($t2)
 30: $t20 := copy($t1)
 31: vector::swap<#0>($t18, $t19, $t20)
 32: $t21 := move($t2)
 33: $t22 := 1
 34: $t23 := +($t21, $t22)
 35: $t2 := $t23
 36: $t24 := move($t1)
 37: $t25 := 1
 38: $t26 := -($t24, $t25)
 39: $t1 := $t26
 40: goto 20
 41: label L2
 42: $t27 := move($t0)
 43: destroy($t27)
 44: return ()
}


[variant baseline]
public fun vector::singleton<#0>($t0|e: #0): vector<#0> {
     var $t1|v#1#0: vector<#0>
     var $t2: vector<#0>
     var $t3: &mut vector<#0>
     var $t4: #0
     var $t5: vector<#0>
  0: $t2 := vector::empty<#0>()
  1: $t1 := $t2
  2: $t3 := borrow_local($t1)
  3: $t4 := move($t0)
  4: vector::push_back<#0>($t3, $t4)
  5: $t5 := move($t1)
  6: return $t5
}


[variant baseline]
public native fun vector::swap<#0>($t0|v: &mut vector<#0>, $t1|i: u64, $t2|j: u64);


[variant baseline]
public fun vector::swap_remove<#0>($t0|v: &mut vector<#0>, $t1|i: u64): #0 {
     var $t2|last_idx#1#0: u64
     var $t3: &mut vector<#0>
     var $t4: &vector<#0>
     var $t5: bool
     var $t6: bool
     var $t7: &mut vector<#0>
     var $t8: u64
     var $t9: &mut vector<#0>
     var $t10: &vector<#0>
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: &mut vector<#0>
     var $t15: u64
     var $t16: u64
     var $t17: &mut vector<#0>
     var $t18: #0
  0: $t3 := copy($t0)
  1: $t4 := freeze_ref($t3)
  2: $t5 := vector::is_empty<#0>($t4)
  3: $t6 := !($t5)
  4: if ($t6) goto 5 else goto 7
  5: label L1
  6: goto 12
  7: label L0
  8: $t7 := move($t0)
  9: destroy($t7)
 10: $t8 := 131072
 11: abort($t8)
 12: label L2
 13: $t9 := copy($t0)
 14: $t10 := freeze_ref($t9)
 15: $t11 := vector::length<#0>($t10)
 16: $t12 := 1
 17: $t13 := -($t11, $t12)
 18: $t2 := $t13
 19: $t14 := copy($t0)
 20: $t15 := move($t1)
 21: $t16 := move($t2)
 22: vector::swap<#0>($t14, $t15, $t16)
 23: $t17 := move($t0)
 24: $t18 := vector::pop_back<#0>($t17)
 25: return $t18
}


[variant baseline]
fun ReturnRefsIntoVec::return_vec_index_immut($t0|v: &vector<u64>): &u64 {
     var $t1: &vector<u64>
     var $t2: u64
     var $t3: &u64
  0: $t1 := move($t0)
  1: $t2 := 0
  2: $t3 := vector::borrow<u64>($t1, $t2)
  3: return $t3
}


[variant baseline]
fun ReturnRefsIntoVec::return_vec_index_mut($t0|v: &mut vector<u64>): &mut u64 {
     var $t1: &mut vector<u64>
     var $t2: u64
     var $t3: &mut u64
  0: $t1 := move($t0)
  1: $t2 := 0
  2: $t3 := vector::borrow_mut<u64>($t1, $t2)
  3: return $t3
}

============ after pipeline `escape_analysis` ================

[variant baseline]
public fun vector::append<#0>($t0|lhs: &mut vector<#0>, $t1|other: vector<#0>) {
     var $t2: &mut vector<#0>
     var $t3: &vector<#0>
     var $t4: bool
     var $t5: bool
     var $t6: &mut vector<#0>
     var $t7: &mut vector<#0>
     var $t8: #0
     var $t9: &mut vector<#0>
     var $t10: vector<#0>
  0: $t2 := borrow_local($t1)
  1: vector::reverse<#0>($t2)
  2: goto 3
  3: label L3
  4: $t3 := borrow_local($t1)
  5: $t4 := vector::is_empty<#0>($t3)
  6: $t5 := !($t4)
  7: if ($t5) goto 8 else goto 16
  8: label L1
  9: goto 10
 10: label L2
 11: $t6 := copy($t0)
 12: $t7 := borrow_local($t1)
 13: $t8 := vector::pop_back<#0>($t7)
 14: vector::push_back<#0>($t6, $t8)
 15: goto 3
 16: label L0
 17: $t9 := move($t0)
 18: destroy($t9)
 19: $t10 := move($t1)
 20: vector::destroy_empty<#0>($t10)
 21: return ()
}


[variant baseline]
public native fun vector::borrow<#0>($t0|v: &vector<#0>, $t1|i: u64): &#0;


[variant baseline]
public native fun vector::borrow_mut<#0>($t0|v: &mut vector<#0>, $t1|i: u64): &mut #0;


[variant baseline]
public fun vector::contains<#0>($t0|v: &vector<#0>, $t1|e: &#0): bool {
     var $t2|i#1#0: u64
     var $t3|len#1#0: u64
     var $t4: u64
     var $t5: &vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: &vector<#0>
     var $t11: u64
     var $t12: &#0
     var $t13: &#0
     var $t14: bool
     var $t15: &vector<#0>
     var $t16: &#0
     var $t17: bool
     var $t18: u64
     var $t19: u64
     var $t20: u64
     var $t21: &vector<#0>
     var $t22: &#0
     var $t23: bool
  0: $t4 := 0
  1: $t2 := $t4
  2: $t5 := copy($t0)
  3: $t6 := vector::length<#0>($t5)
  4: $t3 := $t6
  5: goto 6
  6: label L5
  7: $t7 := copy($t2)
  8: $t8 := copy($t3)
  9: $t9 := <($t7, $t8)
 10: if ($t9) goto 11 else goto 33
 11: label L1
 12: goto 13
 13: label L2
 14: $t10 := copy($t0)
 15: $t11 := copy($t2)
 16: $t12 := vector::borrow<#0>($t10, $t11)
 17: $t13 := copy($t1)
 18: $t14 := ==($t12, $t13)
 19: if ($t14) goto 20 else goto 27
 20: label L4
 21: $t15 := move($t0)
 22: destroy($t15)
 23: $t16 := move($t1)
 24: destroy($t16)
 25: $t17 := true
 26: return $t17
 27: label L3
 28: $t18 := move($t2)
 29: $t19 := 1
 30: $t20 := +($t18, $t19)
 31: $t2 := $t20
 32: goto 6
 33: label L0
 34: $t21 := move($t0)
 35: destroy($t21)
 36: $t22 := move($t1)
 37: destroy($t22)
 38: $t23 := false
 39: return $t23
}


[variant baseline]
public native fun vector::destroy_empty<#0>($t0|v: vector<#0>);


[variant baseline]
public native fun vector::empty<#0>(): vector<#0>;


[variant baseline]
public fun vector::index_of<#0>($t0|v: &vector<#0>, $t1|e: &#0): (bool, u64) {
     var $t2|i#1#0: u64
     var $t3|len#1#0: u64
     var $t4: u64
     var $t5: &vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: &vector<#0>
     var $t11: u64
     var $t12: &#0
     var $t13: &#0
     var $t14: bool
     var $t15: &vector<#0>
     var $t16: &#0
     var $t17: bool
     var $t18: u64
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: &vector<#0>
     var $t23: &#0
     var $t24: bool
     var $t25: u64
  0: $t4 := 0
  1: $t2 := $t4
  2: $t5 := copy($t0)
  3: $t6 := vector::length<#0>($t5)
  4: $t3 := $t6
  5: goto 6
  6: label L5
  7: $t7 := copy($t2)
  8: $t8 := copy($t3)
  9: $t9 := <($t7, $t8)
 10: if ($t9) goto 11 else goto 34
 11: label L1
 12: goto 13
 13: label L2
 14: $t10 := copy($t0)
 15: $t11 := copy($t2)
 16: $t12 := vector::borrow<#0>($t10, $t11)
 17: $t13 := copy($t1)
 18: $t14 := ==($t12, $t13)
 19: if ($t14) goto 20 else goto 28
 20: label L4
 21: $t15 := move($t0)
 22: destroy($t15)
 23: $t16 := move($t1)
 24: destroy($t16)
 25: $t17 := true
 26: $t18 := move($t2)
 27: return ($t17, $t18)
 28: label L3
 29: $t19 := move($t2)
 30: $t20 := 1
 31: $t21 := +($t19, $t20)
 32: $t2 := $t21
 33: goto 6
 34: label L0
 35: $t22 := move($t0)
 36: destroy($t22)
 37: $t23 := move($t1)
 38: destroy($t23)
 39: $t24 := false
 40: $t25 := 0
 41: return ($t24, $t25)
}


[variant baseline]
public fun vector::insert<#0>($t0|v: &mut vector<#0>, $t1|e: #0, $t2|i: u64) {
     var $t3|len#1#0: u64
     var $t4: &mut vector<#0>
     var $t5: &vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: &mut vector<#0>
     var $t11: u64
     var $t12: &mut vector<#0>
     var $t13: #0
     var $t14: u64
     var $t15: u64
     var $t16: bool
     var $t17: &mut vector<#0>
     var $t18: u64
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: &mut vector<#0>
  0: $t4 := copy($t0)
  1: $t5 := freeze_ref($t4)
  2: $t6 := vector::length<#0>($t5)
  3: $t3 := $t6
  4: $t7 := copy($t2)
  5: $t8 := copy($t3)
  6: $t9 := >($t7, $t8)
  7: if ($t9) goto 8 else goto 13
  8: label L1
  9: $t10 := move($t0)
 10: destroy($t10)
 11: $t11 := 131072
 12: abort($t11)
 13: label L0
 14: $t12 := copy($t0)
 15: $t13 := move($t1)
 16: vector::push_back<#0>($t12, $t13)
 17: goto 18
 18: label L5
 19: $t14 := copy($t2)
 20: $t15 := copy($t3)
 21: $t16 := <($t14, $t15)
 22: if ($t16) goto 23 else goto 35
 23: label L3
 24: goto 25
 25: label L4
 26: $t17 := copy($t0)
 27: $t18 := copy($t2)
 28: $t19 := copy($t3)
 29: vector::swap<#0>($t17, $t18, $t19)
 30: $t20 := move($t2)
 31: $t21 := 1
 32: $t22 := +($t20, $t21)
 33: $t2 := $t22
 34: goto 18
 35: label L2
 36: $t23 := move($t0)
 37: destroy($t23)
 38: return ()
}


[variant baseline]
public fun vector::is_empty<#0>($t0|v: &vector<#0>): bool {
     var $t1: &vector<#0>
     var $t2: u64
     var $t3: u64
     var $t4: bool
  0: $t1 := move($t0)
  1: $t2 := vector::length<#0>($t1)
  2: $t3 := 0
  3: $t4 := ==($t2, $t3)
  4: return $t4
}


[variant baseline]
public native fun vector::length<#0>($t0|v: &vector<#0>): u64;


[variant baseline]
public native fun vector::pop_back<#0>($t0|v: &mut vector<#0>): #0;


[variant baseline]
public native fun vector::push_back<#0>($t0|v: &mut vector<#0>, $t1|e: #0);


[variant baseline]
public fun vector::remove<#0>($t0|v: &mut vector<#0>, $t1|i: u64): #0 {
     var $t2|tmp#$2: u64
     var $t3|tmp#$3: &mut vector<#0>
     var $t4|len#1#0: u64
     var $t5: &mut vector<#0>
     var $t6: &vector<#0>
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: bool
     var $t11: &mut vector<#0>
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: u64
     var $t18: bool
     var $t19: &mut vector<#0>
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: u64
     var $t24: &mut vector<#0>
     var $t25: u64
     var $t26: u64
     var $t27: &mut vector<#0>
     var $t28: #0
  0: $t5 := copy($t0)
  1: $t6 := freeze_ref($t5)
  2: $t7 := vector::length<#0>($t6)
  3: $t4 := $t7
  4: $t8 := copy($t1)
  5: $t9 := copy($t4)
  6: $t10 := >=($t8, $t9)
  7: if ($t10) goto 8 else goto 13
  8: label L1
  9: $t11 := move($t0)
 10: destroy($t11)
 11: $t12 := 131072
 12: abort($t12)
 13: label L0
 14: $t13 := move($t4)
 15: $t14 := 1
 16: $t15 := -($t13, $t14)
 17: $t4 := $t15
 18: goto 19
 19: label L5
 20: $t16 := copy($t1)
 21: $t17 := copy($t4)
 22: $t18 := <($t16, $t17)
 23: if ($t18) goto 24 else goto 40
 24: label L3
 25: goto 26
 26: label L4
 27: $t19 := copy($t0)
 28: $t3 := $t19
 29: $t20 := copy($t1)
 30: $t2 := $t20
 31: $t21 := move($t1)
 32: $t22 := 1
 33: $t23 := +($t21, $t22)
 34: $t1 := $t23
 35: $t24 := move($t3)
 36: $t25 := move($t2)
 37: $t26 := copy($t1)
 38: vector::swap<#0>($t24, $t25, $t26)
 39: goto 19
 40: label L2
 41: $t27 := move($t0)
 42: $t28 := vector::pop_back<#0>($t27)
 43: return $t28
}


[variant baseline]
public fun vector::reverse<#0>($t0|v: &mut vector<#0>) {
     var $t1|back_index#1#0: u64
     var $t2|front_index#1#0: u64
     var $t3|len#1#0: u64
     var $t4: &mut vector<#0>
     var $t5: &vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: &mut vector<#0>
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: bool
     var $t18: &mut vector<#0>
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: u64
     var $t24: u64
     var $t25: u64
     var $t26: u64
     var $t27: &mut vector<#0>
  0: $t4 := copy($t0)
  1: $t5 := freeze_ref($t4)
  2: $t6 := vector::length<#0>($t5)
  3: $t3 := $t6
  4: $t7 := copy($t3)
  5: $t8 := 0
  6: $t9 := ==($t7, $t8)
  7: if ($t9) goto 8 else goto 12
  8: label L1
  9: $t10 := move($t0)
 10: destroy($t10)
 11: return ()
 12: label L0
 13: $t11 := 0
 14: $t2 := $t11
 15: $t12 := move($t3)
 16: $t13 := 1
 17: $t14 := -($t12, $t13)
 18: $t1 := $t14
 19: goto 20
 20: label L5
 21: $t15 := copy($t2)
 22: $t16 := copy($t1)
 23: $t17 := <($t15, $t16)
 24: if ($t17) goto 25 else goto 41
 25: label L3
 26: goto 27
 27: label L4
 28: $t18 := copy($t0)
 29: $t19 := copy($t2)
 30: $t20 := copy($t1)
 31: vector::swap<#0>($t18, $t19, $t20)
 32: $t21 := move($t2)
 33: $t22 := 1
 34: $t23 := +($t21, $t22)
 35: $t2 := $t23
 36: $t24 := move($t1)
 37: $t25 := 1
 38: $t26 := -($t24, $t25)
 39: $t1 := $t26
 40: goto 20
 41: label L2
 42: $t27 := move($t0)
 43: destroy($t27)
 44: return ()
}


[variant baseline]
public fun vector::singleton<#0>($t0|e: #0): vector<#0> {
     var $t1|v#1#0: vector<#0>
     var $t2: vector<#0>
     var $t3: &mut vector<#0>
     var $t4: #0
     var $t5: vector<#0>
  0: $t2 := vector::empty<#0>()
  1: $t1 := $t2
  2: $t3 := borrow_local($t1)
  3: $t4 := move($t0)
  4: vector::push_back<#0>($t3, $t4)
  5: $t5 := move($t1)
  6: return $t5
}


[variant baseline]
public native fun vector::swap<#0>($t0|v: &mut vector<#0>, $t1|i: u64, $t2|j: u64);


[variant baseline]
public fun vector::swap_remove<#0>($t0|v: &mut vector<#0>, $t1|i: u64): #0 {
     var $t2|last_idx#1#0: u64
     var $t3: &mut vector<#0>
     var $t4: &vector<#0>
     var $t5: bool
     var $t6: bool
     var $t7: &mut vector<#0>
     var $t8: u64
     var $t9: &mut vector<#0>
     var $t10: &vector<#0>
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: &mut vector<#0>
     var $t15: u64
     var $t16: u64
     var $t17: &mut vector<#0>
     var $t18: #0
  0: $t3 := copy($t0)
  1: $t4 := freeze_ref($t3)
  2: $t5 := vector::is_empty<#0>($t4)
  3: $t6 := !($t5)
  4: if ($t6) goto 5 else goto 7
  5: label L1
  6: goto 12
  7: label L0
  8: $t7 := move($t0)
  9: destroy($t7)
 10: $t8 := 131072
 11: abort($t8)
 12: label L2
 13: $t9 := copy($t0)
 14: $t10 := freeze_ref($t9)
 15: $t11 := vector::length<#0>($t10)
 16: $t12 := 1
 17: $t13 := -($t11, $t12)
 18: $t2 := $t13
 19: $t14 := copy($t0)
 20: $t15 := move($t1)
 21: $t16 := move($t2)
 22: vector::swap<#0>($t14, $t15, $t16)
 23: $t17 := move($t0)
 24: $t18 := vector::pop_back<#0>($t17)
 25: return $t18
}


[variant baseline]
fun ReturnRefsIntoVec::return_vec_index_immut($t0|v: &vector<u64>): &u64 {
     var $t1: &vector<u64>
     var $t2: u64
     var $t3: &u64
  0: $t1 := move($t0)
  1: $t2 := 0
  2: $t3 := vector::borrow<u64>($t1, $t2)
  3: return $t3
}


[variant baseline]
fun ReturnRefsIntoVec::return_vec_index_mut($t0|v: &mut vector<u64>): &mut u64 {
     var $t1: &mut vector<u64>
     var $t2: u64
     var $t3: &mut u64
  0: $t1 := move($t0)
  1: $t2 := 0
  2: $t3 := vector::borrow_mut<u64>($t1, $t2)
  3: return $t3
}
