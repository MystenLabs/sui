//# run
module 0x42.m {

entry foo() {
    let v: vector<u64>;
    let v_imm: &vector<u64>;
    let v_mut: &mut vector<u64>;
    let v_len: u64;
    let e_imm: &u64;
    let e_mut: &mut u64;
    let e_val: u64;
label b0:
    v = vec_pack_0<u64>();
    v_imm = &v;
    v_len = vec_len<u64>(copy(v_imm));
    assert(move(v_len) == 0, 1);
    _ = move(v_imm);

    v_mut = &mut v;
    vec_push_back<u64>(copy(v_mut), 0);
    vec_push_back<u64>(copy(v_mut), 1);

    v_len = vec_len<u64>(copy(v_mut));
    assert(move(v_len) == 2, 2);

    e_imm = vec_imm_borrow<u64>(copy(v_mut), 0);
    _ = move(e_imm);
    e_mut = vec_mut_borrow<u64>(copy(v_mut), 1);
    _ = move(e_mut);

    vec_swap<u64>(copy(v_mut), 0, 1);
    v_len = vec_len<u64>(copy(v_mut));
    assert(move(v_len) == 2, 3);

    e_val = vec_pop_back<u64>(copy(v_mut));
    assert(move(e_val) == 0, 4);
    e_val = vec_pop_back<u64>(copy(v_mut));
    assert(move(e_val) == 1, 5);

    v_len = vec_len<u64>(copy(v_mut));
    assert(move(v_len) == 0, 6);
    _ = move(v_mut);

    vec_unpack_0<u64>(move(v));
    return;
}

}
