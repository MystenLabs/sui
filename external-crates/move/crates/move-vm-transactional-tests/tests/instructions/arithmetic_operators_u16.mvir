//# run
module 0x1.m {

entry foo() {
label b0:
    assert(0u16 + 0u16 == 0u16, 1000);
    assert(0u16 + 1u16 == 1u16, 1001);
    assert(1u16 + 1u16 == 2u16, 1002);

    assert(13u16 + 67u16 == 80u16, 1100);
    assert(100u16 + 10u16 == 110u16, 1101);

    assert(0u16 + 65535u16 == 65535u16, 1200);
    assert(1u16 + 65534u16 == 65535u16, 1201);
    assert(5u16 + 65530u16 == 65535u16, 1202);
    return;
}

}
//# run
module 0x2.m {

entry foo() {
label b0:
    _ = 1u16 + 65535u16;
    return;
}

}
//# run
module 0x3.m {

entry foo() {
label b0:
    _ = 65500u16 + 65500u16;
    return;
}

}


//# run
module 0x4.m {

entry foo() {
label b0:
    assert(0u16 - 0u16 == 0u16, 2000);
    assert(1u16 - 0u16 == 1u16, 2001);
    assert(1u16 - 1u16 == 0u16, 2002);

    assert(52u16 - 13u16 == 39u16, 2100);
    assert(100u16 - 10u16 == 90u16, 2101);

    assert(65535u16 - 65535u16 == 0u16, 2200);
    assert(5u16 - 1u16 - 4u16 == 0u16, 2201);
    return;
}

}
//# run
module 0x5.m {

entry foo() {
label b0:
    _ = 0u16 - 1u16;
    return;
}

}
//# run
module 0x42.m {

entry foo() {
label b0:
    _ = 54u16 - 100u16;
    return;
}

}

//# run
module 0x6.m {

entry foo() {
label b0:
    assert(0u16 * 0u16 == 0u16, 3000);
    assert(1u16 * 0u16 == 0u16, 3001);
    assert(1u16 * 1u16 == 1u16, 3002);

    assert(6u16 * 7u16 == 42u16, 3100);
    assert(10u16 * 10u16 == 100u16, 3101);

    assert(32767u16 * 2u16 == 65534u16, 3200);
    return;
}

}
//# run
module 0x7.m {

entry foo() {
label b0:
    _ = 256u16 * 256u16;
    return;
}

}
//# run
module 0x8.m {

entry foo() {
label b0:
    _ = 32768u16 * 2u16;
    return;
}

}


//# run
module 0x9.m {

entry foo() {
label b0:
    assert(0u16 / 1u16 == 0u16, 4000);
    assert(1u16 / 1u16 == 1u16, 4001);
    assert(1u16 / 2u16 == 0u16, 4002);

    assert(6u16 / 3u16 == 2u16, 4100);
    assert(65535u16 / 121u16 == 541u16, 4101);

    assert(65534u16 / 65535u16 == 0u16, 4200);
    assert(65535u16 / 65535u16 == 1u16, 4201);
    return;
}

}
//# run
module 0x10.m {

entry foo() {
label b0:
    _ = 0u16 / 0u16;
    return;
}

}
//# run
module 0x11.m {

entry foo() {
label b0:
    _ = 1u16 / 0u16;
    return;
}

}
//# run
module 0x12.m {

entry foo() {
label b0:
    _ = 65535u16 / 0u16;
    return;
}

}

//# run
module 0x13.m {

entry foo() {
label b0:
    assert(0u16 % 1u16 == 0u16, 5000);
    assert(1u16 % 1u16 == 0u16, 5001);
    assert(1u16 % 2u16 == 1u16, 5002);

    assert(8u16 % 3u16 == 2u16, 5100);
    assert(65535u16 % 131u16 == 35u16, 5101);

    assert(65534u16 % 65535u16 == 65534u16, 5200);
    assert(65535u16 % 65535u16 == 0u16, 5201);
    return;
}

}
//# run
module 0x14.m {

entry foo() {
label b0:
    _ = 0u16 % 0u16;
    return;
}

}
//# run
module 0x15.m {

entry foo() {
label b0:
    _ = 1u16 % 0u16;
    return;
}

}
//# run
module 0x16.m {

entry foo() {
label b0:
    _ = 65535u16 % 0u16;
    return;
}

}
