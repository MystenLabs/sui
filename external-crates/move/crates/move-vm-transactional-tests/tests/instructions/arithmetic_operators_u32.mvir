//# run
module 0x1.m {

entry foo() {
label b0:
    assert(0u32 + 0u32 == 0u32, 1000);
    assert(0u32 + 1u32 == 1u32, 1001);
    assert(1u32 + 1u32 == 2u32, 1002);

    assert(13u32 + 67u32 == 80u32, 1100);
    assert(100u32 + 10u32 == 110u32, 1101);

    assert(0u32 + 4294967295u32 == 4294967295u32, 1200);
    assert(1u32 + 4294967294u32 == 4294967295u32, 1201);
    assert(5u32 + 4294967290u32 == 4294967295u32, 1202);
    return;
}

}
//# run
module 0x2.m {

entry foo() {
label b0:
    _ = 1u32 + 4294967295u32;
    return;
}

}
//# run
module 0x3.m {

entry foo() {
label b0:
    _ = 4294000000u32 + 4294000000u32;
    return;
}

}


//# run
module 0x4.m {

entry foo() {
label b0:
    assert(0u32 - 0u32 == 0u32, 2000);
    assert(1u32 - 0u32 == 1u32, 2001);
    assert(1u32 - 1u32 == 0u32, 2002);

    assert(52u32 - 13u32 == 39u32, 2100);
    assert(100u32 - 10u32 == 90u32, 2101);

    assert(4294967295u32 - 4294967295u32 == 0u32, 2200);
    assert(5u32 - 1u32 - 4u32 == 0u32, 2201);
    return;
}

}
//# run
module 0x5.m {

entry foo() {
label b0:
    _ = 0u32 - 1u32;
    return;
}

}
//# run
module 0x42.m {

entry foo() {
label b0:
    _ = 54u32 - 100u32;
    return;
}

}

//# run
module 0x6.m {

entry foo() {
label b0:
    assert(0u32 * 0u32 == 0u32, 3000);
    assert(1u32 * 0u32 == 0u32, 3001);
    assert(1u32 * 1u32 == 1u32, 3002);

    assert(6u32 * 7u32 == 42u32, 3100);
    assert(10u32 * 10u32 == 100u32, 3101);

    assert(2147483647u32 * 2u32 == 4294967294u32, 3200);
    return;
}

}
//# run
module 0x7.m {

entry foo() {
label b0:
    _ = 429496u32 * 429496u32;
    return;
}

}
//# run
module 0x8.m {

entry foo() {
label b0:
    _ = 2147483648u32 * 2u32;
    return;
}

}


//# run
module 0x9.m {

entry foo() {
label b0:
    assert(0u32 / 1u32 == 0u32, 4000);
    assert(1u32 / 1u32 == 1u32, 4001);
    assert(1u32 / 2u32 == 0u32, 4002);

    assert(6u32 / 3u32 == 2u32, 4100);
    assert(4294967295u32 / 131u32 == 32786009u32, 4101);

    assert(4294967294u32 / 4294967295u32 == 0u32, 4200);
    assert(4294967295u32 / 4294967295u32 == 1u32, 4201);
    return;
}

}
//# run
module 0x10.m {

entry foo() {
label b0:
    _ = 0u32 / 0u32;
    return;
}

}
//# run
module 0x11.m {

entry foo() {
label b0:
    _ = 1u32 / 0u32;
    return;
}

}
//# run
module 0x12.m {

entry foo() {
label b0:
    _ = 4294967295u32 / 0u32;
    return;
}

}

//# run
module 0x13.m {

entry foo() {
label b0:
    assert(0u32 % 1u32 == 0u32, 5000);
    assert(1u32 % 1u32 == 0u32, 5001);
    assert(1u32 % 2u32 == 1u32, 5002);

    assert(8u32 % 3u32 == 2u32, 5100);
    assert(4294967295u32 % 131u32 == 116u32, 5101);

    assert(4294967294u32 % 4294967295u32 == 4294967294u32, 5200);
    assert(4294967295u32 % 4294967295u32 == 0u32, 5201);
    return;
}

}
//# run
module 0x14.m {

entry foo() {
label b0:
    _ = 0u32 % 0u32;
    return;
}

}
//# run
module 0x15.m {

entry foo() {
label b0:
    _ = 1u32 % 0u32;
    return;
}

}
//# run
module 0x16.m {

entry foo() {
label b0:
    _ = 4294967295u32 % 0u32;
    return;
}

}
