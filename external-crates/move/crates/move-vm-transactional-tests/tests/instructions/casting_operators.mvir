//# run
module 0x1.m {

// Casting to u8.
entry foo() {
label b0:
    // 0 remains unchanged.
    assert(to_u8(0u8) == 0u8, 1000);
    assert(to_u8(0u64) == 0u8, 1001);
    assert(to_u8(0u128) == 0u8, 1002);
    assert(to_u8(0u16) == 0u8, 1000);
    assert(to_u8(0u32) == 0u8, 1001);
    assert(to_u8(0u256) == 0u8, 1002);

    // Random small number unchanged.
    assert(to_u8(21u8) == 21u8, 1100);
    assert(to_u8(21u64) == 21u8, 1101);
    assert(to_u8(21u128) == 21u8, 1102);
    assert(to_u8(21u16) == 21u8, 1100);
    assert(to_u8(21u32) == 21u8, 1101);
    assert(to_u8(21u256) == 21u8, 1102);

    // Max representable values remain unchanged.
    assert(to_u8(255u8) == 255u8, 1200);
    assert(to_u8(255u64) == 255u8, 1201);
    assert(to_u8(255u128) == 255u8, 1202);
    assert(to_u8(255u16) == 255u8, 1200);
    assert(to_u8(255u32) == 255u8, 1201);
    assert(to_u8(255u256) == 255u8, 1202);

    return;
}
}
// check: "Keep(EXECUTED)"

// Casting to u16.
//# run
module 0x2.m {

entry foo() {
label b0:
    // 0 remains unchanged.
    assert(to_u16(0u8) == 0u16, 1000);
    assert(to_u16(0u64) == 0u16, 1001);
    assert(to_u16(0u128) == 0u16, 1002);
    assert(to_u16(0u16) == 0u16, 1000);
    assert(to_u16(0u32) == 0u16, 1001);
    assert(to_u16(0u256) == 0u16, 1002);

    // Random small number unchanged.
    assert(to_u16(21u8) == 21u16, 1100);
    assert(to_u16(21u64) == 21u16, 1101);
    assert(to_u16(21u128) == 21u16, 1102);
    assert(to_u16(21u16) == 21u16, 1100);
    assert(to_u16(21u32) == 21u16, 1101);
    assert(to_u16(21u256) == 21u16, 1102);

    // Max representable values remain unchanged.
    assert(to_u16(255u8) == 255u16, 1200);
    assert(to_u16(65535u64) == 65535u16, 1201);
    assert(to_u16(65535u128) == 65535u16, 1202);
    assert(to_u16(65535u16) == 65535u16, 1200);
    assert(to_u16(65535u32) == 65535u16, 1201);
    assert(to_u16(65535u256) == 65535u16, 1202);

    return;
}

}// check: "Keep(EXECUTED)"

// Casting to u32.
//# run
module 0x3.m {

entry foo() {
label b0:
    // 0 remains unchanged.
    assert(to_u32(0u8) == 0u32, 1000);
    assert(to_u32(0u64) == 0u32, 1001);
    assert(to_u32(0u128) == 0u32, 1002);
    assert(to_u32(0u16) == 0u32, 1000);
    assert(to_u32(0u32) == 0u32, 1001);
    assert(to_u32(0u256) == 0u32, 1002);

    // Random small number unchanged.
    assert(to_u32(21u8) == 21u32, 1100);
    assert(to_u32(21u64) == 21u32, 1101);
    assert(to_u32(21u128) == 21u32, 1102);
    assert(to_u32(21u16) == 21u32, 1100);
    assert(to_u32(21u32) == 21u32, 1101);
    assert(to_u32(21u256) == 21u32, 1102);

    // Max representable values remain unchanged.
    assert(to_u32(255u8) == 255u32, 1200);
    assert(to_u32(4294967295u64) == 4294967295u32, 1201);
    assert(to_u32(4294967295u128) == 4294967295u32, 1202);
    assert(to_u32(65535u16) == 65535u32, 1200);
    assert(to_u32(4294967295u32) == 4294967295u32, 1201);
    assert(to_u32(4294967295u256) == 4294967295u32, 1202);

    return;
}

}// check: "Keep(EXECUTED)"

// Casting to u64.
//# run
module 0x4.m {

entry foo() {
label b0:
    // 0 remains unchanged.
    assert(to_u64(0u8) == 0u64, 2000);
    assert(to_u64(0u64) == 0u64, 2001);
    assert(to_u64(0u128) == 0u64, 2002);

    // Random small number unchanged.
    assert(to_u64(21u8) == 21u64, 2100);
    assert(to_u64(21u64) == 21u64, 2101);
    assert(to_u64(21u128) == 21u64, 2102);

    // Max representable values remain unchanged.
    assert(to_u64(255u8) == 255u64, 2200);
    assert(to_u64(18446744073709551615u64) == 18446744073709551615u64, 2201);
    assert(to_u64(18446744073709551615u128) == 18446744073709551615u64, 2202);
    return;
}

}// check: "Keep(EXECUTED)"

// Casting to u128.
//# run
module 0x5.m {

entry foo() {
label b0:
    // 0 remains unchanged.
    assert(to_u128(0u8) == 0u128, 3000);
    assert(to_u128(0u64) == 0u128, 3001);
    assert(to_u128(0u128) == 0u128, 3002);

    // Random small number unchanged.
    assert(to_u128(21u8) == 21u128, 3100);
    assert(to_u128(21u64) == 21u128, 3101);
    assert(to_u128(21u128) == 21u128, 3102);

    // Max representable values remain unchanged.
    assert(to_u128(255u8) == 255u128, 3200);
    assert(to_u128(18446744073709551615u64) == 18446744073709551615u128, 3201);
    assert(to_u128(340282366920938463463374607431768211455u128) == 340282366920938463463374607431768211455u128, 3202);
    return;
}

}// check: "Keep(EXECUTED)"


// Casting to u256.
//# run
module 0x6.m {

entry foo() {
label b0:
    // 0 remains unchanged.
    assert(to_u256(0u8) == 0u256, 1000);
    assert(to_u256(0u64) == 0u256, 1001);
    assert(to_u256(0u128) == 0u256, 1002);
    assert(to_u256(0u16) == 0u256, 1000);
    assert(to_u256(0u32) == 0u256, 1001);
    assert(to_u256(0u256) == 0u256, 1002);

    // Random small number unchanged.
    assert(to_u256(21u8) == 21u256, 1100);
    assert(to_u256(21u64) == 21u256, 1101);
    assert(to_u256(21u128) == 21u256, 1102);
    assert(to_u256(21u16) == 21u256, 1100);
    assert(to_u256(21u32) == 21u256, 1101);
    assert(to_u256(21u256) == 21u256, 1102);

    // Max representable values remain unchanged.
    assert(to_u256(255u8) == 255u256, 1200);
    assert(to_u256(18446744073709551615u64) == 18446744073709551615u256, 1201);
    assert(to_u256(340282366920938463463374607431768211455u128) == 340282366920938463463374607431768211455u256, 1202);
    assert(to_u256(65535u16) == 65535u256, 1200);
    assert(to_u256(4294967295u32) == 4294967295u256, 1201);
    assert(to_u256(115792089237316195423570985008687907853269984665640564039457584007913129639935u256) == 115792089237316195423570985008687907853269984665640564039457584007913129639935u256, 1202);

    return;
}

}// check: "Keep(EXECUTED)"

// Casting to u8, overflowing.
//# run
module 0x7.m {

entry foo() {
label b0:
    _ = to_u8(256u64);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x8.m {

entry foo() {
label b0:
    _ = to_u8(303u64);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x9.m {

entry foo() {
label b0:
    _ = to_u8(256u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x10.m {

entry foo() {
label b0:
    _ = to_u8(56432u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x11.m {

entry foo() {
label b0:
    _ = to_u8(256u16);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x12.m {

entry foo() {
label b0:
    _ = to_u8(303u16);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x13.m {

entry foo() {
label b0:
    _ = to_u8(256u32);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x14.m {

entry foo() {
label b0:
    _ = to_u8(303u32);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x15.m {

entry foo() {
label b0:
    _ = to_u8(18446744073709551615u64);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x16.m {

entry foo() {
label b0:
    _ = to_u8(340282366920938463463374607431768211455u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x17.m {

entry foo() {
label b0:
    _ = to_u8(65535u16);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x18.m {

entry foo() {
label b0:
    _ = to_u8(4294967295u32);
    return;
}

}// check: ARITHMETIC_ERROR

// Casting to u64, overflowing.
//# run
module 0x19.m {

entry foo() {
label b0:
    _ = to_u64(18446744073709551616u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x20.m {

entry foo() {
label b0:
    _ = to_u64(18446744073709551647u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x21.m {

entry foo() {
label b0:
    _ = to_u64(340282366920938463463374607431768211455u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x22.m {

entry foo() {
label b0:
    _ = to_u64(18446744073709551647u256);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x23.m {

entry foo() {
label b0:
    _ = to_u64(18446744073709551647u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x24.m {

entry foo() {
label b0:
    _ = to_u64(57896044618658097711785492504343953926634992332820282019728792003956564819967u256);
    return;
}

}// check: ARITHMETIC_ERROR

// Casting to u16, overflowing.
//# run
module 0x25.m {

entry foo() {
label b0:
    _ = to_u16(18446744073709551616u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x26.m {

entry foo() {
label b0:
    _ = to_u16(18446744073709551647u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x27.m {

entry foo() {
label b0:
    _ = to_u16(340282366920938463463374607431768211455u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x28.m {

entry foo() {
label b0:
    _ = to_u16(18446744073709551647u256);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x29.m {

entry foo() {
label b0:
    _ = to_u16(18446744073709551647u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x30.m {

entry foo() {
label b0:
    _ = to_u16(57896044618658097711785492504343953926634992332820282019728792003956564819967u256);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x31.m {

entry foo() {
label b0:
    _ = to_u16(2561233u32);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x32.m {

entry foo() {
label b0:
    _ = to_u16(4294967295u32);
    return;
}

}// check: ARITHMETIC_ERROR

// Casting to u32, overflowing.
//# run
module 0x33.m {

entry foo() {
label b0:
    _ = to_u32(18446744073709551616u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x34.m {

entry foo() {
label b0:
    _ = to_u32(18446744073709551647u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x35.m {

entry foo() {
label b0:
    _ = to_u32(340282366920938463463374607431768211455u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x36.m {

entry foo() {
label b0:
    _ = to_u32(18446744073709551647u256);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x37.m {

entry foo() {
label b0:
    _ = to_u32(18446744073709551647u128);
    return;
}

}// check: ARITHMETIC_ERROR

//# run
module 0x38.m {

entry foo() {
label b0:
    _ = to_u32(57896044618658097711785492504343953926634992332820282019728792003956564819967u256);
    return;
}

}// check: ARITHMETIC_ERROR
