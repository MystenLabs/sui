//# publish
module 0x5.Coin {
    struct Coin has store { value: u64 }
    public value(c: &Self.Coin): u64 {
    label b0:
        return *&move(c).Coin::value;
    }
    public zero(): Self.Coin {
    label b0:
        return Coin { value: 0 };
    }
    public destroy(c: Self.Coin) {
    label b0:
        Coin {} = move(c);
        _ = ();
        return;
    }
}

//# publish
module 0x42.M {
    import 0x5.Coin;
    import 0x1.vector;

    struct Coins has key { f: vector<Coin.Coin> }

    public new(): Self.Coins {
        let coin_vec: vector<Coin.Coin>;
        let coins: Self.Coins;
    label b0:
        coin_vec = vector.empty<Coin.Coin>();
        return Coins { f: move(coin_vec) };
    }

    public put_coin(coins: &mut Self.Coins, coin: Coin.Coin) {
        let v_ref: &mut vector<Coin.Coin>;
    label b0:
        v_ref = &mut move(coins).Coins::f;
        vector.push_back<Coin.Coin>(move(v_ref), move(coin));
        return;
    }

    public destroy(coins: Self.Coins) {
        let f: vector<Coin.Coin>;
    label b0:
        Coins { f: f } = move(coins);
    label loop:
        jump_if (vec_len<Coin.Coin>(&f) == 0) end;
        Coin.destroy(vec_pop_back<Coin.Coin>(&mut f));
        jump loop;
    label end:
        vec_unpack_0<Coin.Coin>(move(f));
        return;
    }

}

//# publish
module 0x43.Test {
    import 0x42.M;
    import 0x5.Coin;
    test() {
        let coins: M.Coins;
    label b0:
        coins = M.new();
        M.put_coin(&mut coins, Coin.zero());
        M.destroy(move(coins));
        return;
    }
}

//# run 0x43::Test::test
