// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// active_validatorsEpoch includes the requested fields of the GraphQL type Epoch.
// The GraphQL type's documentation follows.
//
// Operation of the Sui network is temporally partitioned into non-overlapping epochs,
// and the network aims to keep epochs roughly the same duration as each other.
// During a particular epoch the following data is fixed:
//
// - the protocol version
// - the reference gas price
// - the set of participating validators
type active_validatorsEpoch struct {
	// Validator related properties, including the active validators.
	ValidatorSet active_validatorsEpochValidatorSet `json:"validatorSet"`
}

// GetValidatorSet returns active_validatorsEpoch.ValidatorSet, and is useful for accessing the field via an interface.
func (v *active_validatorsEpoch) GetValidatorSet() active_validatorsEpochValidatorSet {
	return v.ValidatorSet
}

// active_validatorsEpochValidatorSet includes the requested fields of the GraphQL type ValidatorSet.
// The GraphQL type's documentation follows.
//
// Representation of `0x3::validator_set::ValidatorSet`.
type active_validatorsEpochValidatorSet struct {
	// The current list of active validators.
	ActiveValidators []active_validatorsEpochValidatorSetActiveValidatorsValidator `json:"activeValidators"`
}

// GetActiveValidators returns active_validatorsEpochValidatorSet.ActiveValidators, and is useful for accessing the field via an interface.
func (v *active_validatorsEpochValidatorSet) GetActiveValidators() []active_validatorsEpochValidatorSetActiveValidatorsValidator {
	return v.ActiveValidators
}

// active_validatorsEpochValidatorSetActiveValidatorsValidator includes the requested fields of the GraphQL type Validator.
type active_validatorsEpochValidatorSetActiveValidatorsValidator struct {
	// The validator's address.
	Address active_validatorsEpochValidatorSetActiveValidatorsValidatorAddress `json:"address"`
	// The fee charged by the validator for staking services.
	CommissionRate int `json:"commissionRate"`
	// Validator's name.
	Name string `json:"name"`
}

// GetAddress returns active_validatorsEpochValidatorSetActiveValidatorsValidator.Address, and is useful for accessing the field via an interface.
func (v *active_validatorsEpochValidatorSetActiveValidatorsValidator) GetAddress() active_validatorsEpochValidatorSetActiveValidatorsValidatorAddress {
	return v.Address
}

// GetCommissionRate returns active_validatorsEpochValidatorSetActiveValidatorsValidator.CommissionRate, and is useful for accessing the field via an interface.
func (v *active_validatorsEpochValidatorSetActiveValidatorsValidator) GetCommissionRate() int {
	return v.CommissionRate
}

// GetName returns active_validatorsEpochValidatorSetActiveValidatorsValidator.Name, and is useful for accessing the field via an interface.
func (v *active_validatorsEpochValidatorSetActiveValidatorsValidator) GetName() string { return v.Name }

// active_validatorsEpochValidatorSetActiveValidatorsValidatorAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type active_validatorsEpochValidatorSetActiveValidatorsValidatorAddress struct {
	Address string `json:"address"`
}

// GetAddress returns active_validatorsEpochValidatorSetActiveValidatorsValidatorAddress.Address, and is useful for accessing the field via an interface.
func (v *active_validatorsEpochValidatorSetActiveValidatorsValidatorAddress) GetAddress() string {
	return v.Address
}

// active_validatorsResponse is returned by active_validators on success.
type active_validatorsResponse struct {
	// Fetch epoch information by ID (defaults to the latest epoch).
	Epoch active_validatorsEpoch `json:"epoch"`
}

// GetEpoch returns active_validatorsResponse.Epoch, and is useful for accessing the field via an interface.
func (v *active_validatorsResponse) GetEpoch() active_validatorsEpoch { return v.Epoch }

// epoch_checkpoints_tx_blocksEpoch includes the requested fields of the GraphQL type Epoch.
// The GraphQL type's documentation follows.
//
// Operation of the Sui network is temporally partitioned into non-overlapping epochs,
// and the network aims to keep epochs roughly the same duration as each other.
// During a particular epoch the following data is fixed:
//
// - the protocol version
// - the reference gas price
// - the set of participating validators
type epoch_checkpoints_tx_blocksEpoch struct {
	// The epoch's id as a sequence number that starts at 0 and is incremented by one at every epoch change.
	EpochId int `json:"epochId"`
	// The total MIST rewarded as stake.
	TotalStakeRewards string `json:"totalStakeRewards"`
	// The minimum gas price that a quorum of validators are guaranteed to sign a transaction for.
	ReferenceGasPrice string `json:"referenceGasPrice"`
	// The total number of checkpoints in this epoch.
	TotalCheckpoints string `json:"totalCheckpoints"`
	// The total amount of gas fees (in MIST) that were paid in this epoch.
	TotalGasFees string `json:"totalGasFees"`
	// The amount added to total gas fees to make up the total stake rewards.
	TotalStakeSubsidies string `json:"totalStakeSubsidies"`
	// SUI set aside to account for objects stored on-chain, at the start of the epoch.
	// This is also used for storage rebates.
	StorageFund epoch_checkpoints_tx_blocksEpochStorageFund `json:"storageFund"`
	// The epoch's corresponding checkpoints.
	Checkpoints epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnection `json:"checkpoints"`
	// The epoch's corresponding transaction blocks.
	TransactionBlocks epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnection `json:"transactionBlocks"`
}

// GetEpochId returns epoch_checkpoints_tx_blocksEpoch.EpochId, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpoch) GetEpochId() int { return v.EpochId }

// GetTotalStakeRewards returns epoch_checkpoints_tx_blocksEpoch.TotalStakeRewards, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpoch) GetTotalStakeRewards() string { return v.TotalStakeRewards }

// GetReferenceGasPrice returns epoch_checkpoints_tx_blocksEpoch.ReferenceGasPrice, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpoch) GetReferenceGasPrice() string { return v.ReferenceGasPrice }

// GetTotalCheckpoints returns epoch_checkpoints_tx_blocksEpoch.TotalCheckpoints, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpoch) GetTotalCheckpoints() string { return v.TotalCheckpoints }

// GetTotalGasFees returns epoch_checkpoints_tx_blocksEpoch.TotalGasFees, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpoch) GetTotalGasFees() string { return v.TotalGasFees }

// GetTotalStakeSubsidies returns epoch_checkpoints_tx_blocksEpoch.TotalStakeSubsidies, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpoch) GetTotalStakeSubsidies() string {
	return v.TotalStakeSubsidies
}

// GetStorageFund returns epoch_checkpoints_tx_blocksEpoch.StorageFund, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpoch) GetStorageFund() epoch_checkpoints_tx_blocksEpochStorageFund {
	return v.StorageFund
}

// GetCheckpoints returns epoch_checkpoints_tx_blocksEpoch.Checkpoints, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpoch) GetCheckpoints() epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnection {
	return v.Checkpoints
}

// GetTransactionBlocks returns epoch_checkpoints_tx_blocksEpoch.TransactionBlocks, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpoch) GetTransactionBlocks() epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnection {
	return v.TransactionBlocks
}

// epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnection includes the requested fields of the GraphQL type CheckpointConnection.
type epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnection struct {
	// A list of nodes.
	Nodes []epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint `json:"nodes"`
}

// GetNodes returns epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnection.Nodes, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnection) GetNodes() []epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint {
	return v.Nodes
}

// epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint includes the requested fields of the GraphQL type Checkpoint.
// The GraphQL type's documentation follows.
//
// Checkpoints contain finalized transactions and are used for node synchronization
// and global transaction ordering.
type epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint struct {
	// This checkpoint's position in the total order of finalized checkpoints, agreed upon by
	// consensus.
	SequenceNumber int `json:"sequenceNumber"`
	// The timestamp at which the checkpoint is agreed to have happened according to consensus.
	// Transactions that access time in this checkpoint will observe this timestamp.
	Timestamp time.Time `json:"timestamp"`
	// The total number of transaction blocks in the network by the end of this checkpoint.
	NetworkTotalTransactions int `json:"networkTotalTransactions"`
	// The computation cost, storage cost, storage rebate, and non-refundable storage fee
	// accumulated during this epoch, up to and including this checkpoint. These values increase
	// monotonically across checkpoints in the same epoch, and reset on epoch boundaries.
	RollingGasSummary epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpointRollingGasSummaryGasCostSummary `json:"rollingGasSummary"`
	// This is an aggregation of signatures from a quorum of validators for the checkpoint
	// proposal.
	ValidatorSignatures string `json:"validatorSignatures"`
	// A commitment by the committee at the end of epoch on the contents of the live object set at
	// that time. This can be used to verify state snapshots.
	LiveObjectSetDigest string `json:"liveObjectSetDigest"`
}

// GetSequenceNumber returns epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint.SequenceNumber, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetTimestamp returns epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint.Timestamp, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetNetworkTotalTransactions returns epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint.NetworkTotalTransactions, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint) GetNetworkTotalTransactions() int {
	return v.NetworkTotalTransactions
}

// GetRollingGasSummary returns epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint.RollingGasSummary, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint) GetRollingGasSummary() epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpointRollingGasSummaryGasCostSummary {
	return v.RollingGasSummary
}

// GetValidatorSignatures returns epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint.ValidatorSignatures, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint) GetValidatorSignatures() string {
	return v.ValidatorSignatures
}

// GetLiveObjectSetDigest returns epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint.LiveObjectSetDigest, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpoint) GetLiveObjectSetDigest() string {
	return v.LiveObjectSetDigest
}

// epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpointRollingGasSummaryGasCostSummary includes the requested fields of the GraphQL type GasCostSummary.
// The GraphQL type's documentation follows.
//
// Breakdown of gas costs in effects.
type epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpointRollingGasSummaryGasCostSummary struct {
	// Gas paid for executing this transaction (in MIST).
	ComputationCost string `json:"computationCost"`
	// Gas paid for the data stored on-chain by this transaction (in MIST).
	StorageCost string `json:"storageCost"`
	// Part of storage cost that is not reclaimed when data created by this transaction is cleaned
	// up (in MIST).
	NonRefundableStorageFee string `json:"nonRefundableStorageFee"`
	// Part of storage cost that can be reclaimed by cleaning up data created by this transaction
	// (when objects are deleted or an object is modified, which is treated as a deletion followed
	// by a creation) (in MIST).
	StorageRebate string `json:"storageRebate"`
}

// GetComputationCost returns epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpointRollingGasSummaryGasCostSummary.ComputationCost, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpointRollingGasSummaryGasCostSummary) GetComputationCost() string {
	return v.ComputationCost
}

// GetStorageCost returns epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpointRollingGasSummaryGasCostSummary.StorageCost, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpointRollingGasSummaryGasCostSummary) GetStorageCost() string {
	return v.StorageCost
}

// GetNonRefundableStorageFee returns epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpointRollingGasSummaryGasCostSummary.NonRefundableStorageFee, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpointRollingGasSummaryGasCostSummary) GetNonRefundableStorageFee() string {
	return v.NonRefundableStorageFee
}

// GetStorageRebate returns epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpointRollingGasSummaryGasCostSummary.StorageRebate, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochCheckpointsCheckpointConnectionNodesCheckpointRollingGasSummaryGasCostSummary) GetStorageRebate() string {
	return v.StorageRebate
}

// epoch_checkpoints_tx_blocksEpochStorageFund includes the requested fields of the GraphQL type StorageFund.
// The GraphQL type's documentation follows.
//
// SUI set aside to account for objects stored on-chain.
type epoch_checkpoints_tx_blocksEpochStorageFund struct {
	// Sum of storage rebates of live objects on chain.
	TotalObjectStorageRebates string `json:"totalObjectStorageRebates"`
	// The portion of the storage fund that will never be refunded through storage rebates.
	//
	// The system maintains an invariant that the sum of all storage fees into the storage fund is
	// equal to the sum of of all storage rebates out, the total storage rebates remaining, and the
	// non-refundable balance.
	NonRefundableBalance string `json:"nonRefundableBalance"`
}

// GetTotalObjectStorageRebates returns epoch_checkpoints_tx_blocksEpochStorageFund.TotalObjectStorageRebates, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochStorageFund) GetTotalObjectStorageRebates() string {
	return v.TotalObjectStorageRebates
}

// GetNonRefundableBalance returns epoch_checkpoints_tx_blocksEpochStorageFund.NonRefundableBalance, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochStorageFund) GetNonRefundableBalance() string {
	return v.NonRefundableBalance
}

// epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnection includes the requested fields of the GraphQL type TransactionBlockConnection.
type epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnection struct {
	// A list of nodes.
	Nodes []epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlock `json:"nodes"`
}

// GetNodes returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnection.Nodes, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnection) GetNodes() []epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlock {
	return v.Nodes
}

// epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlock struct {
	// The gas input field provides information on what objects were used as gas as well as the
	// owner of the gas object(s) and information on the gas price and budget.
	//
	// If the owner of the gas object(s) is not the same as the sender, the transaction block is a
	// sponsored transaction block.
	GasInput epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInput `json:"gasInput"`
	// The effects field captures the results to the chain of executing this transaction.
	Effects epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffects `json:"effects"`
}

// GetGasInput returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.GasInput, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetGasInput() epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInput {
	return v.GasInput
}

// GetEffects returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.Effects, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetEffects() epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffects {
	return v.Effects
}

// epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffects includes the requested fields of the GraphQL type TransactionBlockEffects.
// The GraphQL type's documentation follows.
//
// The effects representing the result of executing a transaction block.
type epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffects struct {
	// Transactions whose outputs this transaction depends upon.
	Dependencies epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnection `json:"dependencies"`
}

// GetDependencies returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffects.Dependencies, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffects) GetDependencies() epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnection {
	return v.Dependencies
}

// epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnection includes the requested fields of the GraphQL type DependencyConnection.
type epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnection struct {
	// A list of nodes.
	Nodes []epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlock `json:"nodes"`
}

// GetNodes returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnection.Nodes, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnection) GetNodes() []epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlock {
	return v.Nodes
}

// epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlock struct {
	// The address corresponding to the public key that signed this transaction. System
	// transactions do not have senders.
	Sender epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlockSenderAddress `json:"sender"`
	// A 32-byte hash that uniquely identifies the transaction block contents, encoded in Base58.
	// This serves as a unique id for the block on chain.
	Digest string `json:"digest"`
	// Serialized form of this transaction's `SenderSignedData`, BCS serialized and Base64 encoded.
	Bcs string `json:"bcs"`
}

// GetSender returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlock.Sender, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlock) GetSender() epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlockSenderAddress {
	return v.Sender
}

// GetDigest returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlock) GetDigest() string {
	return v.Digest
}

// GetBcs returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlock.Bcs, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlock) GetBcs() string {
	return v.Bcs
}

// epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlockSenderAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlockSenderAddress struct {
	Address string `json:"address"`
}

// GetAddress returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlockSenderAddress.Address, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockEffectsDependenciesDependencyConnectionNodesTransactionBlockSenderAddress) GetAddress() string {
	return v.Address
}

// epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInput includes the requested fields of the GraphQL type GasInput.
// The GraphQL type's documentation follows.
//
// Configuration for this transaction's gas price and the coins used to pay for gas.
type epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInput struct {
	// Address of the owner of the gas object(s) used
	GasSponsor epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasSponsorAddress `json:"gasSponsor"`
	// Objects used to pay for a transaction's execution and storage
	GasPayment epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasPaymentObjectConnection `json:"gasPayment"`
	// An unsigned integer specifying the number of native tokens per gas unit this transaction
	// will pay (in MIST).
	GasPrice string `json:"gasPrice"`
	// The maximum number of gas units that can be expended by executing this transaction
	GasBudget string `json:"gasBudget"`
}

// GetGasSponsor returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInput.GasSponsor, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInput) GetGasSponsor() epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasSponsorAddress {
	return v.GasSponsor
}

// GetGasPayment returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInput.GasPayment, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInput) GetGasPayment() epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasPaymentObjectConnection {
	return v.GasPayment
}

// GetGasPrice returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInput.GasPrice, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInput) GetGasPrice() string {
	return v.GasPrice
}

// GetGasBudget returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInput.GasBudget, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInput) GetGasBudget() string {
	return v.GasBudget
}

// epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasPaymentObjectConnection includes the requested fields of the GraphQL type ObjectConnection.
type epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasPaymentObjectConnection struct {
	// A list of nodes.
	Nodes []epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasPaymentObjectConnectionNodesObject `json:"nodes"`
}

// GetNodes returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasPaymentObjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasPaymentObjectConnection) GetNodes() []epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasPaymentObjectConnectionNodesObject {
	return v.Nodes
}

// epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasPaymentObjectConnectionNodesObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasPaymentObjectConnectionNodesObject struct {
	Address string `json:"address"`
}

// GetAddress returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasPaymentObjectConnectionNodesObject.Address, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasPaymentObjectConnectionNodesObject) GetAddress() string {
	return v.Address
}

// epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasSponsorAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasSponsorAddress struct {
	Address string `json:"address"`
}

// GetAddress returns epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasSponsorAddress.Address, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksEpochTransactionBlocksTransactionBlockConnectionNodesTransactionBlockGasInputGasSponsorAddress) GetAddress() string {
	return v.Address
}

// epoch_checkpoints_tx_blocksResponse is returned by epoch_checkpoints_tx_blocks on success.
type epoch_checkpoints_tx_blocksResponse struct {
	// Fetch epoch information by ID (defaults to the latest epoch).
	Epoch epoch_checkpoints_tx_blocksEpoch `json:"epoch"`
}

// GetEpoch returns epoch_checkpoints_tx_blocksResponse.Epoch, and is useful for accessing the field via an interface.
func (v *epoch_checkpoints_tx_blocksResponse) GetEpoch() epoch_checkpoints_tx_blocksEpoch {
	return v.Epoch
}

// The query or mutation executed by active_validators.
const active_validators_Operation = `
query active_validators {
	epoch {
		validatorSet {
			activeValidators {
				address {
					address
				}
				commissionRate
				name
			}
		}
	}
}
`

func active_validators(
	ctx context.Context,
	client graphql.Client,
) (*active_validatorsResponse, error) {
	req := &graphql.Request{
		OpName: "active_validators",
		Query:  active_validators_Operation,
	}
	var err error

	var data active_validatorsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by epoch_checkpoints_tx_blocks.
const epoch_checkpoints_tx_blocks_Operation = `
query epoch_checkpoints_tx_blocks {
	epoch(id: 100) {
		epochId
		totalStakeRewards
		referenceGasPrice
		totalCheckpoints
		totalGasFees
		totalStakeSubsidies
		storageFund {
			totalObjectStorageRebates
			nonRefundableBalance
		}
		checkpoints {
			nodes {
				sequenceNumber
				timestamp
				networkTotalTransactions
				rollingGasSummary {
					computationCost
					storageCost
					nonRefundableStorageFee
					storageRebate
				}
				validatorSignatures
				liveObjectSetDigest
			}
		}
		transactionBlocks {
			nodes {
				gasInput {
					gasSponsor {
						address
					}
					gasPayment {
						nodes {
							address
						}
					}
					gasPrice
					gasBudget
				}
				effects {
					dependencies {
						nodes {
							sender {
								address
							}
							digest
							bcs
						}
					}
				}
			}
		}
	}
}
`

func epoch_checkpoints_tx_blocks(
	ctx context.Context,
	client graphql.Client,
) (*epoch_checkpoints_tx_blocksResponse, error) {
	req := &graphql.Request{
		OpName: "epoch_checkpoints_tx_blocks",
		Query:  epoch_checkpoints_tx_blocks_Operation,
	}
	var err error

	var data epoch_checkpoints_tx_blocksResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
