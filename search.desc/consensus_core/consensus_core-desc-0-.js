searchState.loadedDescShard("consensus_core", 0, "A block certified by consensus for fast path execution.\nA batch of certified blocks output by consensus for …\nA clock that allows to derive the current UNIX system …\nAccessors to Commit info.\nArguments from commit consumer to this consensus instance. …\nHelps monitor the progress of the consensus commit handler …\nDigest of a consensus commit.\nCommitFinalizer accepts a continuous stream of …\nIndex of a commit among all consensus commits.\n<code>CommitRange</code> stores a range of <code>CommitIndex</code>. The range …\nUniquely identifies a commit with its index and digest.\nThe output of consensus to execution is an ordered list of …\nExported Consensus API. ConsensusAuthority is used by Sui …\nContext contains per-epoch configuration and metrics …\nDagBuilder API\nDagState provides the API to write and read accepted …\nThe block has been garbage collected and will never be …\nExpand a committed sequence of leader into a sequence of …\nLexicographic min &amp; max digest.\nAllows all transactions to pass verification, for testing.\nThe block has been sequenced as part of a committed sub …\nExported API for testing and tools. Creates fake blocks …\nExported API for testing and tools. Sui transaction in …\nTransactionCertifier has the following purposes:\n<code>TransactionVerifier</code> implementation is supplied by Sui to …\nExported API for testing and tools. VerifiedBlock allows …\nStores own reject votes on input blocks, and aggregates …\nAll transactions in the block have a quorum of accept or …\nAll the committed blocks that are part of this sub-dag\nAccess to local clock\nThe reference of the commit. First commit after genesis …\nCommittee of the current epoch.\nSet by CommitObserver.\nReturns the current epoch of this client.\nTimestamp of the start of the current epoch.\nFailed requests by route\nCounter of requests exceeding the “excessive” size …\nCounter of responses exceeding the “excessive” size …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the highest commit index processed by the consensus …\nGauge of the number of inflight requests at any given time …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the two ranges have the same size.\nCheck if the provided range is sequentially after this …\nSet by Linearizer.\nMetrics of this authority.\nThe number of closed connections frames for a peer …\nThe total number of congestion events for a peer …\nThe congestion window for a peer connection.\nThe connection status of known peers. 0 if not connected, …\nThe number of data blocked frames for a peer connection.\nNumber of disconnect events per peer.\nThe total number of lost bytes for a peer connection.\nThe total number of lost packets for a peer connection.\nFrameStats The number of max data frames for a peer …\nPathStats The rtt for a peer connection in ms.\nThe total number of packets sent for a peer connection.\nThe total number bytes observed by the UDP peer connection.\nUDPStats The total number datagrams observed by the UDP …\nThe total number transmits observed by the UDP peer …\nThe number of connected peers\nInitializes DagState from storage.\nCreates a new committed sub dag.\nThis method is public for testing in other crates.\nCreate a test context with a committee of given size and …\nCreate a test context with a committee of given size and …\nIndex of this authority in the committee.\nParameters of this authority.\nProtocol configuration of current epoch.\nWhether rejected transactions in this commit have been …\nReturns reference to the block.\nSorted transaction indices that indicate the transactions …\nSet by CommitFinalizer.\nWaits for consensus to replay commits until the consumer …\nOptional scores that are provided as part of the consensus …\nRequest latency by route\nRequest size by route\nCounter of requests by route\nResponse size by route\nUpdates the highest commit index processed by the …\nReceive buffer size of Anemo socket.\nSend buffer size of Anemo socket.\nSubmits a list of transactions to be sequenced. The method …\nThe timestamp of the commit, obtained from the timestamp …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nVerifies a block and its transactions, checking …\nReturns indices of transactions to reject, or a …\nDetermines if this batch of transactions is valid. Fails …\nVotes on the transactions in a verified block. This is …\nA common interface for consensus storage.\nRepresents data to be written to the store together …\nChecks if blocks exist in the store.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads blocks for the given refs.\nReads all blocks voting on a particular commit.\nReads the last commit.\nReads the last commit info, written atomically with the …\nReads the last finalized commit.\nReads blocks for an authority, from start_round.\nReads all commits from start (inclusive) until end …\nWrites blocks, consensus commits and other data to store …\nIn-memory storage for testing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPersistent storage with RocksDB.\nReturns a list of the tables name and type pairs\nDump all key-value pairs in the page at the given table …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis opens the DB in read only mode and returns a struct …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of RocksDB storage.\nOpen in read only mode. No limitation on number of …\nOpens a set of tables in read-write mode Only one process …\nGet key value sizes from the db Tables must be opened in …\nTry catch up with primary for all tables. This can be a …")