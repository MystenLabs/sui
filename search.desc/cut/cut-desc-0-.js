searchState.loadedDescShard("cut", 0, "Tool for cutting duplicate versions of a subset of crates …\nAdd a directory to duplicate crates from, along with the …\nDon’t execute the cut, just display it.\nName of the feature the crates are being cut for – …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPackage names to include in the cut (this must match the …\nRoot of repository – all source and destination paths …\nDon’t make changes to the workspace.\nRecursively copy the contents of <code>src</code> to <code>dst</code>.  Fails if <code>src</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNormalize the representation of <code>path</code> by eliminating …\nReturn the path to <code>dst</code> relative to <code>src</code>.  If <code>src</code> is a file, …\nReturns the shortest prefix of <code>path</code> that doesn’t exist, …\nDetails for an individual copied package in the feature …\nDescription of where packages should be copied to, what …\nRelevant contents of a Cargo.toml <code>workspace</code> section.\nWhether the package in question is an explicit member of …\nCopy the contents of <code>package</code> from its <code>src_path</code> to its …\nNew directories that need to be created.  Used to clean-up …\nScan <code>args.directories</code> looking for <code>args.packages</code> to produce …\nFind the root of the git repository containing <code>cwd</code>, if it …\nCanonicalized paths of workspace excludes\nCopy the packages according to this plan.  On success, all …\nFormat a TOML array of strings: Splits elements over …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCanonicalized paths of workspace members\nMapping from the names of existing packages to be cut, to …\nRepresent <code>path</code> as a TOML value, by first describing it as …\nRead <code>members</code> and <code>exclude</code> from the <code>workspace</code> section of the …\nAttempt to clean-up the partial results of executing a …\nRoot of the repository, where the <code>Cargo.toml</code> containing …\nDetermine the state of the path insofar as whether it is a …\nRead <code>[field]</code> from <code>table</code>, as an array of strings, and …\nFind all dependency tables in <code>table</code>, part of a manifest at …\nUpdate an individual dependency from a copied package …\nFix the contents of the copied package’s <code>Cargo.toml</code>: …\nAdd entries to the <code>members</code> and <code>exclude</code> arrays in the root …")