searchState.loadedDescShard("mysten_common", 0, "Creates a generator which yields an approximately …\nSets the base delay for computing the next delay, before …\nSets the approximate ratio of consecutive backoff delays, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets the maximum jitter per delay. Default maximum jitter …\nConstructs a new exponential backoff generator, specifying …\nYields backoff delays. Never terminates.\nA moving average that decays over time so that the average …\nReturns the argument unchanged.\nGet the current value of the moving average.\nCalls <code>U::from(self)</code>.\nCreate a new DecayMovingAverage with an initial value and …\nOverride the moving average with a new value, bypassing …\nUpdate the moving average with a new value.\nAssert that a line of code is reached at least once. The …\nAssert that <code>condition</code> is true at least one time that this …\nAssert that a line of code is never reached. The …\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nA moving window that maintains the last N values of type <code>T</code> …\nAdds a new value to the window. If the window is at …\nReturns the argument unchanged.\nGet the current average of all values in the window. …\nCalls <code>U::from(self)</code>.\nGet the number of values currently in the window.\nCreates a new <code>MovingWindow</code> with the specified maximum size …\nReturns the argument unchanged.\nGet a random number generator.\nCalls <code>U::from(self)</code>.\nCreates a temporary directory with random name. Ensure the …\nLow level utilities shared across Sui.\nThis structure contains a cell for a single value. The …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets the value and notifies waiters. Return error if …\nNotify once allows waiter to register for certain …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNotify all waiters, present and future about event\nAwaits for <code>notify</code> method to be called.\nRegistration resolves to the value but also provides safe …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAsynchronously notifies waiters and return number of …")