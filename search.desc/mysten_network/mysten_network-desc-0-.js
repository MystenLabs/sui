searchState.loadedDescShard("mysten_network", 0, "Returns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMiddleware that adds callbacks to a <code>Service</code>.\n<code>Layer</code> that adds callbacks to a <code>Service</code>.\nResponse body for <code>Callback</code>.\nResponse future for <code>Callback</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the underlying service.\nGets a mutable reference to the underlying service.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying service.\nReturns a new <code>Layer</code> that wraps services with a …\nCreate a new <code>CallbackLayer</code> using the given …\nCreate a new <code>Callback</code>.\nA caching resolver based on hyper_util GaiResolver\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>Codec</code> that implements <code>application/grpc+bcs</code> via the serde …\nA <code>Codec</code> that implements <code>bcs</code> encoding/decoding and snappy …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>Codec</code> that implements <code>bcs</code> encoding/decoding via the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the concurrency limit applied to inbound requests per …\nSet a timeout for establishing an outbound connection.\nReturns the argument unchanged.\nSets the max connection-level flow control for HTTP2\nSets the SETTINGS_INITIAL_WINDOW_SIZE option for HTTP2 …\nSet whether HTTP2 Ping frames are enabled on accepted …\nSets a timeout for receiving an acknowledgement of the …\nSets the SETTINGS_MAX_CONCURRENT_STREAMS option for HTTP2 …\nCalls <code>U::from(self)</code>.\nOnly affects clients\nSet a timeout for all request handlers.\nSet whether TCP keepalive messages are enabled on accepted …\nApplies timeouts on incoming requests, specified by their …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe trait to be implemented when you want to be notified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalled when request call is dropped. It is guaranteed that …\nMethod will be called when a request has been received. …\nMethod to be called from the server when a request is …\nCalled when request call is started\nError types\nContains the “port” to contact. Similar to TCP or UDP, …\n<code>Protocol</code> describes all possible multiaddress protocols.\nTurn this <code>Protocol</code> into one that owns its data, thus being …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a single <code>Protocol</code> value from its byte slice …\nParse a protocol value from the given iterator of string …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to convert a multiaddr of the form …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nSet the ip address to <code>127.0.0.1</code>. For instance, it converts …\nSet the ip address to <code>0.0.0.0</code>. For instance, it converts …\nEncode this protocol by writing its binary representation …")