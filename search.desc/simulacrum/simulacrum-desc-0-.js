searchState.loadedDescShard("simulacrum", 0, "A <code>Simulacrum</code> of Sui.\nConfiguration for advancing epochs in the Simulacrum.\nA <code>Simulacrum</code> of Sui.\nAdvances the clock by <code>duration</code>.\nAdvances the epoch.\nControls whether to create authenticator state.\nControls whether to expire authenticator state.\nControls whether to create bridge committee.\nControls whether to create bridge state.\nCreates the next Checkpoint using the Transactions …\nControls whether to create deny list state.\nControls whether a <code>RandomStateCreate</code> end-of-epoch …\nAttempts to execute the provided Transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new account and credit it with <code>amount</code> gas units …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new, random Simulacrum instance using an <code>OsRng</code> as …\nCreate a new Simulacrum instance with a specific protocol …\nCreate a new Simulacrum instance using the provided <code>rng</code>.\nReturn the reference gas price for the current epoch\nRequest that <code>amount</code> Mist be sent to <code>address</code> from a faucet …\nReturn a handle to the internally held RNG.\nWhen specified, loads system packages from a framework …\nGenerate a random transfer transaction. TODO: This is here …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")