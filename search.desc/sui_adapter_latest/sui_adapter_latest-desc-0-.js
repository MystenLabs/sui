searchState.loadedDescShard("sui_adapter_latest", 0, "Macro used to create a tuple-like pattern match for Spanned\nRun the bytecode verifier with a meter limit\nGiven a list of <code>modules</code> and an <code>object_id</code>, mutate each …\nA package store that caches packages in memory and indexes …\nReturns the argument unchanged.\nGet a package by its package ID (i.e., not original ID). …\nCalls <code>U::from(self)</code>.\nUnderlying store the fetch packages from\nRollback a package that was pushed into the new packages. …\nPush a new package into the new packages. This is used to …\nExposes module and linkage resolution to the Move runtime. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates whether this <code>LinkageView</code> has had its context set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRestore a previously saved linkage context.  Fails if …\nSet the linkage context to the information based on the …\nReset the linkage, but save the context that existed …\nA <code>LinkedDataStore</code> is a wrapper around a <code>PackageStore</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll updates to a Arguments used in that Command\nWARNING! Using this mode will bypass all normal checks …\nthe gathered results from batched executions\nControls the calling of arbitrary Move functions\nControls the ability to instantiate any Move function …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf not set, the package ID should be calculated like an …\nDo not perform conservation checks after execution.\nInterface with the store necessary to execute a …\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is used primarily for values that have <code>copy</code> but not …\nUsed to remember the object ID and owner even if the value …\nTracks all gas operations for a single transaction. This …\nEntry point for gas charging.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResets any mutations, deletions, and events recorded in …\nCharge an instruction and fail if not enough gas units are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module implements support for tracing related to PTB …\nMaintains all runtime state specific to programmable …\nMimics an immutable borrow by cloning the argument value …\nMimic a mutable borrow by taking the argument value, …\nGet the argument value. Cloning the value if it is …\nCheck for valid shared object usage, either deleted or …\nSpecial case errors for type arguments to Move functions\nConvert a VM Error to an execution one\nDelete an ID and update the state\nDetermine the object changes and collect all user events\nCreate a new ID and update the state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe gas charger used for metering\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe LinkageView for this session\nLoad <code>type_tag</code> to get a <code>Type</code> in the provided <code>session</code>.  …\nLoad a type using the context’s current session.\nLoad a type using the context’s current session.\nMetrics for reporting exceeded limits\nCreate a new package\nReturn the last package pushed in <code>write_package</code>. This …\nThe protocol config\nFinish a command: clearing the borrows and adding the …\nRestore an argument after being mutably borrowed\nSet the link context for the session from the linkage …\nTakes an iterator of arguments and flattens a Result into …\nThe global state, used for resolving packages\nTakes the user events from the runtime and tags them with …\nTransfer the object to a new owner\nA shared transaction context, contains transaction digest …\nCreate a package upgrade from <code>previous_package</code> with …\nThe MoveVM\nAdd a newly created package to write as an effect of the …\nAn ASCII encoded string\nAn option\nSpecial enum for values that need additional validation, …\nA UTF8 encoded string\nA vector\nChecks the bytes against the <code>SpecialArgumentLayout</code> using …\nreturns true iff all BCS compatible bytes are actually …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nsubstitutes the type arguments into the parameter and …\n<code>ToString::to_string</code>, but without panic on OOM.\nAdds coin object info to the mutable vector passed as an …\nAdds <code>ExtMoveValueInfo</code> to the mutable vector passed as an …\nAdds <code>ExtMoveValueInfo</code> to the mutable vector passed as an …\nInserts execution error event into the trace. As is the …\nInserts make move vec event into the trace. As is the case …\nInserts merge coins event into the trace. As is the case …\nInserts Move call end event into the trace. As is the case …\nInserts Move call start event into the trace. As is the …\nInserts PTB summary event into the trace. As is the case …\nInserts publish event into the trace. As is the case for …\nInserts split coins event into the trace. As is the case …\nInserts transfer event into the trace. As is the case for …\nInserts upgrade event into the trace. As is the case for …\nThis module defines the shared environment, <code>Env</code>, used for …\nThis module provides a shared API amongst the ASTs for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWe verify that all types in the <code>StructTag</code> are defining …\nTakes an adapter Type and returns a VM runtime Type and …\nMaintains all runtime state specific to programmable …\nType wrapper around Value to ensure safe usage\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe gas charger used for metering\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetrics for reporting exceeded limits\nA shared transaction context, contains transaction digest …\nA memory location that can be borrowed or moved from\nA set of memory locations that can be borrowed or moved …\nBorrow the local, creating a reference to the value\nThis function will invariant violation on an invalid cast\nThe uid <em>must</em> be registered by the object runtime before …\nThe coin max value MUST be checked before calling this …\nThe coin value MUST be checked before calling this …\nCopy the value out in the local\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDoes the local contain a value?\nMove the value out of the local\nShould be called once at the start of a transaction to …\nRead the value, giving an invariant violation if the value …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfiguration for the linkage analysis.\nMetadata and shared operations for the PTB linkage …\nWhether system packages should always be included as a …\nConfig to use for the binary analysis (needed for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfig to use for the linkage analysis.\nAn at least constraint unifies as follows:\nAn exact constraint unifies as follows:\nUnifiers. These are used to determine how to unify two …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe need to late-bind the “self” resolution since for …\nIn the current linkage resolve an object ID to its …\nGiven a list of object IDs, generate a <code>ResolvedLinkage</code> for …\nAn argument to a programmable transaction command\nThe gas coin. The gas coin can only be used by-ref, except …\nOne of the input objects or primitive values (from …\nLike a <code>Result</code> but it accesses a nested result. Currently, …\nThe result of another command (from <code>ProgrammableTransaction</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nAfter loading and before type checking we do a pass over …\nBefore loading and type checking, we do a first pass over …\nThe <code>TranslationMeter</code> is responsible for metering gas usage …\nCharge gas for loading types based on the number of type …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAfter loading and type checking, we do a second pass over …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFunction used to have nearly tuple-like syntax for …\n<code>ToString::to_string</code>, but without panic on OOM.\nBorrow a value, i.e. <code>&amp;x</code> or <code>&amp;mut x</code>\nInformation for a given constraint for input bytes\nFreeze a mutable reference, making an <code>&amp;t</code> from <code>&amp;mut t</code>\nThe original index into the <code>input</code> vector of the …\nRead a value from a reference, i.e. <code>*&amp;x</code>\nMove or copy a value\nThe argument in that command\nGathered BCS bytes from Pure inputs\nThe command that first added this constraint\nThe command\nThe set of object shared object IDs that are consumed by …\nMarkers to drop unused results from the command. These are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll pure inputs\nAll receiving inputs\nThe type of the return values of the command\nWas this location borrowed at the time of copying? …\nVerifies memory safety of a transaction. This is a …\nVerifies the correctness of the typing on the AST\nSee <code>verify</code> function for details about this verification …\nRefines usage of values so that the last <code>Copy</code> of a value …\nReturns true if a type is a <code>Receiving&lt;t&gt;</code> where <code>t</code> has <code>key</code>\nVerifies two properties for input objects:\nChecks the following\nChecks the following\nChecks entry taint rules. An <code>entry</code> function cannot have …\nAdd an accumulator event to the execution results\nCheck that this transaction neither creates nor destroys …\nCheck that this transaction neither creates nor destroys …\nIf there are unmetered storage rebate (due to system …\nCrate a new objcet. This is used to create objects outside …\nDelete a mutable input object. This is used to delete …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBreak up the structure and return its internal stores …\nMutate a child object outside of PT. This should be used …\nMutate a mutable input object. This is used to mutate …\nCreates a new store associated with an authority store, …\nTake execution results v2, and translate it back to be …\nUpgrade system package during epoch change. This requires …\nRetrieve a <code>MoveStructLayout</code> from a <code>Type</code>. Invocation into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")