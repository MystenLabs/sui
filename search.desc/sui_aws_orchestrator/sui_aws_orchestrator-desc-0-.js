searchState.loadedDescShard("sui_aws_orchestrator", 0, "Run a benchmark on the specified testbed.\nDeploy the specified number of instances in all regions …\nDestroy the testbed and terminate all instances.\nThe fixed loads (in tx/s) to submit to the nodes.\nNOTE: Link these types to the correct protocol. Either Sui …\nSearch for the maximum load that the system can …\nStart at most the specified number of instances per region …\nDisplay the testbed status.\nStop an existing testbed (without destroying the …\nPrint a summary of the specified measurements collection.\nGet or modify the status of the testbed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of operation to run.\nThe path to the settings file. This file contains basic …\nThe size of each transaction in bytes\nA list of fixed load (tx/s).\nThe maximum number of iterations before converging on a …\nThe initial load (in tx/s) to test and use a baseline.\nPercentage of shared vs owned objects; 0 means only owned …\nThe committee size to deploy.\nThe interval to crash nodes in seconds.\nWhether the faulty nodes recover.\nThe number of instances running exclusively load …\nThe minimum duration of the benchmark in seconds.\nNumber of faulty nodes.\nThe load to submit to the system.\nWhether to download and analyze the client and node log …\nThe path to the settings file.\nThe number of times the orchestrator should retry an ssh …\nThe interval between measurements collection in seconds.\nWhether to forgo a grafana and prometheus instance and …\nWhether to skip testbed configuration before running …\nWhether to skip testbed updates before running benchmarks.\nThe timeout duration for ssh commands (in seconds).\nNumber of instances to deploy.\nNumber of instances to deploy.\nThe region where to deploy the instances. If this …\nThe benchmark parameters for a run.\nGenerate benchmark parameters (one set of parameters per …\nThe default benchmark duration.\nSubmit a fixed set of loads (one per benchmark run).\nThe load type to submit to the nodes.\nSearch for the breaking point of the L-graph.\nThe type of benchmark to run.\nThe type of benchmark to run.\nThe duration of the benchmark.\nThe duration of the benchmark.\nThe number of faulty nodes.\nThe number of (crash-)faults.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current number of iterations.\nThe total load (tx/s) to submit to the system.\nThe load type.\nTemporary hold a lower bound of the breaking point.\nmake a new generator.\nMake a new benchmark parameters.\nReturn the next set of benchmark parameters to run.\nThe load of the next benchmark run.\nThe committee size.\nThe committee size.\nDetects whether the latest benchmark parameters run the …\nRegister a new benchmark measurements collection. These …\n<code>ToString::to_string</code>, but without panic on OOM.\nTemporary hold an upper bound of the breaking point.\nSet the benchmark type.\nSet a custom benchmark duration.\nSet crash-recovery pattern and the number of faulty nodes.\nThe maximum number of iterations before converging on a …\nThe initial load to test (and use a baseline).\nRepresents a cloud provider instance.\nThe username used to connect to the instances.\nCreate an instance in a specific region.\nDelete a specific instance. Calling this function ensures …\nReturns the argument unchanged.\nThe unique identifier of the instance.\nReturn provider-specific commands to setup the instance.\nCalls <code>U::from(self)</code>.\nReturn whether the instance is active and running.\nReturn whether the instance is inactive and not ready for …\nReturn whether the instance is terminated and in the …\nList all existing instances (regardless of their status).\nThe public ip address of the instance (accessible from …\nThe region where the instance runs.\nAuthorize the provided ssh public key to access machines.\nThe specs of the instance.\nReturn the ssh address to connect to the instance.\nStart the specified instances.\nThe current status of the instance.\nHalt/Stop the specified instances. We may still be billed …\nThe list of tags associated with the instance.\nA AWS client.\nParse an AWS response and ignore errors if they mean a …\nCheck whether the instance type specified in the settings …\nA list of clients, one per AWS region.\nCreate a new security group for the instance (if it doesn…\nQuery the image id determining the os of the instances. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert an AWS instance into an orchestrator instance …\nMake a new AWS client.\nReturn the command to mount the first (standard) NVMe …\nThe settings of the testbed.\n<code>ToString::to_string</code>, but without panic on OOM.\nDefault style for tables printed to stdout.\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nProgressively crash and recover nodes.\nThe actions to apply to the testbed, i.e., which instances …\nPermanently crash the maximum number of nodes from the …\nThe instances to boot.\nThe current number of dead nodes.\nThe number of faulty nodes and the crash-recovery pattern …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe available instances.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe instances to kill.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nA simple log analyzer counting the number of errors and …\nAggregate multiple log analyzers into one, based on the …\nThe number of errors int he clients’ log files.\nWhether a client panicked.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe number of errors in the nodes’ log files.\nWhether a node panicked.\nPrint a summary of the errors.\nDeduce the number of clients errors from the logs.\nDeduce the number of nodes errors from the logs.\nThe identifier of prometheus latency buckets.\nA snapshot measurement at a given time.\nThe identifier of the scrapers collecting the prometheus …\nAdd a new measurement to the collection.\nAggregate the average latency of multiple data points by …\nAggregate the stdev latency of multiple data points by …\nAggregate the tps of multiple data points by taking the …\nCompute the average latency.\nAggregate the benchmark duration of multiple data points …\nLatency buckets.\nThe commit of the codebase.\nTotal number of finalized transactions\nDisplay a summary of the measurements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad a collection of measurement from a json file.\nThe machine / instance type.\nCreate a new (empty) collection of measurements.\nThe benchmark parameters of the current run.\nSave the collection of measurements as a json file.\nThe data collected by each scraper.\nSquare of the latencies of all finalized transactions.\nCompute the standard deviation from the sum of squared …\nSum of the latencies of all finalized transactions.\nDuration since the beginning of the benchmark.\nCompute the tps. NOTE: Do not use <code>self.timestamp</code> as …\nReturn the transaction (input) load of the benchmark.\nThe path to the datasources directory.\nThe path to the datasources directory.\nThe default grafana home directory (macOS, homebrew …\nThe default prometheus port.\nThe default grafana port.\nThe default grafana port.\nThe default prometheus configuration path.\nBootstrap the grafana with datasource to connect to the …\nGenerate the commands to setup prometheus on the given …\nGenerate the content of the datasource file for the given …\nGenerate the content of the datasource file for the given …\nDependencies to install.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate the global prometheus configuration. NOTE: The …\nThe public address of the grafana instance.\nThe commands to install prometheus.\nThe commands to install prometheus.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new monitor.\nConfigure grafana to connect to the given instances. Only …\nGenerate the prometheus configuration from the given …\nGenerate the commands to update the prometheus …\nGenerate the commands to update the grafana datasource and …\nStart grafana on the local host.\nStart a prometheus instance on each remote machine.\nThe default interval to crash nodes.\nThe default interval between measurements collection.\nAn orchestrator to run benchmarks on a testbed.\nThe type of the benchmark parameters.\nBoot one node per instance.\nCleanup all instances and optionally delete their log …\nConfigure the instances with the appropriate configuration …\nThe interval to crash nodes.\nNumber of instances running only load generators (not …\nDownload the log files from the nodes and clients.\nReturns the argument unchanged.\nInstall the codebase and its dependencies on the testbed.\nProvider-specific commands to install on the instance.\nThe state of the testbed (reflecting accurately the state …\nCalls <code>U::from(self)</code>.\nWhether to downloading and analyze the client and node log …\nMake a new orchestrator.\nProtocol-specific commands generator to generate the …\nCollect metrics from the load generators.\nRun all the benchmarks specified by the benchmark …\nDeploy the load generators.\nDeploy the nodes.\nThe interval between measurements collection.\nSelect on which instances of the testbed to run the …\nThe testbed’s settings.\nSet whether to boot grafana on the local machine to …\nWhether to forgo a grafana and prometheus instance and …\nWhether to skip testbed configuration before running …\nWhether to skip testbed configuration before running …\nWhether to skip testbed updates before running benchmarks.\nSet whether to skip testbed updates before running …\nHandle ssh connections to instances.\nReload prometheus on all instances.\nUpdate all instances to use the version of the codebase …\nSet interval with which to crash nodes.\nSet the number of instances running exclusively load …\nSet whether to download and analyze the client and node …\nSet interval between measurements collection.\nThe name of the metric reporting the total duration of the …\nThe name of the metric reporting the latency buckets.\nThe name of the metric reporting the square of the sum of …\nThe name of the metric reporting the sum of the end-to-end …\nThe minimum interface that the protocol should implement …\nThe names of the minimum metrics exposed by the load …\nThe name of the metric reporting the total number of …\nThe command to run a client. The function returns a vector …\nThe command to retrieve the metrics from the clients.\nThe network path where the clients expose prometheus …\nThe directories of all databases (that should be erased …\nThe command to generate the genesis and all configuration …\nThe command to run a node. The function returns a vector …\nThe command to retrieve the metrics from the nodes.\nThe network path where the nodes expose prometheus metrics.\nThe list of dependencies to install (e.g., through …\nAll configurations information to run a narwhal client or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new instance of the Narwhal protocol commands …\nThe size of each transaction in bytes\n<code>ToString::to_string</code>, but without panic on OOM.\nAll configurations information to run a Sui client or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new instance of the Sui protocol commands generator.\nCreates the network addresses in multi address format for …\nPercentage of shared vs owned objects; 0 means only owned …\n<code>ToString::to_string</code>, but without panic on OOM.\nThe list of supported cloud providers.\nThe git repository holding the codebase.\nThe testbed settings. Those are topically specified in a …\nThe cloud provider hosting the testbed.\nThe commit (or branch name) to deploy.\nCheck whether the input instance matches the criteria …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the settings from a json file.\nLoad the ssh public key from file.\nLoad the secret token to authenticate with the cloud …\nThe directory (on the local machine) where to download …\nThe list of cloud provider regions to deploy the testbed.\nThe details of the git reposit to deploy.\nGet the name of the repository (from its url).\nThe directory (on the local machine) where to save …\nThe specs of the instances to deploy. Those are dependent …\nThe ssh private key to access the instances.\nThe corresponding ssh public key registered on the …\nThe testbed unique id. This allows multiple users to run …\nThe path to the secret token for authentication with the …\nThe url of the repository.\nThe working directory on the remote instance (containing …\nThe command to execute on all specified remote machines.\nThe status of an ssh command running in the background.\nDefault duration before timing out the ssh connection.\nDelay before re-attempting an ssh execution.\nRepresentation of an ssh connection.\nThe host address.\nApply the context to a base command.\nWhether to run the command in the background (and return …\nCreate a new ssh connection with the provided host.\nDownload a file from the remote machines by doing a silly …\nExecute an ssh command on the remote machine.\nExecute the specified ssh command on all provided …\nExecute an ssh command on the remote machine and return …\nExecute the ssh command associated with each instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKill a command running in the background of the specified …\nThe log file to redirect all stdout and stderr.\nMake a useful session error from the lower level error …\nCreate a new ssh connection with a specific host.\nCreate a new ssh command.\nCreate a new ssh manager from the instances username and …\nThe path from where to execute the command.\nThe ssh primate key to connect to the instances.\nThe number of retries before giving up to execute the …\nThe number of retries before giving up to execute the …\nSet id of the command and indicate that it should run in …\nThe ssh session.\nReturn whether a background command is still running. …\nThe timeout value of the connection.\nThe ssh username.\nWait until a command running in the background returns or …\nSet the path from where to execute the command.\nSet the log file where to redirect stdout and stderr.\nSet the maximum number of times to retries to establish a …\nSet a timeout duration for the connections.\nRepresents a testbed running on a cloud provider.\nThe client interfacing with the cloud provider.\nPopulate the testbed by creating the specified amount of …\nDestroy all instances of the testbed.\nReturns the argument unchanged.\nReturn the list of instances of the testbed.\nThe state of the testbed (reflecting accurately the state …\nCalls <code>U::from(self)</code>.\nCreate a new testbed instance with the specified settings …\nThe testbed’s settings.\nReturn the list of provider-specific instance setup …\nStart the specified number of instances in each region. …\nPrint the current status of the testbed.\nStop all instances of the testbed.\nReturn the username to connect to the instances through …\nWait until all specified instances are ready to accept ssh …")