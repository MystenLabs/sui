searchState.loadedDescShard("sui_core", 0, "Implements generic pre- and post-processing. Since this is …\nIndexStore supports creation of various ancillary indexes …\nPrometheus metrics which can be displayed in Grafana, …\nALL_OBJ_VER determines whether we want to store all past …\nExecution env contains the “environment” for the …\nA wrapper to make Orphan Rule happy\na Trait object for <code>Signer</code> that is:\nThe assigned version of each shared object for the …\nAwaits the effects of executing a user transaction.\nTransactions that must finish before this transaction can …\nUpdates the state resulting from the execution of a …\nbytecode verifier metrics for tracking timeouts\nChecks multiple object locks exist. Returns …\nUsed for early client validation check for transactions …\nConsensus commit and transaction handler metrics\nCreates and execute the advance epoch transaction to …\nReturns true if there are no objects in the database\nThe object ID for gas can be any object ID, even for an …\nReturns true if we have an effects structure for this …\nAttempts to acquire execution lock for an executable …\nAcquires the execution lock for the duration of a …\nThe expected digest of the effects of the transaction, if …\nReturn the object with version less then or eq to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the set of system packages that are compiled in to …\nChain Identifier is the digest of the genesis checkpoint.\nReturns the latest object we have for this object_id in …\nReturns the latest object reference if and only if the …\nReturns the latest object reference we have for this …\nRead an object and return it, or Ok(None) if the object …\nGet many objects\nThis function aims to serve rpc reads on past objects and …\nGet the signed effects of the given transaction. If the …\nThis function reads the DB directly to get the system …\nGet the TransactionEnvelope that currently locks the given …\nMake a status response for a transaction\nSigns a transaction. Exposed for testing.\nInitiate a new transaction.\nNOTE: this function is only to be used for fuzzing and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the current epoch store. This can change during …\nThis is a temporary method to be used when we enable …\nGiven a list of transaction digests, returns a list of the …\nGiven a list of transaction digests, returns a list of the …\nCount of multisig signatures\nThe name of this authority.\nReturns future containing the state hash for the given …\nOpen an authority store by directory path. If the store is …\nOpen authority store without any operations that require …\nCurrent overload status in this authority. Updated …\nAdvance the epoch store to the next epoch for testing only.\nThe source of the scheduling of the transaction.\nThe signature key of the authority.\nOrdinarily, protocol upgrades occur when 2f + 1 + (f * …\nTraffic controller for Sui core servers (json-rpc, …\nTest only wrapper for <code>try_execute_immediately()</code> above, …\nInternal logic to execute a certificate.\nWait for a certificate to be executed. For consensus …\nWait for a transaction to be executed. For consensus …\nStatus of the balance withdraw scheduling of the …\nCount of zklogin signatures\nAuthorityEpochTables contains tables that contain data …\nA will-be-cancelled transaction. It’ll still go through …\nEverything else, e.g. AuthorityCapabilities, …\nConsensusStats is versioned because we may iterate on the …\nThe transaction should be re-processed at a future commit, …\nThe consensus message was ignored (e.g. because it has …\nA system message in consensus was ignored (e.g. because of …\nA message was processed which updates randomness state.\nAn executable transaction (can be a user tx or a system tx)\nAssign a sequence number for the shared objects of the …\nAcquire the lock for a tx without writing to the WAL.\nReturns true if all messages with the given keys were …\nGiven list of certificates, assign versions for all shared …\nReturns a list of the tables name and type pairs\nDump all key-value pairs in the page at the given table …\nReturns <code>&amp;Arc&lt;EpochStartConfiguration&gt;</code> User can treat this …\nNotify epoch is terminated, can only be called once on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOnly used by admin API\nThis opens the DB in read only mode and returns a struct …\nCalled when transaction outputs are committed to disk\nRecord that a transaction has been executed in the current …\nWhen submitting a certificate caller <strong>must</strong> provide a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether any certificates were processed by consensus.\nWhether this node is a validator in this epoch.\nThe round number of the last committed leader.\nReturns future containing the state accumulator for the …\nOpen in read only mode. No limitation on number of …\nOpens a set of tables in read-write mode Only one process …\nRegister genesis checkpoint in builder DB\nRecord most recently advertised capabilities of all …\nRecord most recently advertised capabilities of all …\nWARNING: This method is very subtle and can corrupt the …\nMaps checkpoint sequence number to the running …\nThe index of the last sub-DAG that was executed (either …\nGet key value sizes from the db Tables must be opened in …\nThe index of the last transaction was executed (used for …\nGet notified when transactions get executed as part of a …\nTry catch up with primary for all tables. This can be a …\nCaller must call consensus_message_processed_notify before …\nWaits for the notification about epoch termination\nThis function executes given future until epoch_terminated …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrunes old object versions based on effects from all …\nPrunes old data based on effects from all checkpoints from …\nAuthorityPerpetualTables contains data that must be …\nOptions to apply to every column family of the <code>perpetual</code> …\nReturns a list of the tables name and type pairs\nReturns a list of the tables name and type pairs\nDump all key-value pairs in the page at the given table …\nDump all key-value pairs in the page at the given table …\nWhether to enable write stalling on all column families.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead an object and return it, or Ok(None) if the object …\nThis opens the DB in read only mode and returns a struct …\nThis opens the DB in read only mode and returns a struct …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen in read only mode. No limitation on number of …\nOpen in read only mode. No limitation on number of …\nOpens a set of tables in read-write mode Only one process …\nOpens a set of tables in read-write mode Only one process …\nGet key value sizes from the db Tables must be opened in …\nGet key value sizes from the db Tables must be opened in …\nTry catch up with primary for all tables. This can be a …\nTry catch up with primary for all tables. This can be a …\nForked version of <code>sui_types::object::Data</code> Adds extra enum …\nForked version of <code>sui_types::object::Object</code> Used for …\nEnum wrapper for versioning\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf there is no backpressure returns immediately. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParameters of the epoch fixed at epoch start.\nFor situations in which there is no config available (e.g. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVersion assignments for a single transaction\nA wrapper around things that can be scheduled for …\nAccumulator version number at the beginning of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhen providing a network config, we will use the \\node_idx …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrometheus metrics which can be displayed in Grafana, …\nHow to talk to this committee.\nOur Sui committee.\nStore here for clone during re-config.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nQuery the object with highest version number from the …\nGet the latest system state object from the authorities. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetrics\nCreate a new network authority aggregator by reading the …\nSubmits the transaction to a quorum of validators to make …\nCreate a new AuthorityAggregator using information from …\nReference gas price for the current epoch.\nMetric base for the purpose of creating new safe clients …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nFor more human readable metrics reporting. It’s OK for …\nWhether this certificate is newly created by aggregating …\nReturns the argument unchanged.\nExecute a certificate.\nExecute a certificate.\nExecute a certificate.\nHandle Object information requests for this account.\nHandle Object information requests for this account.\nHandle Object information requests for this account.\nExecute a Soft Bundle with multiple certificates.\nInitiate a new transaction to a Sui or Primary account.\nInitiate a new transfer to a Sui or Primary account.\nHandle Object information requests for this account.\nHandle Object information requests for this account.\nCalls <code>U::from(self)</code>.\nSubmits a transaction to validators for sequencing and …\nSubmits a transaction to the Sui network for certification …\nGet validator health metrics (for latency measurement)\nWaits for effects of a transaction that has been submitted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new CheckpointService in an un-started state.\nCheckpointExecutor is a Node component that executes all …\nReturns a list of the tables name and type pairs\nDump all key-value pairs in the page at the given table …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven the epoch ID, and the last checkpoint of the epoch, …\nThis opens the DB in read only mode and returns a struct …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen in read only mode. No limitation on number of …\nOpens a set of tables in read-write mode Only one process …\nSets highest executed checkpoint to any value.\nStarts the CheckpointService.\nGet key value sizes from the db Tables must be opened in …\nTry catch up with primary for all tables. This can be a …\nWaits until all checkpoints had been built before the node …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecute all checkpoints for the current epoch, ensuring …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor all the mutable shared inputs, get the highest minimum …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSubmit Sui certificates to the consensus.\nAn object that can be used to check if the consensus is …\nA map from authority name to peer id\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\nCurrent connection statuses forwarded from the connection …\nCreate an <code>Expectation</code> for mocking the <code>submit</code> method\nCreate an <code>Expectation</code> for mocking the <code>submit_best_effort</code> …\nCreate an <code>Expectation</code> for mocking the <code>submit_to_consensus</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new Consensus adapter instance.\nCreate a new mock object with no expectations.\nCreate a new mock object with no expectations.\nGet the current number of in-flight transactions\nThis method blocks until transaction is persisted in local …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching crieteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching crieteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching crieteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed by Sui validator to start consensus protocol for each …\nWaits for consensus to finish replaying at consensus …\nA ConsensusClient that can be updated internally at any …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsensusThroughputCalculator is calculating the …\nThe ConsensusThroughputProfiler is responsible for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolves the throughput profile that corresponds to the …\nThe lower range of the throughput that this profile is …\nAllows verifying the validity of transactions\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a list of the tables name and type pairs\nDump all key-value pairs in the page at the given table …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the committee specified by <code>epoch</code>. If <code>epoch</code> is <code>None</code>, …\nThis opens the DB in read only mode and returns a struct …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen in read only mode. No limitation on number of …\nOpens a set of tables in read-write mode Only one process …\nGet key value sizes from the db Tables must be opened in …\nTry catch up with primary for all tables. This can be a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis method will remove all epoch data stores and …\nWhen building the last checkpoint of the epoch, we execute …\nThe number of consensus output items in the quarantine.\nThe current epoch ID. This is updated only when the …\nCurrent voting right of the validator in the protocol. …\nBuffer stake current in effect for this epoch\nNumber of checkpoints in the epoch.\nThe interval from when the epoch is closed to when we …\nThe number of execution time measurements dropped due to …\nThe number of execution time consensus messages dropped.\nThe number of execution time observations loaded at start …\nThe number of execution time observations messages shared …\nThe number of execution time observations messages …\nThe number of cached indebted objects in the execution …\nPer-object utilization for objects that were overutilized …\nThe number of objects determined by the execution time …\nThe number of objects tracked by the object utilization …\nThe interval from when the epoch begins (i.e. right after …\nThe interval from when the epoch is closed to when we …\nThe duration from when the epoch is closed (i.e. validator …\nThe amount of time taken to complete random beacon DKG …\nThe amount of time taken to complete first phase of the …\nThe amount of time taken from epoch start to completion of …\nSet to 1 if the random beacon DKG protocol failed for the …\nThe amount of time taken to start first phase of the …\nThe number of shares held by this node after the random …\nThe interval from when the epoch is closed to when we …\nTotal duration of the epoch. This is measured from when …\nTotal amount of gas rewards (i.e. computation gas cost) in …\nNumber of transactions in the epoch.\nThe total duration when this validator is halted, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether we are running in safe mode where reward …\nThe number of shared object assignments in the quarantine.\nAdds a received VersionedDkgMessage to the randomness DKG …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStarts the process of generating the given RandomnessRound.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotifies the associated randomness manager that randomness …\nGenerates a new RandomnessReporter for reporting observed …\nSends the initial dkg::Message to begin the randomness DKG …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to acquire object locks for all of the owned input …\nBuild a DBBatch containing the given transaction outputs.\nShould only be used for sui-tool or tests. Nodes must use …\nDurably commit the outputs of the given transactions to …\nReturn the object with version less then or eq to the …\nReturns the argument unchanged.\nIf the given consensus object stream was ended at the …\nReturn the watermark for the highest checkpoint for which …\nIf the given consensus object stream was ended, return …\nGet the latest marker for a given object.\nGet the marker at a specific version\nGet the execution outputs of a mysticeti fastpath …\nCalls <code>U::from(self)</code>.\nThis is a temporary method to be used when we enable …\nLoad a list of objects from the store by object reference. …\nUsed by execution scheduler to determine if input objects …\nWait until the effects of the given transactions are …\nWait until the outputs of the given transactions are …\nGiven a list of input and receiving objects for a …\nDurably commit a transaction to the database. Used to …\nReconfigure the cache itself. TODO: this is only needed …\nWrite the output of a Mysticeti fastpath certified …\nWrite the output of a transaction.\nMemoryCache is a cache for the transaction execution which …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReconfigure internal state at epoch start. This resets the …\nSerializable representation of the ObjectRef of an object …\nAccumulates the effects of a single checkpoint and …\nReturns the result of accumulating the live object set, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis function is only called in older protocol versions, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a list of the tables name and type pairs\nDump all key-value pairs in the page at the given table …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis method gets the balance for all coin types from the …\nRead all balances for a <code>SuiAddress</code> from the backend …\nThis method first gets the balance from …\nRead balance for a <code>SuiAddress</code> and <code>CoinType</code> from the …\nstarting_object_id can be used to implement pagination, …\nThis opens the DB in read only mode and returns a struct …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen in read only mode. No limitation on number of …\nOpens a set of tables in read-write mode Only one process …\nGet key value sizes from the db Tables must be opened in …\nTry catch up with primary for all tables. This can be a …\nRateTracker tracks events in a rolling window, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new RateTracker to track event rate …\nReturns the rate of events.\nRecords an event at current time.\nRecords an event at time <code>now</code>.\nA utility to build consecutive checkpoints by adding …\nBuilds a checkpoint using internally buffered transactions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOverride the next checkpoint number to generate. This can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrack the size of the module cache.\nGets a client to submit transactions to Mysticeti, or …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether the authority is overloaded.\nThe calculated percentage of transactions to drop.\nCreate a new <code>QuorumDriverHandler</code> based on the same …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed in tests when smaller number of retries is desired\nA dummy ReconfigObserver for testing.\nA ReconfigObserver that subscribes to a reconfig channel …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompaction filter for automatic pruning of old …\nCheckpoint watermark type\nCommits the pending updates for the provided checkpoint …\nDump all key-value pairs in the page at the given table …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex a checkpoint and stage the index updated in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen in read only mode. No limitation on number of …\nGet key value sizes from the db Tables must be opened in …\nTry catch up with primary for all tables. This can be a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSee <code>SafeClientMetrics::new</code> for description of each metrics.\nPrometheus metrics which can be displayed in Grafana, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExecute a certificate.\nExecute a certificate.\nInitiate a new transfer to a Sui or Primary account.\nHandle Transaction information requests for a given digest.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSubmit a transaction for certification and execution.\nHandle validator health check requests (for latency …\nWait for effects of a transaction that has been submitted …\nVerifies signatures in ways that faster than verifying …\nVerifies all certificates - if any fail return error.\nVerifies certificates in batch mode, but returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerifies one cert asynchronously, in a batch.\nexposed as a public method for the benchmarks\nVerifies all certs, returns Ok only if all are valid.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Streamer splits a mpsc channel into multiple mpsc …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSubscribe to the data stream filtered by the filter object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a cert using an arbitrarily large committee.\nMake a dummy tx that uses random object refs.\nIf this variant is set, then we do no tallying or running …\nHandle check with dry-run mode considered\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDirect access api for test verification\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransient failure during transaction processing that …\nTransactionDriver encountered an internal error. …\nTransaction execution observed multiple effects digests, …\nOver validity threshold of validators rejected the …\nOptions for submitting a transaction.\nTransaction timed out but we return last retriable error …\nExports Client facing errors on transaction processing via …\nThe transaction failed validation from local state. …\nWhen submitting a transaction, only the validators in the …\nDrives transaction to submission and effects …\nWhen forwarding transactions on behalf of a client, this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nContains the error value\nContains the success value\nPrometheus metrics which can be displayed in Grafana, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFeedback from TransactionDriver operations\nOperation types for validator performance tracking\nAn iterator over the variants of OperationType\nMonitors validator interactions from the client’s …\nThe unique authority name (public key)\nThe human-readable display name for the validator\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLatency of operations per validator\nThe operation type\nFailure count per validator and operation type\nSuccess count per validator and operation type\nCurrent performance per validator. The performance is the …\nThe ping type. If it’s not a ping request, then this is …\nRecord client-observed interaction result with a validator.\nResult of the operation: Ok(latency) if successful, …\nSelect validators based on client-observed performance for …\nNumber of low latency validators that got shuffled.\nThe <code>ValidatorTxFinalizer</code> is responsible for finalizing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIncremental delay for validators to wake up to finalize a …\nThis is a very expensive function that verifies some of …")