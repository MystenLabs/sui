searchState.loadedDescShard("sui_indexer_alt_framework", 0, "Contains the error value\nTrait that provides a constant indicating the number of …\nCommand-line arguments for the indexer\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nAdds a new pipeline to this indexer and starts it up. …\nOverride for the checkpoint to start ingestion from – …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ingestion client used by the indexer to fetch …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOverride for the checkpoint to end ingestion at …\nThe indexer’s metrics.\nCreate a new instance of the indexer framework from a …\nCreate a new temporary database and runs provided …\nCreate a new instance of the indexer framework. …\nThe minimum next checkpoint across all sequential …\nOnly run the following pipelines. If not provided, all …\nThe pipelines that this indexer will run.\nStart ingesting checkpoints. Ingestion either starts from …\nAdds a new pipeline to this indexer and starts it up. …\nDon’t write to the watermark tables for concurrent …\nExternal users access the store trait through …\nThe store used by the indexer.\nBundle of arguments for setting up an indexer cluster (an …\nAn opinionated IndexerCluster that spins up an Indexer …\nBuilder for creating an IndexerCluster with a fluent API\nBuild the IndexerCluster instance.\nCreate a new builder for constructing an IndexerCluster.\nThis token controls stopping the indexer and metrics …\nWhere to get checkpoint data from.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhat to index and in what time range.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess to the indexer’s metrics. This can be cloned …\nHow to expose metrics.\nCreate a new builder instance\nStarts the indexer and metrics service, returning a handle …\nSet the main indexer cluster’s configuration arguments …\nSet client arguments (where to get checkpoint data from). …\nSet the PostgreSQL database connection URL (required).\nConfigure database connection parameters such as pool …\nSet indexer arguments (what to index and in what time …\nSet the ingestion configuration, which controls how the …\nSet metrics arguments (how to expose metrics). This …\nAdd a custom prefix to all metrics reported by this …\nSet database migrations to run.\nMaximum size of checkpoint backlog across all workers …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMaximum number of checkpoints to attempt to fetch …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to the local ingestion directory. If both …\nTODO: If we want to expose this as part of the framework, …\nRemote Store to fetch checkpoints from.\nPolling interval to retry fetching checkpoints that do not …\nSui fullnode gRPC url to fetch checkpoints from. If all …\nOptional password for the gRPC service.\nOptional username for the gRPC service.\nStart the ingestion service as a background task, …\nAdd a new subscription to the ingestion service. Note that …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nFetch checkpoint data by sequence number.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nFetch the bytes for a checkpoint by its sequence number. …\nFetch metadata mapping epoch IDs to the sequence numbers …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHow much concurrency to use when processing checkpoint …\nHow much concurrency to use when processing checkpoint …\nUsed to identify the pipeline in logs and metrics.\nImplementors of this trait are responsible for …\nThe type of value being inserted by the handler.\nThe collector will check for pending data at least this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe processing logic for turning a checkpoint into rows of …\nWatermark task will check for pending watermarks this …\nNumber of concurrent writers per pipeline.\nConfiguration for a concurrent pipeline\nHandlers implement the logic for a given indexing …\nIf there are more than this many rows pending, the …\nThe maximum number of watermarks that can show up in a …\nIf at least this many rows are pending, the committer will …\nTake a chunk of values and commit them to the database, …\nConfiguration for the writer, that makes forward progress.\nHow long to wait after the reader low watermark was set, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHow often the pruner should check whether there is any …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum range to try and prune in one request, …\nClean up data between checkpoints <code>_from</code> and <code>_to_exclusive</code> …\nThe max number of tasks to run in parallel for pruning.\nConfiguration for the pruner, that deletes old data.\nHow much data to keep, this is measured in checkpoints.\nA type to combine multiple <code>Self::Value</code>-s into. This can be …\nHandlers implement the logic for a given indexing …\nMaximum number of checkpoints to try and write in a single …\nIf at least this many rows are pending, the committer will …\nConfiguration for a sequential pipeline\nAdd <code>values</code> from processing a checkpoint to the current …\nHow many checkpoints to hold back writes for.\nTake a batch of values and commit them to the database, …\nConfiguration for the writer, that makes forward progress.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrapper struct over the remote <code>PooledConnection</code> type for …\nTrait that provides a constant indicating the number of …\nRetrieves a connection from the pool. Can fail with a …\nNumber of connections to keep in the pool.\nTime spent waiting for a connection from the pool to …\nTime spent waiting for statements to complete, in …\nConstruct a new DB connection pool talking to the database …\nConstruct a new DB connection pool talking to the database …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns new migrations derived from the combination of …\nDrop all tables, and re-run migrations if supplied.\nRun migrations on the database. Use Diesel’s …\nThe <code>sql!</code> macro is used to construct a <code>diesel::SqlLiteral&lt;T&gt;</code>…\nStatistics about the connection pool\nPath to a custom CA certificate to use for server …\nEnable server certificate verification. By default, this …\nA full SQL query constructed from snippets of raw SQL and …\nEmbed <code>value</code> into the query as a bind parameter, at the end …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a new query starting with the <code>sql</code> snippet.\nAppend <code>query</code> at the end of <code>self</code>.\nAdd a raw <code>sql</code> snippet to the end of the query.\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nThe actual table struct\nA storage-agnostic interface that provides database …\nLocal instance of a <code>postgres</code> server.\nA temporary, local postgres database\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn an ephemeral, available port. On unix systems, the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate and start a new temporary postgres database.\nStart a local <code>postgres</code> database service.\nInitialize and start a local <code>postgres</code> database service.\nReturn the url used to connect to the database\nExtension trait introducing <code>try_for_each_spawned</code> to all …\nAttempts to run this stream to completion, executing the …\nWraps a future with slow/stuck detection using …")