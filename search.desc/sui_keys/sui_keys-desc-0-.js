searchState.loadedDescShard("sui_keys", 0, "External keystore for managing keys and aliases with an …\nRequest structure for signing a message with an external …\nAdd a Key ID from the given an external signer to the Sui …\nHolds a map of addresses to aliases\nValidate that all current expectations for all methods have\nExecute a command against the command runner\nCreate an <code>Expectation</code> for mocking the <code>run</code> method\nExport the key pair for the given address as a <code>SuiKeyPair</code>.\nExternal signer binary (e.g., “sui-ledger-signer”)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImport a keypair into the keystore.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey ID for the external signer, used to query/interact …\nKey ID for the external signer, used to identify which key …\nLoad keys and aliases from a given path or creates a new …\nbase64 encoded message to sign\nCreate a new mock object with no expectations.\nTest function for mocked command runner\nReturn all Key IDs associated with an external signer, …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching crieteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nEd25519 follows SLIP-0010 using hardened path: m/44’/784…\nAn address or an alias associated with a key in the wallet …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nRead from file as Base64 encoded <code>privkey</code> and return a …\nRead a SuiKeyPair from a file. The content could be any of …\nRead from file as Base64 encoded <code>flag || privkey</code> and …\nRead from file as Base64 encoded <code>flag || privkey</code> and …\nWrite Base64 encoded <code>privkey</code> to file.\nWrite Base64 encoded <code>flag || privkey</code> to file.\nDefault options for key generation of any keystore type.\nSigner\nFile or InMem keystore\nReturn an array of <code>SuiAddress</code>, consisting of every address …\nReturn an array of <code>SuiAddress</code>, consisting of every address …\nReturn an array of (&amp;SuiAddress, &amp;Alias), consisting of …\nReturn an array of (&amp;SuiAddress, &amp;Alias), consisting of …\nCheck if an alias exists by its name\nCheck if an alias exists by its name\nReturn an array of <code>Alias</code>, consisting of every alias …\nReturn an array of <code>Alias</code>, consisting of every alias …\nReturn an array of <code>Alias</code>, consisting of every alias and …\nGet all aliases objects\nMutable references to each alias in the keystore.\nMutable references to each alias in the keystore.\nReturn an array of <code>Alias</code>, consisting of every alias and …\nReturns an alias string. Optional string can be passed, …\nReturns an alias string. Optional string can be passed, …\nThis function returns an error if the provided alias …\nThis function returns an error if the provided alias …\nReturn an array of <code>PublicKey</code>, consisting of every public …\nReturn an array of <code>PublicKey</code>, consisting of every public …\nReturn <code>SuiKeyPair</code> for the given address.\nReturn <code>SuiKeyPair</code> for the given address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new keypair and add it into the keystore.\nGenerate a new keypair and add it into the keystore.\nGet the alias of an address.\nGet the alias of an address.\nGet the alias if it exists, or return an error if it does …\nGet alias of address\nGet address by its identity: a type which is either an …\nGet address by its identity: a type which is either an …\nImport a keypair into the keystore from a <code>SuiKeyPair</code> and …\nImport a keypair into the keystore from a <code>SuiKeyPair</code> and …\nImport from a mnemonic phrase.\nImport from a mnemonic phrase.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove a keypair from the keystore by its address.\nRemove a keypair from the keystore by its address.\nKeys saved as Base64 with 33 bytes <code>flag || privkey</code> …\nSign a hash with the keypair corresponding to the given …\nSign a hash with the keypair corresponding to the given …\nSign a message with the keypair corresponding to the given …\nSign a message with the keypair corresponding to the given …\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdates the alias of an existing keypair.\nUpdates the alias of an existing keypair.\nUpdates an old alias to the new alias and saves it to the …\nUpdates an old alias to the new alias. If the new_alias is …\nReturn a random name formatted as first-second from a list …\nReturn a unique collection of names.")