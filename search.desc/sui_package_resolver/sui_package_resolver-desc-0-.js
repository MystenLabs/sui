searchState.loadedDescShard("sui_package_resolver", 0, "A <code>CleverError</code> is a special kind of abort code that is used …\nDeserialized representation of a struct definition.\nA <code>StructRef</code> that owns its strings.\nFully qualified struct identifier.  Uses copy-on-write …\nSerialized representation of variants (names and …\nContains the error value\nThe <code>ErrorConstants</code> enum is used to represent the different …\nDeserialized representation of a function definition\nOptional configuration that imposes limits on the work …\nNo constant information is available, only a line number.\nContains the success value\nDeserialized representation of a type signature that could …\nDeserialized representation of a type signature that could …\nInterface to abstract over access to a store of live …\nStore which fetches package for the given address from the …\nIf there is an error constant value, but ii is not one of …\nThe error is a complete error, with an error identifier …\nThe Resolver is responsible for providing information …\nA function parameter or return signature, with its type …\nSerialized representation of fields (names and …\nDeserialized representation of an enum definition. These …\nReturn the abilities of a concrete type, based on the …\nThis type’s abilities.\nThe canonical form of a type refers to each type in terms …\nThe internal data of the datatype. This can either be a …\nGet the data definition corresponding to the data type …\nIterate over the datatypes with names strictly after <code>after</code> …\nThe storage ID of the package that first introduced this …\nGet the enum definition corresponding to the enum with …\nIterate over the enums with names strictly after <code>after</code> (or …\nThe error code of the abort\nInner error information. This is either a complete error, …\nRemoves all packages with ids in <code>ids</code> from the cache, if …\nRead package contents. Fails if <code>id</code> is not an object, not a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the function definition corresponding to the function …\nReturns the signatures of parameters to function …\nIterate over the functions with names strictly after <code>after</code> …\nReturn a specific instantiation of this signature, with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the function is marked <code>entry</code> or not.\nMaximum recursion depth through struct fields.\nMaximum recursion depth through type parameters.\nMaximum number of type arguments in a single type …\nMaximum size for the resolution context.\nThe (storage) module ID of the module that the assertion …\nThe module’s name\nThe name of the enum variant\nFormal parameter types.\nAttempts to infer the type layouts for pure inputs to the …\nResolves an abort code following the clever error format …\nResolves a runtime address in a <code>ModuleId</code> to a storage …\nReturn types.\nThe serialized representation of the variant’s …\nThe line number in the source file where the error occured.\nGet the struct definition corresponding to the struct with …\nIterate over the structs with names strictly after <code>after</code> …\nReturn the type layout corresponding to the given type …\nAbility constraints and phantom status for type parameters\nAbility constraints for type parameters\nWhether the function is <code>public</code>, <code>private</code> or <code>public(friend)</code>.\nThe raw (BCS) bytes of the error constant.\nThe value of the error constant.\nThe name of the error constant.\nThe name of the error constant.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.")