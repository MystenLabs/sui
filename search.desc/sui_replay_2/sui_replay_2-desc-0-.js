searchState.loadedDescShard("sui_replay_2", 0, "Subcommands for the replay tool\nExtract a package from cache to a file\nEnum around rpc gql endpoints.\nOverwrite a package in cache with a provided package file\nRebuild a package from cache and source\nArguments for replay (used for both CLI and config file)\nArguments for replay used for internal processing (same as …\nCache executors across transactions within the same epoch.\nStore implementations for the replay tool.\nTheser represent default values for the flags specified on …\nUtility to diff <code>TransactionEffect</code> in a human readable …\nTransaction digest to replay.\nFile containing a list of digests, one per line.\nExecution module for replay. The call to the executor …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad replay configuration from ~…\nMerge CLI flags and config file flags into a single …\nRPC of the fullnode used to replay the transaction.\nThe output directory for the replay artifacts. Defaults …\nWhether existing artifacts that were generated from a …\nLogical stores needed by the replay tool. Those stores are …\nThis module contains the logic to use transaction data and …\nShow transaction effects.\nSelect which data store mode to use. Options:\nTerminate a batch replay early if an error occurs when …\nWhether to trace the transaction execution. Generated …\nTracing utilities. Mostly deals with directory/file saving …\nInclude execution and total time in transaction output.\nPrint a summary of data store usage after the replay …\nRPC of the fullnode used to fetch the package\nRPC of the fullnode cache to extract from\nRPC of the fullnode cache to write to\nOutput path for rebuilt package binary. If not specified, …\nOutput path for extracted package binary\nPackage ID to rebuild\nPackage ID to extract\nPackage ID to overwrite\nPath to the package file to write\nPath to package source directory\nThe types of artifacts that the replay tool knows about …\nManages artifacts produced by the replay tool. An …\nDatatype definition: (address, module, name, …\nEncoding types for artifacts that may be output by the …\nFunction signature information for MoveCall commands in a …\nMove call information containing extracted function …\nA Move object with its struct tag\nCustom Move type representation for JSON serialization. …\nEntry in the replay cache summary representing an object …\nType of object in the replay cache with detailed Move …\nA Move package containing compiled modules\nDetailed information about a Move package.\nCompact representation of the replay cache for …\nReturns the file for the artifact, including its encoding …\nReturns the string representation of the artifact type.\nList of objects accessed during replay with their version …\nVector of function signatures, one for each command None …\nEncoding type for each artifact.\nReturns the file extension associated with the encoding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a ReplayCacheSummary from the object cache, …\nCreate MoveCallInfo by extracting function signatures from …\nFunction name\nDeserialize the artifact into json. This should always …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an <code>ArtifactManager</code> for this artifact type, rooted …\nModule name containing the function\nCreates a new <code>ArtifactManager</code> with the given base path and …\nPackage ID where the function is defined\nParameter types\nReturn types\nTry to get the ReplayCacheSummary if the artifact type is …\nTry to get the GasUsageReport if the artifact type is …\nTry to get the MoveCallInfo if the artifact type is …\nTry to get the trace reader if the artifact type is a …\nTry to get the transaction effects if the artifact type is …\nAn implementation of the replay interfaces: …\nFile system implementation of the replay interfaces: …\nGQL Queries Interface to the rpc for the gql schema …\nIn-memory implementation of the replay interfaces: …\nLRU in-memory implementation of the replay interfaces: …\nProvide an implementation of the replay_interface traits …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFile system implementation of the replay interfaces\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStatistics about cache usage\nAdd epoch data to the cache\nAdd object data to the cache\nAdd transaction data to the cache\nGet cache statistics\nGet the chain for this store\nClear all caches\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new InMemoryStore with the given node\nGet the node for this store\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new LRU store with default capacities\nCreate a new LRU store with custom capacities\nA read-through store that composes a primary (cache) and a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new read-through store with primary (cache) and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInformation about a package in the cache\nRebuilds a package by combining an on-chain package with …\nEntry point for the extract-package command\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEntry point for the overwrite-package command\nMain entry point to rebuild a package\nEntry point for the package rebuild command\nReplace the package in the cache with the given object\nSave a package object to a file\nEpoch data required to reaplay a transaction.\nAn <code>EpochStore</code> retrieves the epoch data and protocol …\nWrite-back trait for epoch data. Allows storing epoch …\nQuery for an object. Specifies an <code>ObjectID</code> and the “rule…\nThe <code>ObjectStore</code> trait is used to retrieve objects by their …\nWrite-back trait for object data. Allows storing objects …\nTrait combining all read capabilities for a data store\nTrait combining all read and write capabilities for a data …\nA trait to set up the data store. This is used to setup …\nA reporting trait for data stores to print a usage/summary …\nTransaction data with effects and checkpoint required to …\nA <code>TransactionStore</code> has to be able to retrieve transaction …\nWrite-back trait for transaction data. Allows storing …\nQuery options for an object. <code>Version</code> request an object at …\nReturn the <code>EpochData</code> for a given epoch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve objects by their keys, with different query …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the <code>ProtocolConfig</code> for a given epoch.\nSet up the data store. Returns the chain identifier if …\nGiven a transaction digest, return transaction info …\nStore epoch data for a given epoch.\nStore object data based on the ObjectKey and actual …\nStore transaction data, effects, and the checkpoint it was …\nProvides executors for transaction replay, with optional …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet or create an executor for the given epoch. If caching …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccumulator for total metrics across all transactions in a …\nAccumulate metrics from a single transaction replay.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSaves the trace and additional metadata needed to analyze …")