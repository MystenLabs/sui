searchState.loadedDescShard("sui_rpc_loadgen", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe path to log file directory\ndifferent chunks will be executed concurrently on the same …\ninclusive, uses <code>getLatestCheckpointSequenceNumber</code> if <code>None</code>\nDefault to start from checkpoint 0\nshould divide tasks across multiple threads\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nall payload should implement this trait\nprocess commands in order\nwrite results to file based on LoadTestConfig\nIf None, use <code>getLatestCheckpointSequenceNumber</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDifferent thread should use different gas_payment to avoid …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nprepare payload for each thread according to LoadTestConfig\nhow long to wait between the start of two subsequent …\n0 means the command will be run once. Default to be 0\nDefault to start from 0\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nCalculate the split amounts for a given number of coins, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nget the latest object ref from local cache, and if not …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate the number of transactions needed to split the …\nsign_and_execute transaction and update <code>object_ref_cache</code>\n<code>ToString::to_string</code>, but without panic on OOM.")