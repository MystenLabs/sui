searchState.loadedDescShard("sui_sdk", 0, "The Sui Rust SDK\nSuiClient is the basic type that provides all the …\nA Sui client builder for connecting to the Sui network\nReturns the API version information as a string.\nReturns a list of RPC methods supported by the node the …\nReturns a list of streaming/subscription APIs supported by …\nSet the basic auth credentials for the HTTP client\nReturns a SuiClient object connected to the Sui network …\nReturns a SuiClient object that is ready to interact with …\nReturns a SuiClient object that is ready to interact with …\nReturns a SuiClient object that is ready to interact with …\nReturns a SuiClient object that is ready to interact with …\nVerifies if the API version matches the server version and …\nReturns a reference to the coin read API.\nSet custom headers for the HTTP client\nReturns a reference to the event API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the governance API.\nReturns a reference to the underlying http client.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the max concurrent requests allowed\nReturns a reference to the quorum driver API.\nReturns a reference to the read API.\nSet the request timeout to the specified duration\nReturns a reference to the transaction builder API.\nReturns a reference to the underlying WebSocket client, if …\nSet the WebSocket ping interval\nSet the WebSocket URL for the Sui network\nCoin Read API provides the functionality needed to get …\nEvent API provides the functionality to fetch, query, or …\nGovernance API provides the staking functionality.\nQuorum API that provides functionality to execute a …\nThe main read API structure with functions for retrieving …\nReturn the inspection of the transaction block, or an …\nDry run a transaction block given the provided transaction …\nExecute a transaction with a FullNode client. <code>request_type</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a list of balances for each coin type owned by the …\nReturn a paginated response with all the coins for the …\nReturn the balance for the given coin type owned by …\nReturn the first four bytes of the chain’s genesis …\nReturn a checkpoint, or an error upon failure.\nReturn a paginated list of checkpoints, or an error upon …\nReturn the coin metadata (name, symbol, description, …\nReturn a paginated response with the coins for the given …\nReturn the coins for the given address as a stream.\nReturn the SuiCommittee information for the provided <code>epoch</code>…\nReturn the SuiCommittee information for the given <code>epoch</code>, …\nReturn the dynamic field object information for a …\nReturn a paginated response with the dynamic fields owned …\nReturn a list of events for the given transaction digest, …\nReturn a stream of events for the given event filter.\nReturn the sequence number of the latest checkpoint that …\nReturn the latest SUI system state object on-chain, or an …\nReturn An object’s bcs content <code>Vec&lt;u8&gt;</code> based on the …\nReturn a map consisting of the move package name and the …\nReturn a SuiObjectResponse based on the provided ObjectID …\nReturn a paginated response with the objects owned by the …\nReturn the protocol config, or an error upon failure.\nReturn the reference gas price, or an error upon failure.\nReturns the reference gas price as a u64 or an error …\nReturn the reference gas price for the network, or an …\nReturn a list of DelegatedStake objects for the given …\nReturn the total supply for a given coin type, or an error …\nReturn the total number of transaction blocks known to …\nReturn a transaction and its effects in a …\nReturn a stream of SuiTransactionBlockResponse, or an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a list of SuiObjectResponse from the given vector …\nReturn a list of SuiTransactionBlockResponse based on the …\nReturn a paginated response with events for the given …\nReturn a paginated response with all transaction blocks …\nReturn a list of coins for the given address, or an error …\nReturn a stream of events, or an error upon failure.\nSubscribe to a stream of transactions.\nReturn a parsed past object for the provided ObjectID and …\nReturn a list of SuiPastObjectResponse objects, or an …\nVerify a zkLogin signature against bytes that is parsed …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe address that is currently active in the keystore.\nThe alias of the currently active environment.\nBasic HTTP access authentication in the format of …\nCached chain identifier for this environment.\nList of environments that the client can connect to.\nOptional external keystore for managing keys that are not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe keystore that holds the user’s private keys, …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdate the cached chain ID for the specified environment.\nVerify a signature against a personal message bytes and …\nAdd an account\nCache (or recache) chain ID for the active environment by …\nExecute a transaction and wait for it to be locally …\nExecute a transaction and wait for it to be locally …\nReturns the argument unchanged.\nFind a gas object which fits the budget\nGet all the gas objects (and conveniently, gas amounts) …\nReturns all the account addresses managed by the wallet …\nGet the latest full object reference given a object id\nGet the latest object reference given a object id\nReturns one address and all gas objects owned by that …\nReturn a gas object owned by an arbitrary address managed …\nGiven an address, return one gas object owned by this …\nInfer the sender of a transaction based on the gas objects …\nCalls <code>U::from(self)</code>.\nLoad the chain ID corresponding to the active environment, …\nSign a transaction with a key currently managed by the …")