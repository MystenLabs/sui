searchState.loadedDescShard("sui_transactional_test_runner", 0, "This module contains the transactional test runner …\nTODO: better name?\nCreates an adapter for the given tasks, using the first …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes the adapter to run tasks from path.\nConvenience function that creates an adapter and runs the …\nThis module contains the transactional test runner …\nEnable references in PTBs\nDir for simulacrum to write checkpoint files to. To be …\nEnable accumulator features for testing (e.g., …\nEnable authenticated event streams for testing\nEnable non-exclusive write objects for testing\nThe number of epochs to keep in the database. Epochs …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of JWK issuers (e.g., “google.com,microsoft.com”).\nURL for the Sui REST API. To be passed to the offchain …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse a string representing an encoded cursor. Cursors can …\nTrait for interacting with the offchain state of the Sui …\nExecutes a GraphQL query and returns the response.\nExecutes a JSON-RPC query and returns the response. The …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPolls the checkpoint table until the given checkpoint is …\nPolls the checkpoint table until the given checkpoint is …\nA small parser used for parsing programmable transaction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nExtra args related to configuring the indexer and reader.\nDir for simulacrum to write checkpoint files to. To be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration for offchain state reader read from the file …\nA trait encapsulating methods to interact with offchain …\nProcess the error string such that it’s less dependent …\nIf <code>is_simulator</code> is true, the executor will be a <code>Simulacrum</code>…\nURL for the Sui REST API. To be passed to the offchain …\n<code>ToString::to_string</code>, but without panic on OOM.")