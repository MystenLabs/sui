searchState.loadedDescShard("transaction_fuzzer", 0, "Need to have a wrapper struct here so we can implement …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun a proptest test with give number of test cases, a …\nRepresents any sort of transaction that can be done in an …\nAllows accounts to be randomly selected from an account …\nDetermines the sampling algorithm used to pick accounts …\nMutable references to a three-tuple of distinct accounts …\nA set of accounts that has been set up and can now be used …\nA set of accounts which can be used to construct an …\nAn account may only be picked these many times.\nRepresents a peer-to-peer transaction performed in the …\nRepresents a peer-to-peer transaction performed in the …\nRepresents a peer-to-peer transaction performed in the …\nRepresents a peer-to-peer transaction performed in the …\nRepresents a peer-to-peer transaction performed in the …\nAn account may be picked as many times as possible.\nA mutable reference to the first account picked.\nA mutable reference to the second account picked.\nA mutable reference to the third account picked.\nReturns the accounts currently in this universe.\nAdds an account to the universe so that future …\nApplies this transaction onto the universe, updating …\nCreates an arced version of this transaction, suitable for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index of the first account picked.\nThe index of the second account picked.\nThe index of the third account picked.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>Strategy</code> that provides a variety of balances (or …\nReturns the number of accounts in this account universe.\nReturns the number of accounts currently in this universe.\nPicks an account using the provided <code>Index</code> as a source of …\nPicks two accounts randomly from this universe and returns …\nRun these transactions and verify the expected output.\nSets the pick style used by this account universe.\nReturns an <code>AccountUniverse</code> with the initial state …\nReturns a <code>Strategy</code> that creates <code>AccountData</code> instances.\nReturns a <code>Strategy</code> that generates a universe of accounts …\nReturns a <code>Strategy</code> that generates a universe of accounts …\nRun transactions with the given reference gas price.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStand-ins for programmable transaction Commands used to …\nthis also reflects the fact that we have coin-generating …\nthe merge command takes must take no more than …\nthe max number of coins that the vector can be made out of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")