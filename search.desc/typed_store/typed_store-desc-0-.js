searchState.loadedDescShard("typed_store", 0, "A helper macro to simplify common operations for opening …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides a mutable struct to form a collection of database …\nAn interface to a rocksDB database, keyed by a columnfamily\nCreates a default RocksDB option, to be used when RocksDB …\nFlush all memtables to SST files on disk.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ninserts a range of (key, value) pairs given as an iterator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen set, debug log the hash of the key and value bytes …\nReturns a vector of values corresponding to the keys …\nConvenience method for batch insertion\nConvenience method for batch removal\nCreate a new batch associated with a DB reference.\nOpens a database with options, and a number of column …\nOpens a database with options, and a number of column …\nReopens an open database as a typed map operating under a …\nCreates a safe reversed iterator with optional bounds. …\nWrites a range delete tombstone to delete all entries in …\nDeletes a range of keys between <code>from</code> (inclusive) and <code>to</code> …\nTry to catch up with primary when running as secondary\nConsume the batch and write its operations to the database\nConsume the batch and write its operations to the database …\nReturns true if the map contains a value for the specified …\nReturns the argument unchanged.\nReturns the value for the given key from the map, if it …\nInserts the given key-value pair into the map.\nCalls <code>U::from(self)</code>.\nReturns true if the map is empty, otherwise false.\nReturns true if the map contains a value for the specified …\nReturns a vector of values corresponding to the keys …\nInserts key-value pairs, non-atomically.\nRemoves keys, non-atomically.\nRemoves the entry for the given key from the map.\nSame as <code>iter</code> but performs status check.\nUses delete range on the entire key range\nTry to catch up with primary when running as secondary")