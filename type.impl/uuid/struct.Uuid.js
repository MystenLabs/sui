(function() {
    var type_impls = Object.fromEntries([["mysten_metrics",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#955\">Source</a><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#957\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u8]>","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#impl-Clone-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#19\">Source</a><a href=\"#impl-Debug-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#21\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#948\">Source</a><a href=\"#impl-Default-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#950\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#26\">Source</a><a href=\"#impl-Display-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#27\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBraced%3E-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#916-921\">Source</a><a href=\"#impl-From%3CBraced%3E-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Braced.html\" title=\"struct uuid::fmt::Braced\">Braced</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#916-921\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Braced.html\" title=\"struct uuid::fmt::Braced\">Braced</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Braced>","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CHyphenated%3E-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#916-921\">Source</a><a href=\"#impl-From%3CHyphenated%3E-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Hyphenated.html\" title=\"struct uuid::fmt::Hyphenated\">Hyphenated</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#916-921\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Hyphenated.html\" title=\"struct uuid::fmt::Hyphenated\">Hyphenated</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Hyphenated>","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSimple%3E-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#916-921\">Source</a><a href=\"#impl-From%3CSimple%3E-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Simple.html\" title=\"struct uuid::fmt::Simple\">Simple</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#916-921\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Simple.html\" title=\"struct uuid::fmt::Simple\">Simple</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Simple>","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CUrn%3E-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#916-921\">Source</a><a href=\"#impl-From%3CUrn%3E-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Urn.html\" title=\"struct uuid::fmt::Urn\">Urn</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#916-921\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Urn.html\" title=\"struct uuid::fmt::Urn\">Urn</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Urn>","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/parser.rs.html#22\">Source</a><a href=\"#impl-FromStr-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/parser.rs.html#23\">Source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/error/struct.Error.html\" title=\"struct uuid::error::Error\">Error</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/parser.rs.html#25\">Source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(uuid_str: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>, &lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#impl-Hash-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#43\">Source</a><a href=\"#impl-LowerHex-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#44\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.LowerHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerHex","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#impl-Ord-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#impl-PartialEq-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#impl-PartialOrd-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26str%3E-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/parser.rs.html#30\">Source</a><a href=\"#impl-TryFrom%3C%26str%3E-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/parser.rs.html#31\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/error/struct.Error.html\" title=\"struct uuid::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/parser.rs.html#33\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(uuid_str: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>, &lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&str>","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#53\">Source</a><a href=\"#impl-UpperHex-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#55\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.UpperHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperHex","mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/builder.rs.html#49\">Source</a><a href=\"#impl-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.nil\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/builder.rs.html#72\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.nil\" class=\"fn\">nil</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>The ‘nil UUID’ (all zeros).</p>\n<p>The nil UUID is a special form of UUID that is specified to have all\n128 bits set to zero.</p>\n<h5 id=\"references\"><a class=\"doc-anchor\" href=\"#references\">§</a>References</h5>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc4122.html#section-4.1.7\">Nil UUID in RFC4122</a></li>\n</ul>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uuid = Uuid::nil();\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"00000000-0000-0000-0000-000000000000\"</span>,\n    uuid.hyphenated().to_string(),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fields\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/builder.rs.html#123\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.from_fields\" class=\"fn\">from_fields</a>(d1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>, d2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>, d3: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>, d4: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">8</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>Creates a UUID from four field values.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>d1 = <span class=\"number\">0xa1a2a3a4</span>;\n<span class=\"kw\">let </span>d2 = <span class=\"number\">0xb1b2</span>;\n<span class=\"kw\">let </span>d3 = <span class=\"number\">0xc1c2</span>;\n<span class=\"kw\">let </span>d4 = [<span class=\"number\">0xd1</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xd8</span>];\n\n<span class=\"kw\">let </span>uuid = Uuid::from_fields(d1, d2, d3, <span class=\"kw-2\">&amp;</span>d4);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"</span>,\n    uuid.hyphenated().to_string(),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fields_le\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/builder.rs.html#169\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.from_fields_le\" class=\"fn\">from_fields_le</a>(d1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>, d2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>, d3: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>, d4: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">8</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>Creates a UUID from four field values in little-endian order.</p>\n<p>The bytes in the <code>d1</code>, <code>d2</code> and <code>d3</code> fields will be flipped to convert\ninto big-endian order. This is based on the endianness of the UUID,\nrather than the target environment so bytes will be flipped on both\nbig and little endian machines.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>d1 = <span class=\"number\">0xa1a2a3a4</span>;\n<span class=\"kw\">let </span>d2 = <span class=\"number\">0xb1b2</span>;\n<span class=\"kw\">let </span>d3 = <span class=\"number\">0xc1c2</span>;\n<span class=\"kw\">let </span>d4 = [<span class=\"number\">0xd1</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xd8</span>];\n\n<span class=\"kw\">let </span>uuid = Uuid::from_fields_le(d1, d2, d3, <span class=\"kw-2\">&amp;</span>d4);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\"</span>,\n    uuid.hyphenated().to_string(),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u128\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/builder.rs.html#207\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.from_u128\" class=\"fn\">from_u128</a>(v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>Creates a UUID from a 128bit value.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"number\">0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128</span>;\n\n<span class=\"kw\">let </span>uuid = Uuid::from_u128(v);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"</span>,\n    uuid.hyphenated().to_string(),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u128_le\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/builder.rs.html#250\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.from_u128_le\" class=\"fn\">from_u128_le</a>(v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>Creates a UUID from a 128bit value in little-endian order.</p>\n<p>The entire value will be flipped to convert into big-endian order.\nThis is based on the endianness of the UUID, rather than the target\nenvironment so bytes will be flipped on both big and little endian\nmachines.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"number\">0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128</span>;\n\n<span class=\"kw\">let </span>uuid = Uuid::from_u128_le(v);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"d8d7d6d5-d4d3-d2d1-c2c1-b2b1a4a3a2a1\"</span>,\n    uuid.hyphenated().to_string(),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u64_pair\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/builder.rs.html#289\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.from_u64_pair\" class=\"fn\">from_u64_pair</a>(high_bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u64.html\">u64</a>, low_bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>Creates a UUID from two 64bit values.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>hi = <span class=\"number\">0xa1a2a3a4b1b2c1c2u64</span>;\n<span class=\"kw\">let </span>lo = <span class=\"number\">0xd1d2d3d4d5d6d7d8u64</span>;\n\n<span class=\"kw\">let </span>uuid = Uuid::from_u64_pair(hi, lo);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"</span>,\n    uuid.hyphenated().to_string(),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/builder.rs.html#339\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.from_slice\" class=\"fn\">from_slice</a>(b: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>, <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/error/struct.Error.html\" title=\"struct uuid::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID using the supplied bytes.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This function will return an error if <code>b</code> has any length other than 16.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = [\n    <span class=\"number\">0xa1</span>, <span class=\"number\">0xa2</span>, <span class=\"number\">0xa3</span>, <span class=\"number\">0xa4</span>,\n    <span class=\"number\">0xb1</span>, <span class=\"number\">0xb2</span>,\n    <span class=\"number\">0xc1</span>, <span class=\"number\">0xc2</span>,\n    <span class=\"number\">0xd1</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xd8</span>,\n];\n\n<span class=\"kw\">let </span>uuid = Uuid::from_slice(<span class=\"kw-2\">&amp;</span>bytes)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"</span>,\n    uuid.hyphenated().to_string(),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice_le\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/builder.rs.html#380\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.from_slice_le\" class=\"fn\">from_slice_le</a>(b: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>, <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/error/struct.Error.html\" title=\"struct uuid::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID using the supplied bytes in little endian order.</p>\n<p>The individual fields encoded in the buffer will be flipped.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This function will return an error if <code>b</code> has any length other than 16.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = [\n    <span class=\"number\">0xa1</span>, <span class=\"number\">0xa2</span>, <span class=\"number\">0xa3</span>, <span class=\"number\">0xa4</span>,\n    <span class=\"number\">0xb1</span>, <span class=\"number\">0xb2</span>,\n    <span class=\"number\">0xc1</span>, <span class=\"number\">0xc2</span>,\n    <span class=\"number\">0xd1</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xd8</span>,\n];\n\n<span class=\"kw\">let </span>uuid = Uuid::from_slice_le(<span class=\"kw-2\">&amp;</span>bytes)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(\n    uuid.hyphenated().to_string(),\n    <span class=\"string\">\"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\"\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/builder.rs.html#415\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.from_bytes\" class=\"fn\">from_bytes</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">16</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>Creates a UUID using the supplied bytes.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = [\n    <span class=\"number\">0xa1</span>, <span class=\"number\">0xa2</span>, <span class=\"number\">0xa3</span>, <span class=\"number\">0xa4</span>,\n    <span class=\"number\">0xb1</span>, <span class=\"number\">0xb2</span>,\n    <span class=\"number\">0xc1</span>, <span class=\"number\">0xc2</span>,\n    <span class=\"number\">0xd1</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xd8</span>,\n];\n\n<span class=\"kw\">let </span>uuid = Uuid::from_bytes(bytes);\n\n<span class=\"macro\">assert_eq!</span>(\n    uuid.hyphenated().to_string(),\n    <span class=\"string\">\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes_le\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/builder.rs.html#446\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.from_bytes_le\" class=\"fn\">from_bytes_le</a>(b: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">16</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>Creates a UUID using the supplied bytes in little endian order.</p>\n<p>The individual fields encoded in the buffer will be flipped.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = [\n    <span class=\"number\">0xa1</span>, <span class=\"number\">0xa2</span>, <span class=\"number\">0xa3</span>, <span class=\"number\">0xa4</span>,\n    <span class=\"number\">0xb1</span>, <span class=\"number\">0xb2</span>,\n    <span class=\"number\">0xc1</span>, <span class=\"number\">0xc2</span>,\n    <span class=\"number\">0xd1</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xd8</span>,\n];\n\n<span class=\"kw\">let </span>uuid = Uuid::from_bytes_le(bytes);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\"</span>,\n    uuid.hyphenated().to_string(),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes_ref\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/builder.rs.html#483\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.from_bytes_ref\" class=\"fn\">from_bytes_ref</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">16</a>]) -&gt; &amp;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>Creates a reference to a UUID from a reference to the supplied bytes.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = [\n    <span class=\"number\">0xa1</span>, <span class=\"number\">0xa2</span>, <span class=\"number\">0xa3</span>, <span class=\"number\">0xa4</span>,\n    <span class=\"number\">0xb1</span>, <span class=\"number\">0xb2</span>,\n    <span class=\"number\">0xc1</span>, <span class=\"number\">0xc2</span>,\n    <span class=\"number\">0xd1</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xd8</span>,\n];\n\n<span class=\"kw\">let </span>uuid = Uuid::from_bytes_ref(<span class=\"kw-2\">&amp;</span>bytes);\n\n<span class=\"macro\">assert_eq!</span>(\n    uuid.hyphenated().to_string(),\n    <span class=\"string\">\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n</span>);\n\n<span class=\"macro\">assert!</span>(std::ptr::eq(\n    uuid <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>Uuid <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8,\n    <span class=\"kw-2\">&amp;</span>bytes <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>[u8; <span class=\"number\">16</span>] <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8,\n));</code></pre></div>\n</div></details></div></details>",0,"mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#88\">Source</a><a href=\"#impl-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hyphenated\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#91\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.hyphenated\" class=\"fn\">hyphenated</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Hyphenated.html\" title=\"struct uuid::fmt::Hyphenated\">Hyphenated</a></h4></section></summary><div class=\"docblock\"><p>Get a <a href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Hyphenated.html\" title=\"struct uuid::fmt::Hyphenated\"><code>Hyphenated</code></a> formatter.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_hyphenated\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#97\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.as_hyphenated\" class=\"fn\">as_hyphenated</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Hyphenated.html\" title=\"struct uuid::fmt::Hyphenated\">Hyphenated</a></h4></section></summary><div class=\"docblock\"><p>Get a borrowed <a href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Hyphenated.html\" title=\"struct uuid::fmt::Hyphenated\"><code>Hyphenated</code></a> formatter.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.simple\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#104\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.simple\" class=\"fn\">simple</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Simple.html\" title=\"struct uuid::fmt::Simple\">Simple</a></h4></section></summary><div class=\"docblock\"><p>Get a <a href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Simple.html\" title=\"struct uuid::fmt::Simple\"><code>Simple</code></a> formatter.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_simple\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#110\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.as_simple\" class=\"fn\">as_simple</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Simple.html\" title=\"struct uuid::fmt::Simple\">Simple</a></h4></section></summary><div class=\"docblock\"><p>Get a borrowed <a href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Simple.html\" title=\"struct uuid::fmt::Simple\"><code>Simple</code></a> formatter.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.urn\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#117\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.urn\" class=\"fn\">urn</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Urn.html\" title=\"struct uuid::fmt::Urn\">Urn</a></h4></section></summary><div class=\"docblock\"><p>Get a <a href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Urn.html\" title=\"struct uuid::fmt::Urn\"><code>Urn</code></a> formatter.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_urn\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#123\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.as_urn\" class=\"fn\">as_urn</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Urn.html\" title=\"struct uuid::fmt::Urn\">Urn</a></h4></section></summary><div class=\"docblock\"><p>Get a borrowed <a href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Urn.html\" title=\"struct uuid::fmt::Urn\"><code>Urn</code></a> formatter.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.braced\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#130\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.braced\" class=\"fn\">braced</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Braced.html\" title=\"struct uuid::fmt::Braced\">Braced</a></h4></section></summary><div class=\"docblock\"><p>Get a <a href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Braced.html\" title=\"struct uuid::fmt::Braced\"><code>Braced</code></a> formatter.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_braced\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/fmt.rs.html#136\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.as_braced\" class=\"fn\">as_braced</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Braced.html\" title=\"struct uuid::fmt::Braced\">Braced</a></h4></section></summary><div class=\"docblock\"><p>Get a borrowed <a href=\"https://docs.rs/uuid/1.2.2/uuid/fmt/struct.Braced.html\" title=\"struct uuid::fmt::Braced\"><code>Braced</code></a> formatter.</p>\n</div></details></div></details>",0,"mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#438\">Source</a><a href=\"#impl-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.NAMESPACE_DNS\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#440\">Source</a><h4 class=\"code-header\">pub const <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#associatedconstant.NAMESPACE_DNS\" class=\"constant\">NAMESPACE_DNS</a>: <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>UUID namespace for Domain Name System (DNS).</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NAMESPACE_OID\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#446\">Source</a><h4 class=\"code-header\">pub const <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#associatedconstant.NAMESPACE_OID\" class=\"constant\">NAMESPACE_OID</a>: <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>UUID namespace for ISO Object Identifiers (OIDs).</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NAMESPACE_URL\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#452\">Source</a><h4 class=\"code-header\">pub const <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#associatedconstant.NAMESPACE_URL\" class=\"constant\">NAMESPACE_URL</a>: <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>UUID namespace for Uniform Resource Locators (URLs).</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NAMESPACE_X500\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#458\">Source</a><h4 class=\"code-header\">pub const <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#associatedconstant.NAMESPACE_X500\" class=\"constant\">NAMESPACE_X500</a>: <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>UUID namespace for X.500 Distinguished Names (DNs).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_variant\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#486\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.get_variant\" class=\"fn\">get_variant</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://docs.rs/uuid/1.2.2/uuid/enum.Variant.html\" title=\"enum uuid::Variant\">Variant</a></h4></section></summary><div class=\"docblock\"><p>Returns the variant of the UUID structure.</p>\n<p>This determines the interpretation of the structure of the UUID.\nThis method simply reads the value of the variant byte. It doesn’t\nvalidate the rest of the UUID as conforming to that variant.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>my_uuid = Uuid::parse_str(<span class=\"string\">\"02f09a3f-1624-3b1d-8409-44eff7708208\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(Variant::RFC4122, my_uuid.get_variant());</code></pre></div>\n<h5 id=\"references\"><a class=\"doc-anchor\" href=\"#references\">§</a>References</h5>\n<ul>\n<li><a href=\"http://tools.ietf.org/html/rfc4122#section-4.1.1\">Variant in RFC4122</a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_version_num\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#521\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.get_version_num\" class=\"fn\">get_version_num</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the version number of the UUID.</p>\n<p>This represents the algorithm used to generate the value.\nThis method is the future-proof alternative to <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#method.get_version\" title=\"method uuid::Uuid::get_version\"><code>Uuid::get_version</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>my_uuid = Uuid::parse_str(<span class=\"string\">\"02f09a3f-1624-3b1d-8409-44eff7708208\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, my_uuid.get_version_num());</code></pre></div>\n<h5 id=\"references-1\"><a class=\"doc-anchor\" href=\"#references-1\">§</a>References</h5>\n<ul>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3\">Version in RFC4122</a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_version\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#551\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.get_version\" class=\"fn\">get_version</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://docs.rs/uuid/1.2.2/uuid/enum.Version.html\" title=\"enum uuid::Version\">Version</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the version of the UUID.</p>\n<p>This represents the algorithm used to generate the value.\nIf the version field doesn’t contain a recognized version then <code>None</code>\nis returned. If you’re trying to read the version for a future extension\nyou can also use <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#method.get_version_num\" title=\"method uuid::Uuid::get_version_num\"><code>Uuid::get_version_num</code></a> to unconditionally return a\nnumber. Future extensions may start to return <code>Some</code> once they’re\nstandardized and supported.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>my_uuid = Uuid::parse_str(<span class=\"string\">\"02f09a3f-1624-3b1d-8409-44eff7708208\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(Version::Md5), my_uuid.get_version());</code></pre></div>\n<h5 id=\"references-2\"><a class=\"doc-anchor\" href=\"#references-2\">§</a>References</h5>\n<ul>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3\">Version in RFC4122</a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_fields\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#614\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.as_fields\" class=\"fn\">as_fields</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">8</a>])</h4></section></summary><div class=\"docblock\"><p>Returns the four field values of the UUID.</p>\n<p>These values can be passed to the <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#method.from_fields\" title=\"associated function uuid::Uuid::from_fields\"><code>Uuid::from_fields</code></a> method to get\nthe original <code>Uuid</code> back.</p>\n<ul>\n<li>The first field value represents the first group of (eight) hex\ndigits, taken as a big-endian <code>u32</code> value.  For V1 UUIDs, this field\nrepresents the low 32 bits of the timestamp.</li>\n<li>The second field value represents the second group of (four) hex\ndigits, taken as a big-endian <code>u16</code> value.  For V1 UUIDs, this field\nrepresents the middle 16 bits of the timestamp.</li>\n<li>The third field value represents the third group of (four) hex digits,\ntaken as a big-endian <code>u16</code> value.  The 4 most significant bits give\nthe UUID version, and for V1 UUIDs, the last 12 bits represent the\nhigh 12 bits of the timestamp.</li>\n<li>The last field value represents the last two groups of four and twelve\nhex digits, taken in order.  The first 1-3 bits of this indicate the\nUUID variant, and for V1 UUIDs, the next 13-15 bits indicate the clock\nsequence and the last 48 bits indicate the node ID.</li>\n</ul>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uuid = Uuid::nil();\n\n<span class=\"macro\">assert_eq!</span>(uuid.as_fields(), (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0u8</span>; <span class=\"number\">8</span>]));\n\n<span class=\"kw\">let </span>uuid = Uuid::parse_str(<span class=\"string\">\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(\n    uuid.as_fields(),\n    (\n        <span class=\"number\">0xa1a2a3a4</span>,\n        <span class=\"number\">0xb1b2</span>,\n        <span class=\"number\">0xc1c2</span>,\n        <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xd1</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xd8</span>],\n    )\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_fields_le\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#657\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.to_fields_le\" class=\"fn\">to_fields_le</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">8</a>])</h4></section></summary><div class=\"docblock\"><p>Returns the four field values of the UUID in little-endian order.</p>\n<p>The bytes in the returned integer fields will be converted from\nbig-endian order. This is based on the endianness of the UUID,\nrather than the target environment so bytes will be flipped on both\nbig and little endian machines.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>uuid::Uuid;\n\n<span class=\"kw\">let </span>uuid = Uuid::parse_str(<span class=\"string\">\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(\n    uuid.to_fields_le(),\n    (\n        <span class=\"number\">0xa4a3a2a1</span>,\n        <span class=\"number\">0xb2b1</span>,\n        <span class=\"number\">0xc2c1</span>,\n        <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xd1</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xd8</span>],\n    )\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_u128\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#689\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.as_u128\" class=\"fn\">as_u128</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Returns a 128bit value containing the value.</p>\n<p>The bytes in the UUID will be packed directly into a <code>u128</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uuid = Uuid::parse_str(<span class=\"string\">\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(\n    uuid.as_u128(),\n    <span class=\"number\">0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8</span>,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u128_le\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#733\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.to_u128_le\" class=\"fn\">to_u128_le</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Returns a 128bit little-endian value containing the value.</p>\n<p>The bytes in the <code>u128</code> will be flipped to convert into big-endian\norder. This is based on the endianness of the UUID, rather than the\ntarget environment so bytes will be flipped on both big and little\nendian machines.</p>\n<p>Note that this will produce a different result than\n<a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#method.to_fields_le\" title=\"method uuid::Uuid::to_fields_le\"><code>Uuid::to_fields_le</code></a>, because the entire UUID is reversed, rather\nthan reversing the individual fields in-place.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uuid = Uuid::parse_str(<span class=\"string\">\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(\n    uuid.to_u128_le(),\n    <span class=\"number\">0xd8d7d6d5d4d3d2d1c2c1b2b1a4a3a2a1</span>,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_u64_pair\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#771\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.as_u64_pair\" class=\"fn\">as_u64_pair</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u64.html\">u64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Returns two 64bit values containing the value.</p>\n<p>The bytes in the UUID will be split into two <code>u64</code>.\nThe first u64 represents the 64 most significant bits,\nthe second one represents the 64 least significant.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uuid = Uuid::parse_str(<span class=\"string\">\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(\n    uuid.as_u64_pair(),\n    (<span class=\"number\">0xa1a2a3a4b1b2c1c2</span>, <span class=\"number\">0xd1d2d3d4d5d6d7d8</span>),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#802\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">16</a>]</h4></section></summary><div class=\"docblock\"><p>Returns a slice of 16 octets containing the value.</p>\n<p>This method borrows the underlying byte value of the UUID.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes1 = [\n    <span class=\"number\">0xa1</span>, <span class=\"number\">0xa2</span>, <span class=\"number\">0xa3</span>, <span class=\"number\">0xa4</span>,\n    <span class=\"number\">0xb1</span>, <span class=\"number\">0xb2</span>,\n    <span class=\"number\">0xc1</span>, <span class=\"number\">0xc2</span>,\n    <span class=\"number\">0xd1</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xd8</span>,\n];\n<span class=\"kw\">let </span>uuid1 = Uuid::from_bytes_ref(<span class=\"kw-2\">&amp;</span>bytes1);\n\n<span class=\"kw\">let </span>bytes2 = uuid1.as_bytes();\n<span class=\"kw\">let </span>uuid2 = Uuid::from_bytes_ref(bytes2);\n\n<span class=\"macro\">assert_eq!</span>(uuid1, uuid2);\n\n<span class=\"macro\">assert!</span>(std::ptr::eq(\n    uuid2 <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>Uuid <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8,\n    <span class=\"kw-2\">&amp;</span>bytes1 <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>[u8; <span class=\"number\">16</span>] <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8,\n));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_bytes\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#821\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.into_bytes\" class=\"fn\">into_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">16</a>]</h4></section></summary><div class=\"docblock\"><p>Consumes self and returns the underlying byte value of the UUID.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = [\n    <span class=\"number\">0xa1</span>, <span class=\"number\">0xa2</span>, <span class=\"number\">0xa3</span>, <span class=\"number\">0xa4</span>,\n    <span class=\"number\">0xb1</span>, <span class=\"number\">0xb2</span>,\n    <span class=\"number\">0xc1</span>, <span class=\"number\">0xc2</span>,\n    <span class=\"number\">0xd1</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xd8</span>,\n];\n<span class=\"kw\">let </span>uuid = Uuid::from_bytes(bytes);\n<span class=\"macro\">assert_eq!</span>(bytes, uuid.into_bytes());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_bytes_le\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#849\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.to_bytes_le\" class=\"fn\">to_bytes_le</a>(&amp;self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">16</a>]</h4></section></summary><div class=\"docblock\"><p>Returns the bytes of the UUID in little-endian order.</p>\n<p>The bytes will be flipped to convert into little-endian order. This is\nbased on the endianness of the UUID, rather than the target environment\nso bytes will be flipped on both big and little endian machines.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>uuid::Uuid;\n\n<span class=\"kw\">let </span>uuid = Uuid::parse_str(<span class=\"string\">\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(\n    uuid.to_bytes_le(),\n    ([\n        <span class=\"number\">0xa4</span>, <span class=\"number\">0xa3</span>, <span class=\"number\">0xa2</span>, <span class=\"number\">0xa1</span>, <span class=\"number\">0xb2</span>, <span class=\"number\">0xb1</span>, <span class=\"number\">0xc2</span>, <span class=\"number\">0xc1</span>, <span class=\"number\">0xd1</span>, <span class=\"number\">0xd2</span>,\n        <span class=\"number\">0xd3</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xd8\n    </span>])\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_nil\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#858\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.is_nil\" class=\"fn\">is_nil</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Tests if the UUID is nil (all zeros).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_buffer\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#893\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.encode_buffer\" class=\"fn\">encode_buffer</a>() -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">45</a>]</h4></section></summary><div class=\"docblock\"><p>A buffer that can be used for <code>encode_...</code> calls, that is\nguaranteed to be long enough for any of the format adapters.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uuid = Uuid::nil();\n\n<span class=\"macro\">assert_eq!</span>(\n    uuid.simple().encode_lower(<span class=\"kw-2\">&amp;mut </span>Uuid::encode_buffer()),\n    <span class=\"string\">\"00000000000000000000000000000000\"\n</span>);\n\n<span class=\"macro\">assert_eq!</span>(\n    uuid.hyphenated()\n        .encode_lower(<span class=\"kw-2\">&amp;mut </span>Uuid::encode_buffer()),\n    <span class=\"string\">\"00000000-0000-0000-0000-000000000000\"\n</span>);\n\n<span class=\"macro\">assert_eq!</span>(\n    uuid.urn().encode_lower(<span class=\"kw-2\">&amp;mut </span>Uuid::encode_buffer()),\n    <span class=\"string\">\"urn:uuid:00000000-0000-0000-0000-000000000000\"\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_timestamp\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#916\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.get_timestamp\" class=\"fn\">get_timestamp</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/timestamp/struct.Timestamp.html\" title=\"struct uuid::timestamp::Timestamp\">Timestamp</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the UUID is the correct version (v1, v6, or v7) this will return\nthe timestamp and counter portion parsed from a V1 UUID.</p>\n<p>Returns <code>None</code> if the supplied UUID is not V1.</p>\n<p>The V1 timestamp format defined in RFC4122 specifies a 60-bit\ninteger representing the number of 100-nanosecond intervals\nsince 00:00:00.00, 15 Oct 1582.</p>\n<p><a href=\"v1/struct.Timestamp.html\"><code>Timestamp</code></a> offers several options for converting the raw RFC4122\nvalue into more commonly-used formats, such as a unix timestamp.</p>\n<h5 id=\"roundtripping\"><a class=\"doc-anchor\" href=\"#roundtripping\">§</a>Roundtripping</h5>\n<p>This method is unlikely to roundtrip a timestamp in a UUID due to the way\nUUIDs encode timestamps. The timestamp returned from this method will be truncated to\n100ns precision for version 1 and 6 UUIDs, and to millisecond precision for version 7 UUIDs.</p>\n</div></details></div></details>",0,"mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/parser.rs.html#38\">Source</a><a href=\"#impl-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_str\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/parser.rs.html#64\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.parse_str\" class=\"fn\">parse_str</a>(input: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>, <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/error/struct.Error.html\" title=\"struct uuid::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Parses a <code>Uuid</code> from a string of hexadecimal digits with optional\nhyphens.</p>\n<p>Any of the formats generated by this module (simple, hyphenated, urn,\nMicrosoft GUID) are supported by this parsing function.</p>\n<p>Prefer <a href=\"#method.try_parse\"><code>try_parse</code></a> unless you need detailed user-facing diagnostics.\nThis method will be eventually deprecated in favor of <code>try_parse</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Parse a hyphenated UUID:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uuid = Uuid::parse_str(<span class=\"string\">\"550e8400-e29b-41d4-a716-446655440000\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(Version::Random), uuid.get_version());\n<span class=\"macro\">assert_eq!</span>(Variant::RFC4122, uuid.get_variant());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_parse\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/parser.rs.html#98\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.try_parse\" class=\"fn\">try_parse</a>(input: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>, <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/error/struct.Error.html\" title=\"struct uuid::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Parses a <code>Uuid</code> from a string of hexadecimal digits with optional\nhyphens.</p>\n<p>This function is similar to <a href=\"#method.parse_str\"><code>parse_str</code></a>, in fact <code>parse_str</code> shares\nthe same underlying parser. The difference is that if <code>try_parse</code>\nfails, it won’t generate very useful error messages. The <code>parse_str</code>\nfunction will eventually be deprecated in favor or <code>try_parse</code>.</p>\n<p>To parse a UUID from a byte stream instead of a UTF8 string, see\n<a href=\"#method.try_parse_ascii\"><code>try_parse_ascii</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Parse a hyphenated UUID:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uuid = Uuid::try_parse(<span class=\"string\">\"550e8400-e29b-41d4-a716-446655440000\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(Version::Random), uuid.get_version());\n<span class=\"macro\">assert_eq!</span>(Variant::RFC4122, uuid.get_variant());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_parse_ascii\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/parser.rs.html#125\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.try_parse_ascii\" class=\"fn\">try_parse_ascii</a>(input: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>, <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/error/struct.Error.html\" title=\"struct uuid::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Parses a <code>Uuid</code> from a string of hexadecimal digits with optional\nhyphens.</p>\n<p>The input is expected to be a string of ASCII characters. This method\ncan be more convenient than <a href=\"#method.try_parse\"><code>try_parse</code></a> if the UUID is being\nparsed from a byte stream instead of from a UTF8 string.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Parse a hyphenated UUID:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uuid = Uuid::try_parse_ascii(<span class=\"string\">b\"550e8400-e29b-41d4-a716-446655440000\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(Version::Random), uuid.get_version());\n<span class=\"macro\">assert_eq!</span>(Variant::RFC4122, uuid.get_variant());</code></pre></div>\n</div></details></div></details>",0,"mysten_metrics::RegistryID"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/v4.rs.html#3\">Source</a><a href=\"#impl-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_v4\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/v4.rs.html#33\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html#tymethod.new_v4\" class=\"fn\">new_v4</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class=\"docblock\"><p>Creates a random UUID.</p>\n<p>This uses the <a href=\"https://crates.io/crates/getrandom\"><code>getrandom</code></a> crate to utilise the operating system’s RNG\nas the source of random numbers. If you’d like to use a custom\ngenerator, don’t use this method: generate random bytes using your\ncustom generator and pass them to the\n<a href=\"struct.Builder.html#method.from_random_bytes\"><code>uuid::Builder::from_random_bytes</code></a> function\ninstead.</p>\n<p>Note that usage of this method requires the <code>v4</code> feature of this crate\nto be enabled.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uuid = Uuid::new_v4();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(Version::Random), uuid.get_version());</code></pre></div>\n<h5 id=\"references\"><a class=\"doc-anchor\" href=\"#references\">§</a>References</h5>\n<ul>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc4122#section-4.4\">Version 4 UUIDs in RFC4122</a></li>\n</ul>\n</div></details></div></details>",0,"mysten_metrics::RegistryID"],["<section id=\"impl-Copy-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#impl-Copy-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section>","Copy","mysten_metrics::RegistryID"],["<section id=\"impl-Eq-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#impl-Eq-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section>","Eq","mysten_metrics::RegistryID"],["<section id=\"impl-StructuralPartialEq-for-Uuid\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.2.2/src/uuid/lib.rs.html#433\">Source</a><a href=\"#impl-StructuralPartialEq-for-Uuid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"https://docs.rs/uuid/1.2.2/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h3></section>","StructuralPartialEq","mysten_metrics::RegistryID"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[105539]}